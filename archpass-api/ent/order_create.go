// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/pragma-collective/archpass/ent/event"
	"github.com/pragma-collective/archpass/ent/order"
	"github.com/pragma-collective/archpass/ent/ticket"
)

// OrderCreate is the builder for creating a Order entity.
type OrderCreate struct {
	config
	mutation *OrderMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetTicketID sets the "ticket_id" field.
func (oc *OrderCreate) SetTicketID(i int) *OrderCreate {
	oc.mutation.SetTicketID(i)
	return oc
}

// SetEventID sets the "event_id" field.
func (oc *OrderCreate) SetEventID(i int) *OrderCreate {
	oc.mutation.SetEventID(i)
	return oc
}

// SetWalletAddress sets the "wallet_address" field.
func (oc *OrderCreate) SetWalletAddress(s string) *OrderCreate {
	oc.mutation.SetWalletAddress(s)
	return oc
}

// SetPriceInCents sets the "price_in_cents" field.
func (oc *OrderCreate) SetPriceInCents(i int64) *OrderCreate {
	oc.mutation.SetPriceInCents(i)
	return oc
}

// SetCcCheckoutID sets the "cc_checkout_id" field.
func (oc *OrderCreate) SetCcCheckoutID(u uuid.UUID) *OrderCreate {
	oc.mutation.SetCcCheckoutID(u)
	return oc
}

// SetCreatedAt sets the "created_at" field.
func (oc *OrderCreate) SetCreatedAt(t time.Time) *OrderCreate {
	oc.mutation.SetCreatedAt(t)
	return oc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableCreatedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetCreatedAt(*t)
	}
	return oc
}

// SetModifiedAt sets the "modified_at" field.
func (oc *OrderCreate) SetModifiedAt(t time.Time) *OrderCreate {
	oc.mutation.SetModifiedAt(t)
	return oc
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (oc *OrderCreate) SetNillableModifiedAt(t *time.Time) *OrderCreate {
	if t != nil {
		oc.SetModifiedAt(*t)
	}
	return oc
}

// SetPaymentReference sets the "payment_reference" field.
func (oc *OrderCreate) SetPaymentReference(s string) *OrderCreate {
	oc.mutation.SetPaymentReference(s)
	return oc
}

// SetNillablePaymentReference sets the "payment_reference" field if the given value is not nil.
func (oc *OrderCreate) SetNillablePaymentReference(s *string) *OrderCreate {
	if s != nil {
		oc.SetPaymentReference(*s)
	}
	return oc
}

// SetPaymentWalletAddress sets the "payment_wallet_address" field.
func (oc *OrderCreate) SetPaymentWalletAddress(s string) *OrderCreate {
	oc.mutation.SetPaymentWalletAddress(s)
	return oc
}

// SetNillablePaymentWalletAddress sets the "payment_wallet_address" field if the given value is not nil.
func (oc *OrderCreate) SetNillablePaymentWalletAddress(s *string) *OrderCreate {
	if s != nil {
		oc.SetPaymentWalletAddress(*s)
	}
	return oc
}

// SetPaymentTransactionHash sets the "payment_transaction_hash" field.
func (oc *OrderCreate) SetPaymentTransactionHash(s string) *OrderCreate {
	oc.mutation.SetPaymentTransactionHash(s)
	return oc
}

// SetNillablePaymentTransactionHash sets the "payment_transaction_hash" field if the given value is not nil.
func (oc *OrderCreate) SetNillablePaymentTransactionHash(s *string) *OrderCreate {
	if s != nil {
		oc.SetPaymentTransactionHash(*s)
	}
	return oc
}

// SetTokenID sets the "token_id" field.
func (oc *OrderCreate) SetTokenID(i int) *OrderCreate {
	oc.mutation.SetTokenID(i)
	return oc
}

// SetNillableTokenID sets the "token_id" field if the given value is not nil.
func (oc *OrderCreate) SetNillableTokenID(i *int) *OrderCreate {
	if i != nil {
		oc.SetTokenID(*i)
	}
	return oc
}

// SetMintTransactionHash sets the "mint_transaction_hash" field.
func (oc *OrderCreate) SetMintTransactionHash(s string) *OrderCreate {
	oc.mutation.SetMintTransactionHash(s)
	return oc
}

// SetNillableMintTransactionHash sets the "mint_transaction_hash" field if the given value is not nil.
func (oc *OrderCreate) SetNillableMintTransactionHash(s *string) *OrderCreate {
	if s != nil {
		oc.SetMintTransactionHash(*s)
	}
	return oc
}

// SetTransferTransactionHash sets the "transfer_transaction_hash" field.
func (oc *OrderCreate) SetTransferTransactionHash(s string) *OrderCreate {
	oc.mutation.SetTransferTransactionHash(s)
	return oc
}

// SetNillableTransferTransactionHash sets the "transfer_transaction_hash" field if the given value is not nil.
func (oc *OrderCreate) SetNillableTransferTransactionHash(s *string) *OrderCreate {
	if s != nil {
		oc.SetTransferTransactionHash(*s)
	}
	return oc
}

// SetEvent sets the "event" edge to the Event entity.
func (oc *OrderCreate) SetEvent(e *Event) *OrderCreate {
	return oc.SetEventID(e.ID)
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (oc *OrderCreate) SetTicket(t *Ticket) *OrderCreate {
	return oc.SetTicketID(t.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (oc *OrderCreate) Mutation() *OrderMutation {
	return oc.mutation
}

// Save creates the Order in the database.
func (oc *OrderCreate) Save(ctx context.Context) (*Order, error) {
	oc.defaults()
	return withHooks(ctx, oc.sqlSave, oc.mutation, oc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oc *OrderCreate) SaveX(ctx context.Context) *Order {
	v, err := oc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oc *OrderCreate) Exec(ctx context.Context) error {
	_, err := oc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oc *OrderCreate) ExecX(ctx context.Context) {
	if err := oc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oc *OrderCreate) defaults() {
	if _, ok := oc.mutation.CreatedAt(); !ok {
		v := order.DefaultCreatedAt()
		oc.mutation.SetCreatedAt(v)
	}
	if _, ok := oc.mutation.ModifiedAt(); !ok {
		v := order.DefaultModifiedAt()
		oc.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oc *OrderCreate) check() error {
	if _, ok := oc.mutation.TicketID(); !ok {
		return &ValidationError{Name: "ticket_id", err: errors.New(`ent: missing required field "Order.ticket_id"`)}
	}
	if _, ok := oc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "Order.event_id"`)}
	}
	if _, ok := oc.mutation.WalletAddress(); !ok {
		return &ValidationError{Name: "wallet_address", err: errors.New(`ent: missing required field "Order.wallet_address"`)}
	}
	if _, ok := oc.mutation.PriceInCents(); !ok {
		return &ValidationError{Name: "price_in_cents", err: errors.New(`ent: missing required field "Order.price_in_cents"`)}
	}
	if _, ok := oc.mutation.CcCheckoutID(); !ok {
		return &ValidationError{Name: "cc_checkout_id", err: errors.New(`ent: missing required field "Order.cc_checkout_id"`)}
	}
	if _, ok := oc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Order.created_at"`)}
	}
	if _, ok := oc.mutation.ModifiedAt(); !ok {
		return &ValidationError{Name: "modified_at", err: errors.New(`ent: missing required field "Order.modified_at"`)}
	}
	if len(oc.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "Order.event"`)}
	}
	if len(oc.mutation.TicketIDs()) == 0 {
		return &ValidationError{Name: "ticket", err: errors.New(`ent: missing required edge "Order.ticket"`)}
	}
	return nil
}

func (oc *OrderCreate) sqlSave(ctx context.Context) (*Order, error) {
	if err := oc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	oc.mutation.id = &_node.ID
	oc.mutation.done = true
	return _node, nil
}

func (oc *OrderCreate) createSpec() (*Order, *sqlgraph.CreateSpec) {
	var (
		_node = &Order{config: oc.config}
		_spec = sqlgraph.NewCreateSpec(order.Table, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	)
	_spec.OnConflict = oc.conflict
	if value, ok := oc.mutation.WalletAddress(); ok {
		_spec.SetField(order.FieldWalletAddress, field.TypeString, value)
		_node.WalletAddress = value
	}
	if value, ok := oc.mutation.PriceInCents(); ok {
		_spec.SetField(order.FieldPriceInCents, field.TypeInt64, value)
		_node.PriceInCents = value
	}
	if value, ok := oc.mutation.CcCheckoutID(); ok {
		_spec.SetField(order.FieldCcCheckoutID, field.TypeUUID, value)
		_node.CcCheckoutID = value
	}
	if value, ok := oc.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := oc.mutation.ModifiedAt(); ok {
		_spec.SetField(order.FieldModifiedAt, field.TypeTime, value)
		_node.ModifiedAt = value
	}
	if value, ok := oc.mutation.PaymentReference(); ok {
		_spec.SetField(order.FieldPaymentReference, field.TypeString, value)
		_node.PaymentReference = value
	}
	if value, ok := oc.mutation.PaymentWalletAddress(); ok {
		_spec.SetField(order.FieldPaymentWalletAddress, field.TypeString, value)
		_node.PaymentWalletAddress = value
	}
	if value, ok := oc.mutation.PaymentTransactionHash(); ok {
		_spec.SetField(order.FieldPaymentTransactionHash, field.TypeString, value)
		_node.PaymentTransactionHash = value
	}
	if value, ok := oc.mutation.TokenID(); ok {
		_spec.SetField(order.FieldTokenID, field.TypeInt, value)
		_node.TokenID = value
	}
	if value, ok := oc.mutation.MintTransactionHash(); ok {
		_spec.SetField(order.FieldMintTransactionHash, field.TypeString, value)
		_node.MintTransactionHash = value
	}
	if value, ok := oc.mutation.TransferTransactionHash(); ok {
		_spec.SetField(order.FieldTransferTransactionHash, field.TypeString, value)
		_node.TransferTransactionHash = value
	}
	if nodes := oc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.EventTable,
			Columns: []string{order.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EventID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oc.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.TicketTable,
			Columns: []string{order.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TicketID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.Create().
//		SetTicketID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetTicketID(v+v).
//		}).
//		Exec(ctx)
func (oc *OrderCreate) OnConflict(opts ...sql.ConflictOption) *OrderUpsertOne {
	oc.conflict = opts
	return &OrderUpsertOne{
		create: oc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (oc *OrderCreate) OnConflictColumns(columns ...string) *OrderUpsertOne {
	oc.conflict = append(oc.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertOne{
		create: oc,
	}
}

type (
	// OrderUpsertOne is the builder for "upsert"-ing
	//  one Order node.
	OrderUpsertOne struct {
		create *OrderCreate
	}

	// OrderUpsert is the "OnConflict" setter.
	OrderUpsert struct {
		*sql.UpdateSet
	}
)

// SetTicketID sets the "ticket_id" field.
func (u *OrderUpsert) SetTicketID(v int) *OrderUpsert {
	u.Set(order.FieldTicketID, v)
	return u
}

// UpdateTicketID sets the "ticket_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateTicketID() *OrderUpsert {
	u.SetExcluded(order.FieldTicketID)
	return u
}

// SetEventID sets the "event_id" field.
func (u *OrderUpsert) SetEventID(v int) *OrderUpsert {
	u.Set(order.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateEventID() *OrderUpsert {
	u.SetExcluded(order.FieldEventID)
	return u
}

// SetWalletAddress sets the "wallet_address" field.
func (u *OrderUpsert) SetWalletAddress(v string) *OrderUpsert {
	u.Set(order.FieldWalletAddress, v)
	return u
}

// UpdateWalletAddress sets the "wallet_address" field to the value that was provided on create.
func (u *OrderUpsert) UpdateWalletAddress() *OrderUpsert {
	u.SetExcluded(order.FieldWalletAddress)
	return u
}

// SetPriceInCents sets the "price_in_cents" field.
func (u *OrderUpsert) SetPriceInCents(v int64) *OrderUpsert {
	u.Set(order.FieldPriceInCents, v)
	return u
}

// UpdatePriceInCents sets the "price_in_cents" field to the value that was provided on create.
func (u *OrderUpsert) UpdatePriceInCents() *OrderUpsert {
	u.SetExcluded(order.FieldPriceInCents)
	return u
}

// AddPriceInCents adds v to the "price_in_cents" field.
func (u *OrderUpsert) AddPriceInCents(v int64) *OrderUpsert {
	u.Add(order.FieldPriceInCents, v)
	return u
}

// SetCcCheckoutID sets the "cc_checkout_id" field.
func (u *OrderUpsert) SetCcCheckoutID(v uuid.UUID) *OrderUpsert {
	u.Set(order.FieldCcCheckoutID, v)
	return u
}

// UpdateCcCheckoutID sets the "cc_checkout_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCcCheckoutID() *OrderUpsert {
	u.SetExcluded(order.FieldCcCheckoutID)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderUpsert) SetCreatedAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateCreatedAt() *OrderUpsert {
	u.SetExcluded(order.FieldCreatedAt)
	return u
}

// SetModifiedAt sets the "modified_at" field.
func (u *OrderUpsert) SetModifiedAt(v time.Time) *OrderUpsert {
	u.Set(order.FieldModifiedAt, v)
	return u
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *OrderUpsert) UpdateModifiedAt() *OrderUpsert {
	u.SetExcluded(order.FieldModifiedAt)
	return u
}

// SetPaymentReference sets the "payment_reference" field.
func (u *OrderUpsert) SetPaymentReference(v string) *OrderUpsert {
	u.Set(order.FieldPaymentReference, v)
	return u
}

// UpdatePaymentReference sets the "payment_reference" field to the value that was provided on create.
func (u *OrderUpsert) UpdatePaymentReference() *OrderUpsert {
	u.SetExcluded(order.FieldPaymentReference)
	return u
}

// ClearPaymentReference clears the value of the "payment_reference" field.
func (u *OrderUpsert) ClearPaymentReference() *OrderUpsert {
	u.SetNull(order.FieldPaymentReference)
	return u
}

// SetPaymentWalletAddress sets the "payment_wallet_address" field.
func (u *OrderUpsert) SetPaymentWalletAddress(v string) *OrderUpsert {
	u.Set(order.FieldPaymentWalletAddress, v)
	return u
}

// UpdatePaymentWalletAddress sets the "payment_wallet_address" field to the value that was provided on create.
func (u *OrderUpsert) UpdatePaymentWalletAddress() *OrderUpsert {
	u.SetExcluded(order.FieldPaymentWalletAddress)
	return u
}

// ClearPaymentWalletAddress clears the value of the "payment_wallet_address" field.
func (u *OrderUpsert) ClearPaymentWalletAddress() *OrderUpsert {
	u.SetNull(order.FieldPaymentWalletAddress)
	return u
}

// SetPaymentTransactionHash sets the "payment_transaction_hash" field.
func (u *OrderUpsert) SetPaymentTransactionHash(v string) *OrderUpsert {
	u.Set(order.FieldPaymentTransactionHash, v)
	return u
}

// UpdatePaymentTransactionHash sets the "payment_transaction_hash" field to the value that was provided on create.
func (u *OrderUpsert) UpdatePaymentTransactionHash() *OrderUpsert {
	u.SetExcluded(order.FieldPaymentTransactionHash)
	return u
}

// ClearPaymentTransactionHash clears the value of the "payment_transaction_hash" field.
func (u *OrderUpsert) ClearPaymentTransactionHash() *OrderUpsert {
	u.SetNull(order.FieldPaymentTransactionHash)
	return u
}

// SetTokenID sets the "token_id" field.
func (u *OrderUpsert) SetTokenID(v int) *OrderUpsert {
	u.Set(order.FieldTokenID, v)
	return u
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *OrderUpsert) UpdateTokenID() *OrderUpsert {
	u.SetExcluded(order.FieldTokenID)
	return u
}

// AddTokenID adds v to the "token_id" field.
func (u *OrderUpsert) AddTokenID(v int) *OrderUpsert {
	u.Add(order.FieldTokenID, v)
	return u
}

// ClearTokenID clears the value of the "token_id" field.
func (u *OrderUpsert) ClearTokenID() *OrderUpsert {
	u.SetNull(order.FieldTokenID)
	return u
}

// SetMintTransactionHash sets the "mint_transaction_hash" field.
func (u *OrderUpsert) SetMintTransactionHash(v string) *OrderUpsert {
	u.Set(order.FieldMintTransactionHash, v)
	return u
}

// UpdateMintTransactionHash sets the "mint_transaction_hash" field to the value that was provided on create.
func (u *OrderUpsert) UpdateMintTransactionHash() *OrderUpsert {
	u.SetExcluded(order.FieldMintTransactionHash)
	return u
}

// ClearMintTransactionHash clears the value of the "mint_transaction_hash" field.
func (u *OrderUpsert) ClearMintTransactionHash() *OrderUpsert {
	u.SetNull(order.FieldMintTransactionHash)
	return u
}

// SetTransferTransactionHash sets the "transfer_transaction_hash" field.
func (u *OrderUpsert) SetTransferTransactionHash(v string) *OrderUpsert {
	u.Set(order.FieldTransferTransactionHash, v)
	return u
}

// UpdateTransferTransactionHash sets the "transfer_transaction_hash" field to the value that was provided on create.
func (u *OrderUpsert) UpdateTransferTransactionHash() *OrderUpsert {
	u.SetExcluded(order.FieldTransferTransactionHash)
	return u
}

// ClearTransferTransactionHash clears the value of the "transfer_transaction_hash" field.
func (u *OrderUpsert) ClearTransferTransactionHash() *OrderUpsert {
	u.SetNull(order.FieldTransferTransactionHash)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OrderUpsertOne) UpdateNewValues() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *OrderUpsertOne) Ignore() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertOne) DoNothing() *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreate.OnConflict
// documentation for more info.
func (u *OrderUpsertOne) Update(set func(*OrderUpsert)) *OrderUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetTicketID sets the "ticket_id" field.
func (u *OrderUpsertOne) SetTicketID(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetTicketID(v)
	})
}

// UpdateTicketID sets the "ticket_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateTicketID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTicketID()
	})
}

// SetEventID sets the "event_id" field.
func (u *OrderUpsertOne) SetEventID(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateEventID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateEventID()
	})
}

// SetWalletAddress sets the "wallet_address" field.
func (u *OrderUpsertOne) SetWalletAddress(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetWalletAddress(v)
	})
}

// UpdateWalletAddress sets the "wallet_address" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateWalletAddress() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateWalletAddress()
	})
}

// SetPriceInCents sets the "price_in_cents" field.
func (u *OrderUpsertOne) SetPriceInCents(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetPriceInCents(v)
	})
}

// AddPriceInCents adds v to the "price_in_cents" field.
func (u *OrderUpsertOne) AddPriceInCents(v int64) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddPriceInCents(v)
	})
}

// UpdatePriceInCents sets the "price_in_cents" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdatePriceInCents() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePriceInCents()
	})
}

// SetCcCheckoutID sets the "cc_checkout_id" field.
func (u *OrderUpsertOne) SetCcCheckoutID(v uuid.UUID) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCcCheckoutID(v)
	})
}

// UpdateCcCheckoutID sets the "cc_checkout_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCcCheckoutID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCcCheckoutID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderUpsertOne) SetCreatedAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateCreatedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetModifiedAt sets the "modified_at" field.
func (u *OrderUpsertOne) SetModifiedAt(v time.Time) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetModifiedAt(v)
	})
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateModifiedAt() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateModifiedAt()
	})
}

// SetPaymentReference sets the "payment_reference" field.
func (u *OrderUpsertOne) SetPaymentReference(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetPaymentReference(v)
	})
}

// UpdatePaymentReference sets the "payment_reference" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdatePaymentReference() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePaymentReference()
	})
}

// ClearPaymentReference clears the value of the "payment_reference" field.
func (u *OrderUpsertOne) ClearPaymentReference() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearPaymentReference()
	})
}

// SetPaymentWalletAddress sets the "payment_wallet_address" field.
func (u *OrderUpsertOne) SetPaymentWalletAddress(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetPaymentWalletAddress(v)
	})
}

// UpdatePaymentWalletAddress sets the "payment_wallet_address" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdatePaymentWalletAddress() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePaymentWalletAddress()
	})
}

// ClearPaymentWalletAddress clears the value of the "payment_wallet_address" field.
func (u *OrderUpsertOne) ClearPaymentWalletAddress() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearPaymentWalletAddress()
	})
}

// SetPaymentTransactionHash sets the "payment_transaction_hash" field.
func (u *OrderUpsertOne) SetPaymentTransactionHash(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetPaymentTransactionHash(v)
	})
}

// UpdatePaymentTransactionHash sets the "payment_transaction_hash" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdatePaymentTransactionHash() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePaymentTransactionHash()
	})
}

// ClearPaymentTransactionHash clears the value of the "payment_transaction_hash" field.
func (u *OrderUpsertOne) ClearPaymentTransactionHash() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearPaymentTransactionHash()
	})
}

// SetTokenID sets the "token_id" field.
func (u *OrderUpsertOne) SetTokenID(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetTokenID(v)
	})
}

// AddTokenID adds v to the "token_id" field.
func (u *OrderUpsertOne) AddTokenID(v int) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.AddTokenID(v)
	})
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateTokenID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTokenID()
	})
}

// ClearTokenID clears the value of the "token_id" field.
func (u *OrderUpsertOne) ClearTokenID() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearTokenID()
	})
}

// SetMintTransactionHash sets the "mint_transaction_hash" field.
func (u *OrderUpsertOne) SetMintTransactionHash(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetMintTransactionHash(v)
	})
}

// UpdateMintTransactionHash sets the "mint_transaction_hash" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateMintTransactionHash() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateMintTransactionHash()
	})
}

// ClearMintTransactionHash clears the value of the "mint_transaction_hash" field.
func (u *OrderUpsertOne) ClearMintTransactionHash() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearMintTransactionHash()
	})
}

// SetTransferTransactionHash sets the "transfer_transaction_hash" field.
func (u *OrderUpsertOne) SetTransferTransactionHash(v string) *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.SetTransferTransactionHash(v)
	})
}

// UpdateTransferTransactionHash sets the "transfer_transaction_hash" field to the value that was provided on create.
func (u *OrderUpsertOne) UpdateTransferTransactionHash() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTransferTransactionHash()
	})
}

// ClearTransferTransactionHash clears the value of the "transfer_transaction_hash" field.
func (u *OrderUpsertOne) ClearTransferTransactionHash() *OrderUpsertOne {
	return u.Update(func(s *OrderUpsert) {
		s.ClearTransferTransactionHash()
	})
}

// Exec executes the query.
func (u *OrderUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *OrderUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *OrderUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// OrderCreateBulk is the builder for creating many Order entities in bulk.
type OrderCreateBulk struct {
	config
	err      error
	builders []*OrderCreate
	conflict []sql.ConflictOption
}

// Save creates the Order entities in the database.
func (ocb *OrderCreateBulk) Save(ctx context.Context) ([]*Order, error) {
	if ocb.err != nil {
		return nil, ocb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ocb.builders))
	nodes := make([]*Order, len(ocb.builders))
	mutators := make([]Mutator, len(ocb.builders))
	for i := range ocb.builders {
		func(i int, root context.Context) {
			builder := ocb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrderMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ocb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ocb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ocb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ocb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ocb *OrderCreateBulk) SaveX(ctx context.Context) []*Order {
	v, err := ocb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ocb *OrderCreateBulk) Exec(ctx context.Context) error {
	_, err := ocb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ocb *OrderCreateBulk) ExecX(ctx context.Context) {
	if err := ocb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Order.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.OrderUpsert) {
//			SetTicketID(v+v).
//		}).
//		Exec(ctx)
func (ocb *OrderCreateBulk) OnConflict(opts ...sql.ConflictOption) *OrderUpsertBulk {
	ocb.conflict = opts
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ocb *OrderCreateBulk) OnConflictColumns(columns ...string) *OrderUpsertBulk {
	ocb.conflict = append(ocb.conflict, sql.ConflictColumns(columns...))
	return &OrderUpsertBulk{
		create: ocb,
	}
}

// OrderUpsertBulk is the builder for "upsert"-ing
// a bulk of Order nodes.
type OrderUpsertBulk struct {
	create *OrderCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *OrderUpsertBulk) UpdateNewValues() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Order.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *OrderUpsertBulk) Ignore() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *OrderUpsertBulk) DoNothing() *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the OrderCreateBulk.OnConflict
// documentation for more info.
func (u *OrderUpsertBulk) Update(set func(*OrderUpsert)) *OrderUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&OrderUpsert{UpdateSet: update})
	}))
	return u
}

// SetTicketID sets the "ticket_id" field.
func (u *OrderUpsertBulk) SetTicketID(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetTicketID(v)
	})
}

// UpdateTicketID sets the "ticket_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateTicketID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTicketID()
	})
}

// SetEventID sets the "event_id" field.
func (u *OrderUpsertBulk) SetEventID(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateEventID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateEventID()
	})
}

// SetWalletAddress sets the "wallet_address" field.
func (u *OrderUpsertBulk) SetWalletAddress(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetWalletAddress(v)
	})
}

// UpdateWalletAddress sets the "wallet_address" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateWalletAddress() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateWalletAddress()
	})
}

// SetPriceInCents sets the "price_in_cents" field.
func (u *OrderUpsertBulk) SetPriceInCents(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetPriceInCents(v)
	})
}

// AddPriceInCents adds v to the "price_in_cents" field.
func (u *OrderUpsertBulk) AddPriceInCents(v int64) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddPriceInCents(v)
	})
}

// UpdatePriceInCents sets the "price_in_cents" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdatePriceInCents() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePriceInCents()
	})
}

// SetCcCheckoutID sets the "cc_checkout_id" field.
func (u *OrderUpsertBulk) SetCcCheckoutID(v uuid.UUID) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCcCheckoutID(v)
	})
}

// UpdateCcCheckoutID sets the "cc_checkout_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCcCheckoutID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCcCheckoutID()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *OrderUpsertBulk) SetCreatedAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateCreatedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetModifiedAt sets the "modified_at" field.
func (u *OrderUpsertBulk) SetModifiedAt(v time.Time) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetModifiedAt(v)
	})
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateModifiedAt() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateModifiedAt()
	})
}

// SetPaymentReference sets the "payment_reference" field.
func (u *OrderUpsertBulk) SetPaymentReference(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetPaymentReference(v)
	})
}

// UpdatePaymentReference sets the "payment_reference" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdatePaymentReference() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePaymentReference()
	})
}

// ClearPaymentReference clears the value of the "payment_reference" field.
func (u *OrderUpsertBulk) ClearPaymentReference() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearPaymentReference()
	})
}

// SetPaymentWalletAddress sets the "payment_wallet_address" field.
func (u *OrderUpsertBulk) SetPaymentWalletAddress(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetPaymentWalletAddress(v)
	})
}

// UpdatePaymentWalletAddress sets the "payment_wallet_address" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdatePaymentWalletAddress() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePaymentWalletAddress()
	})
}

// ClearPaymentWalletAddress clears the value of the "payment_wallet_address" field.
func (u *OrderUpsertBulk) ClearPaymentWalletAddress() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearPaymentWalletAddress()
	})
}

// SetPaymentTransactionHash sets the "payment_transaction_hash" field.
func (u *OrderUpsertBulk) SetPaymentTransactionHash(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetPaymentTransactionHash(v)
	})
}

// UpdatePaymentTransactionHash sets the "payment_transaction_hash" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdatePaymentTransactionHash() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdatePaymentTransactionHash()
	})
}

// ClearPaymentTransactionHash clears the value of the "payment_transaction_hash" field.
func (u *OrderUpsertBulk) ClearPaymentTransactionHash() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearPaymentTransactionHash()
	})
}

// SetTokenID sets the "token_id" field.
func (u *OrderUpsertBulk) SetTokenID(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetTokenID(v)
	})
}

// AddTokenID adds v to the "token_id" field.
func (u *OrderUpsertBulk) AddTokenID(v int) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.AddTokenID(v)
	})
}

// UpdateTokenID sets the "token_id" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateTokenID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTokenID()
	})
}

// ClearTokenID clears the value of the "token_id" field.
func (u *OrderUpsertBulk) ClearTokenID() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearTokenID()
	})
}

// SetMintTransactionHash sets the "mint_transaction_hash" field.
func (u *OrderUpsertBulk) SetMintTransactionHash(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetMintTransactionHash(v)
	})
}

// UpdateMintTransactionHash sets the "mint_transaction_hash" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateMintTransactionHash() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateMintTransactionHash()
	})
}

// ClearMintTransactionHash clears the value of the "mint_transaction_hash" field.
func (u *OrderUpsertBulk) ClearMintTransactionHash() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearMintTransactionHash()
	})
}

// SetTransferTransactionHash sets the "transfer_transaction_hash" field.
func (u *OrderUpsertBulk) SetTransferTransactionHash(v string) *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.SetTransferTransactionHash(v)
	})
}

// UpdateTransferTransactionHash sets the "transfer_transaction_hash" field to the value that was provided on create.
func (u *OrderUpsertBulk) UpdateTransferTransactionHash() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.UpdateTransferTransactionHash()
	})
}

// ClearTransferTransactionHash clears the value of the "transfer_transaction_hash" field.
func (u *OrderUpsertBulk) ClearTransferTransactionHash() *OrderUpsertBulk {
	return u.Update(func(s *OrderUpsert) {
		s.ClearTransferTransactionHash()
	})
}

// Exec executes the query.
func (u *OrderUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the OrderCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for OrderCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *OrderUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
