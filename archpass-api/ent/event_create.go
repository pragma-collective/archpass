// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/garguelles/archpass/ent/attendee"
	"github.com/garguelles/archpass/ent/event"
	"github.com/garguelles/archpass/ent/ticket"
	"github.com/garguelles/archpass/ent/user"
)

// EventCreate is the builder for creating a Event entity.
type EventCreate struct {
	config
	mutation *EventMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (ec *EventCreate) SetName(s string) *EventCreate {
	ec.mutation.SetName(s)
	return ec
}

// SetDescription sets the "description" field.
func (ec *EventCreate) SetDescription(s string) *EventCreate {
	ec.mutation.SetDescription(s)
	return ec
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ec *EventCreate) SetNillableDescription(s *string) *EventCreate {
	if s != nil {
		ec.SetDescription(*s)
	}
	return ec
}

// SetEventSlug sets the "event_slug" field.
func (ec *EventCreate) SetEventSlug(s string) *EventCreate {
	ec.mutation.SetEventSlug(s)
	return ec
}

// SetStartDate sets the "start_date" field.
func (ec *EventCreate) SetStartDate(t time.Time) *EventCreate {
	ec.mutation.SetStartDate(t)
	return ec
}

// SetNillableStartDate sets the "start_date" field if the given value is not nil.
func (ec *EventCreate) SetNillableStartDate(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetStartDate(*t)
	}
	return ec
}

// SetEndDate sets the "end_date" field.
func (ec *EventCreate) SetEndDate(t time.Time) *EventCreate {
	ec.mutation.SetEndDate(t)
	return ec
}

// SetNillableEndDate sets the "end_date" field if the given value is not nil.
func (ec *EventCreate) SetNillableEndDate(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetEndDate(*t)
	}
	return ec
}

// SetDate sets the "date" field.
func (ec *EventCreate) SetDate(s string) *EventCreate {
	ec.mutation.SetDate(s)
	return ec
}

// SetNillableDate sets the "date" field if the given value is not nil.
func (ec *EventCreate) SetNillableDate(s *string) *EventCreate {
	if s != nil {
		ec.SetDate(*s)
	}
	return ec
}

// SetLocation sets the "location" field.
func (ec *EventCreate) SetLocation(s string) *EventCreate {
	ec.mutation.SetLocation(s)
	return ec
}

// SetImageURL sets the "image_url" field.
func (ec *EventCreate) SetImageURL(s string) *EventCreate {
	ec.mutation.SetImageURL(s)
	return ec
}

// SetUserID sets the "user_id" field.
func (ec *EventCreate) SetUserID(i int) *EventCreate {
	ec.mutation.SetUserID(i)
	return ec
}

// SetEventHash sets the "event_hash" field.
func (ec *EventCreate) SetEventHash(s string) *EventCreate {
	ec.mutation.SetEventHash(s)
	return ec
}

// SetNillableEventHash sets the "event_hash" field if the given value is not nil.
func (ec *EventCreate) SetNillableEventHash(s *string) *EventCreate {
	if s != nil {
		ec.SetEventHash(*s)
	}
	return ec
}

// SetContractAddress sets the "contract_address" field.
func (ec *EventCreate) SetContractAddress(s string) *EventCreate {
	ec.mutation.SetContractAddress(s)
	return ec
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (ec *EventCreate) SetNillableContractAddress(s *string) *EventCreate {
	if s != nil {
		ec.SetContractAddress(*s)
	}
	return ec
}

// SetTransactionHash sets the "transaction_hash" field.
func (ec *EventCreate) SetTransactionHash(s string) *EventCreate {
	ec.mutation.SetTransactionHash(s)
	return ec
}

// SetNillableTransactionHash sets the "transaction_hash" field if the given value is not nil.
func (ec *EventCreate) SetNillableTransactionHash(s *string) *EventCreate {
	if s != nil {
		ec.SetTransactionHash(*s)
	}
	return ec
}

// SetBlockNumber sets the "block_number" field.
func (ec *EventCreate) SetBlockNumber(s string) *EventCreate {
	ec.mutation.SetBlockNumber(s)
	return ec
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (ec *EventCreate) SetNillableBlockNumber(s *string) *EventCreate {
	if s != nil {
		ec.SetBlockNumber(*s)
	}
	return ec
}

// SetCreatedAt sets the "created_at" field.
func (ec *EventCreate) SetCreatedAt(t time.Time) *EventCreate {
	ec.mutation.SetCreatedAt(t)
	return ec
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableCreatedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetCreatedAt(*t)
	}
	return ec
}

// SetModifiedAt sets the "modified_at" field.
func (ec *EventCreate) SetModifiedAt(t time.Time) *EventCreate {
	ec.mutation.SetModifiedAt(t)
	return ec
}

// SetNillableModifiedAt sets the "modified_at" field if the given value is not nil.
func (ec *EventCreate) SetNillableModifiedAt(t *time.Time) *EventCreate {
	if t != nil {
		ec.SetModifiedAt(*t)
	}
	return ec
}

// SetUser sets the "user" edge to the User entity.
func (ec *EventCreate) SetUser(u *User) *EventCreate {
	return ec.SetUserID(u.ID)
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by IDs.
func (ec *EventCreate) AddTicketIDs(ids ...int) *EventCreate {
	ec.mutation.AddTicketIDs(ids...)
	return ec
}

// AddTickets adds the "tickets" edges to the Ticket entity.
func (ec *EventCreate) AddTickets(t ...*Ticket) *EventCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ec.AddTicketIDs(ids...)
}

// AddAttendeeIDs adds the "attendees" edge to the Attendee entity by IDs.
func (ec *EventCreate) AddAttendeeIDs(ids ...int) *EventCreate {
	ec.mutation.AddAttendeeIDs(ids...)
	return ec
}

// AddAttendees adds the "attendees" edges to the Attendee entity.
func (ec *EventCreate) AddAttendees(a ...*Attendee) *EventCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ec.AddAttendeeIDs(ids...)
}

// Mutation returns the EventMutation object of the builder.
func (ec *EventCreate) Mutation() *EventMutation {
	return ec.mutation
}

// Save creates the Event in the database.
func (ec *EventCreate) Save(ctx context.Context) (*Event, error) {
	ec.defaults()
	return withHooks(ctx, ec.sqlSave, ec.mutation, ec.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ec *EventCreate) SaveX(ctx context.Context) *Event {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *EventCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *EventCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *EventCreate) defaults() {
	if _, ok := ec.mutation.CreatedAt(); !ok {
		v := event.DefaultCreatedAt()
		ec.mutation.SetCreatedAt(v)
	}
	if _, ok := ec.mutation.ModifiedAt(); !ok {
		v := event.DefaultModifiedAt()
		ec.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *EventCreate) check() error {
	if _, ok := ec.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Event.name"`)}
	}
	if v, ok := ec.mutation.Name(); ok {
		if err := event.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Event.name": %w`, err)}
		}
	}
	if _, ok := ec.mutation.EventSlug(); !ok {
		return &ValidationError{Name: "event_slug", err: errors.New(`ent: missing required field "Event.event_slug"`)}
	}
	if v, ok := ec.mutation.EventSlug(); ok {
		if err := event.EventSlugValidator(v); err != nil {
			return &ValidationError{Name: "event_slug", err: fmt.Errorf(`ent: validator failed for field "Event.event_slug": %w`, err)}
		}
	}
	if _, ok := ec.mutation.Location(); !ok {
		return &ValidationError{Name: "location", err: errors.New(`ent: missing required field "Event.location"`)}
	}
	if _, ok := ec.mutation.ImageURL(); !ok {
		return &ValidationError{Name: "image_url", err: errors.New(`ent: missing required field "Event.image_url"`)}
	}
	if _, ok := ec.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Event.user_id"`)}
	}
	if _, ok := ec.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Event.created_at"`)}
	}
	if _, ok := ec.mutation.ModifiedAt(); !ok {
		return &ValidationError{Name: "modified_at", err: errors.New(`ent: missing required field "Event.modified_at"`)}
	}
	if len(ec.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "Event.user"`)}
	}
	return nil
}

func (ec *EventCreate) sqlSave(ctx context.Context) (*Event, error) {
	if err := ec.check(); err != nil {
		return nil, err
	}
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ec.mutation.id = &_node.ID
	ec.mutation.done = true
	return _node, nil
}

func (ec *EventCreate) createSpec() (*Event, *sqlgraph.CreateSpec) {
	var (
		_node = &Event{config: ec.config}
		_spec = sqlgraph.NewCreateSpec(event.Table, sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ec.conflict
	if value, ok := ec.mutation.Name(); ok {
		_spec.SetField(event.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := ec.mutation.Description(); ok {
		_spec.SetField(event.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := ec.mutation.EventSlug(); ok {
		_spec.SetField(event.FieldEventSlug, field.TypeString, value)
		_node.EventSlug = value
	}
	if value, ok := ec.mutation.StartDate(); ok {
		_spec.SetField(event.FieldStartDate, field.TypeTime, value)
		_node.StartDate = value
	}
	if value, ok := ec.mutation.EndDate(); ok {
		_spec.SetField(event.FieldEndDate, field.TypeTime, value)
		_node.EndDate = value
	}
	if value, ok := ec.mutation.Date(); ok {
		_spec.SetField(event.FieldDate, field.TypeString, value)
		_node.Date = value
	}
	if value, ok := ec.mutation.Location(); ok {
		_spec.SetField(event.FieldLocation, field.TypeString, value)
		_node.Location = value
	}
	if value, ok := ec.mutation.ImageURL(); ok {
		_spec.SetField(event.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := ec.mutation.EventHash(); ok {
		_spec.SetField(event.FieldEventHash, field.TypeString, value)
		_node.EventHash = value
	}
	if value, ok := ec.mutation.ContractAddress(); ok {
		_spec.SetField(event.FieldContractAddress, field.TypeString, value)
		_node.ContractAddress = value
	}
	if value, ok := ec.mutation.TransactionHash(); ok {
		_spec.SetField(event.FieldTransactionHash, field.TypeString, value)
		_node.TransactionHash = value
	}
	if value, ok := ec.mutation.BlockNumber(); ok {
		_spec.SetField(event.FieldBlockNumber, field.TypeString, value)
		_node.BlockNumber = value
	}
	if value, ok := ec.mutation.CreatedAt(); ok {
		_spec.SetField(event.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ec.mutation.ModifiedAt(); ok {
		_spec.SetField(event.FieldModifiedAt, field.TypeTime, value)
		_node.ModifiedAt = value
	}
	if nodes := ec.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   event.UserTable,
			Columns: []string{event.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.TicketsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.TicketsTable,
			Columns: []string{event.TicketsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ec.mutation.AttendeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   event.AttendeesTable,
			Columns: []string{event.AttendeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ec *EventCreate) OnConflict(opts ...sql.ConflictOption) *EventUpsertOne {
	ec.conflict = opts
	return &EventUpsertOne{
		create: ec,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ec *EventCreate) OnConflictColumns(columns ...string) *EventUpsertOne {
	ec.conflict = append(ec.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertOne{
		create: ec,
	}
}

type (
	// EventUpsertOne is the builder for "upsert"-ing
	//  one Event node.
	EventUpsertOne struct {
		create *EventCreate
	}

	// EventUpsert is the "OnConflict" setter.
	EventUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *EventUpsert) SetName(v string) *EventUpsert {
	u.Set(event.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventUpsert) UpdateName() *EventUpsert {
	u.SetExcluded(event.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *EventUpsert) SetDescription(v string) *EventUpsert {
	u.Set(event.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsert) UpdateDescription() *EventUpsert {
	u.SetExcluded(event.FieldDescription)
	return u
}

// ClearDescription clears the value of the "description" field.
func (u *EventUpsert) ClearDescription() *EventUpsert {
	u.SetNull(event.FieldDescription)
	return u
}

// SetEventSlug sets the "event_slug" field.
func (u *EventUpsert) SetEventSlug(v string) *EventUpsert {
	u.Set(event.FieldEventSlug, v)
	return u
}

// UpdateEventSlug sets the "event_slug" field to the value that was provided on create.
func (u *EventUpsert) UpdateEventSlug() *EventUpsert {
	u.SetExcluded(event.FieldEventSlug)
	return u
}

// SetStartDate sets the "start_date" field.
func (u *EventUpsert) SetStartDate(v time.Time) *EventUpsert {
	u.Set(event.FieldStartDate, v)
	return u
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *EventUpsert) UpdateStartDate() *EventUpsert {
	u.SetExcluded(event.FieldStartDate)
	return u
}

// ClearStartDate clears the value of the "start_date" field.
func (u *EventUpsert) ClearStartDate() *EventUpsert {
	u.SetNull(event.FieldStartDate)
	return u
}

// SetEndDate sets the "end_date" field.
func (u *EventUpsert) SetEndDate(v time.Time) *EventUpsert {
	u.Set(event.FieldEndDate, v)
	return u
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *EventUpsert) UpdateEndDate() *EventUpsert {
	u.SetExcluded(event.FieldEndDate)
	return u
}

// ClearEndDate clears the value of the "end_date" field.
func (u *EventUpsert) ClearEndDate() *EventUpsert {
	u.SetNull(event.FieldEndDate)
	return u
}

// SetDate sets the "date" field.
func (u *EventUpsert) SetDate(v string) *EventUpsert {
	u.Set(event.FieldDate, v)
	return u
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *EventUpsert) UpdateDate() *EventUpsert {
	u.SetExcluded(event.FieldDate)
	return u
}

// ClearDate clears the value of the "date" field.
func (u *EventUpsert) ClearDate() *EventUpsert {
	u.SetNull(event.FieldDate)
	return u
}

// SetLocation sets the "location" field.
func (u *EventUpsert) SetLocation(v string) *EventUpsert {
	u.Set(event.FieldLocation, v)
	return u
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *EventUpsert) UpdateLocation() *EventUpsert {
	u.SetExcluded(event.FieldLocation)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *EventUpsert) SetImageURL(v string) *EventUpsert {
	u.Set(event.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *EventUpsert) UpdateImageURL() *EventUpsert {
	u.SetExcluded(event.FieldImageURL)
	return u
}

// SetUserID sets the "user_id" field.
func (u *EventUpsert) SetUserID(v int) *EventUpsert {
	u.Set(event.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *EventUpsert) UpdateUserID() *EventUpsert {
	u.SetExcluded(event.FieldUserID)
	return u
}

// SetEventHash sets the "event_hash" field.
func (u *EventUpsert) SetEventHash(v string) *EventUpsert {
	u.Set(event.FieldEventHash, v)
	return u
}

// UpdateEventHash sets the "event_hash" field to the value that was provided on create.
func (u *EventUpsert) UpdateEventHash() *EventUpsert {
	u.SetExcluded(event.FieldEventHash)
	return u
}

// ClearEventHash clears the value of the "event_hash" field.
func (u *EventUpsert) ClearEventHash() *EventUpsert {
	u.SetNull(event.FieldEventHash)
	return u
}

// SetContractAddress sets the "contract_address" field.
func (u *EventUpsert) SetContractAddress(v string) *EventUpsert {
	u.Set(event.FieldContractAddress, v)
	return u
}

// UpdateContractAddress sets the "contract_address" field to the value that was provided on create.
func (u *EventUpsert) UpdateContractAddress() *EventUpsert {
	u.SetExcluded(event.FieldContractAddress)
	return u
}

// ClearContractAddress clears the value of the "contract_address" field.
func (u *EventUpsert) ClearContractAddress() *EventUpsert {
	u.SetNull(event.FieldContractAddress)
	return u
}

// SetTransactionHash sets the "transaction_hash" field.
func (u *EventUpsert) SetTransactionHash(v string) *EventUpsert {
	u.Set(event.FieldTransactionHash, v)
	return u
}

// UpdateTransactionHash sets the "transaction_hash" field to the value that was provided on create.
func (u *EventUpsert) UpdateTransactionHash() *EventUpsert {
	u.SetExcluded(event.FieldTransactionHash)
	return u
}

// ClearTransactionHash clears the value of the "transaction_hash" field.
func (u *EventUpsert) ClearTransactionHash() *EventUpsert {
	u.SetNull(event.FieldTransactionHash)
	return u
}

// SetBlockNumber sets the "block_number" field.
func (u *EventUpsert) SetBlockNumber(v string) *EventUpsert {
	u.Set(event.FieldBlockNumber, v)
	return u
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *EventUpsert) UpdateBlockNumber() *EventUpsert {
	u.SetExcluded(event.FieldBlockNumber)
	return u
}

// ClearBlockNumber clears the value of the "block_number" field.
func (u *EventUpsert) ClearBlockNumber() *EventUpsert {
	u.SetNull(event.FieldBlockNumber)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *EventUpsert) SetCreatedAt(v time.Time) *EventUpsert {
	u.Set(event.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventUpsert) UpdateCreatedAt() *EventUpsert {
	u.SetExcluded(event.FieldCreatedAt)
	return u
}

// SetModifiedAt sets the "modified_at" field.
func (u *EventUpsert) SetModifiedAt(v time.Time) *EventUpsert {
	u.Set(event.FieldModifiedAt, v)
	return u
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *EventUpsert) UpdateModifiedAt() *EventUpsert {
	u.SetExcluded(event.FieldModifiedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventUpsertOne) UpdateNewValues() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *EventUpsertOne) Ignore() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertOne) DoNothing() *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreate.OnConflict
// documentation for more info.
func (u *EventUpsertOne) Update(set func(*EventUpsert)) *EventUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *EventUpsertOne) SetName(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateName() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *EventUpsertOne) SetDescription(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateDescription() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *EventUpsertOne) ClearDescription() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearDescription()
	})
}

// SetEventSlug sets the "event_slug" field.
func (u *EventUpsertOne) SetEventSlug(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetEventSlug(v)
	})
}

// UpdateEventSlug sets the "event_slug" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateEventSlug() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventSlug()
	})
}

// SetStartDate sets the "start_date" field.
func (u *EventUpsertOne) SetStartDate(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateStartDate() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *EventUpsertOne) ClearStartDate() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *EventUpsertOne) SetEndDate(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateEndDate() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *EventUpsertOne) ClearEndDate() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearEndDate()
	})
}

// SetDate sets the "date" field.
func (u *EventUpsertOne) SetDate(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateDate() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDate()
	})
}

// ClearDate clears the value of the "date" field.
func (u *EventUpsertOne) ClearDate() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearDate()
	})
}

// SetLocation sets the "location" field.
func (u *EventUpsertOne) SetLocation(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateLocation() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocation()
	})
}

// SetImageURL sets the "image_url" field.
func (u *EventUpsertOne) SetImageURL(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateImageURL() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateImageURL()
	})
}

// SetUserID sets the "user_id" field.
func (u *EventUpsertOne) SetUserID(v int) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateUserID() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateUserID()
	})
}

// SetEventHash sets the "event_hash" field.
func (u *EventUpsertOne) SetEventHash(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetEventHash(v)
	})
}

// UpdateEventHash sets the "event_hash" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateEventHash() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventHash()
	})
}

// ClearEventHash clears the value of the "event_hash" field.
func (u *EventUpsertOne) ClearEventHash() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearEventHash()
	})
}

// SetContractAddress sets the "contract_address" field.
func (u *EventUpsertOne) SetContractAddress(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetContractAddress(v)
	})
}

// UpdateContractAddress sets the "contract_address" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateContractAddress() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateContractAddress()
	})
}

// ClearContractAddress clears the value of the "contract_address" field.
func (u *EventUpsertOne) ClearContractAddress() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearContractAddress()
	})
}

// SetTransactionHash sets the "transaction_hash" field.
func (u *EventUpsertOne) SetTransactionHash(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetTransactionHash(v)
	})
}

// UpdateTransactionHash sets the "transaction_hash" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateTransactionHash() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateTransactionHash()
	})
}

// ClearTransactionHash clears the value of the "transaction_hash" field.
func (u *EventUpsertOne) ClearTransactionHash() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearTransactionHash()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *EventUpsertOne) SetBlockNumber(v string) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateBlockNumber() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateBlockNumber()
	})
}

// ClearBlockNumber clears the value of the "block_number" field.
func (u *EventUpsertOne) ClearBlockNumber() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.ClearBlockNumber()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *EventUpsertOne) SetCreatedAt(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateCreatedAt() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetModifiedAt sets the "modified_at" field.
func (u *EventUpsertOne) SetModifiedAt(v time.Time) *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.SetModifiedAt(v)
	})
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *EventUpsertOne) UpdateModifiedAt() *EventUpsertOne {
	return u.Update(func(s *EventUpsert) {
		s.UpdateModifiedAt()
	})
}

// Exec executes the query.
func (u *EventUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *EventUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *EventUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// EventCreateBulk is the builder for creating many Event entities in bulk.
type EventCreateBulk struct {
	config
	err      error
	builders []*EventCreate
	conflict []sql.ConflictOption
}

// Save creates the Event entities in the database.
func (ecb *EventCreateBulk) Save(ctx context.Context) ([]*Event, error) {
	if ecb.err != nil {
		return nil, ecb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Event, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EventMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = ecb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *EventCreateBulk) SaveX(ctx context.Context) []*Event {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *EventCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *EventCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Event.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.EventUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (ecb *EventCreateBulk) OnConflict(opts ...sql.ConflictOption) *EventUpsertBulk {
	ecb.conflict = opts
	return &EventUpsertBulk{
		create: ecb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ecb *EventCreateBulk) OnConflictColumns(columns ...string) *EventUpsertBulk {
	ecb.conflict = append(ecb.conflict, sql.ConflictColumns(columns...))
	return &EventUpsertBulk{
		create: ecb,
	}
}

// EventUpsertBulk is the builder for "upsert"-ing
// a bulk of Event nodes.
type EventUpsertBulk struct {
	create *EventCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *EventUpsertBulk) UpdateNewValues() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Event.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *EventUpsertBulk) Ignore() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *EventUpsertBulk) DoNothing() *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the EventCreateBulk.OnConflict
// documentation for more info.
func (u *EventUpsertBulk) Update(set func(*EventUpsert)) *EventUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&EventUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *EventUpsertBulk) SetName(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateName() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *EventUpsertBulk) SetDescription(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateDescription() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDescription()
	})
}

// ClearDescription clears the value of the "description" field.
func (u *EventUpsertBulk) ClearDescription() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearDescription()
	})
}

// SetEventSlug sets the "event_slug" field.
func (u *EventUpsertBulk) SetEventSlug(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetEventSlug(v)
	})
}

// UpdateEventSlug sets the "event_slug" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateEventSlug() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventSlug()
	})
}

// SetStartDate sets the "start_date" field.
func (u *EventUpsertBulk) SetStartDate(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetStartDate(v)
	})
}

// UpdateStartDate sets the "start_date" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateStartDate() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateStartDate()
	})
}

// ClearStartDate clears the value of the "start_date" field.
func (u *EventUpsertBulk) ClearStartDate() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearStartDate()
	})
}

// SetEndDate sets the "end_date" field.
func (u *EventUpsertBulk) SetEndDate(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetEndDate(v)
	})
}

// UpdateEndDate sets the "end_date" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateEndDate() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEndDate()
	})
}

// ClearEndDate clears the value of the "end_date" field.
func (u *EventUpsertBulk) ClearEndDate() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearEndDate()
	})
}

// SetDate sets the "date" field.
func (u *EventUpsertBulk) SetDate(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetDate(v)
	})
}

// UpdateDate sets the "date" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateDate() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateDate()
	})
}

// ClearDate clears the value of the "date" field.
func (u *EventUpsertBulk) ClearDate() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearDate()
	})
}

// SetLocation sets the "location" field.
func (u *EventUpsertBulk) SetLocation(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetLocation(v)
	})
}

// UpdateLocation sets the "location" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateLocation() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateLocation()
	})
}

// SetImageURL sets the "image_url" field.
func (u *EventUpsertBulk) SetImageURL(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateImageURL() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateImageURL()
	})
}

// SetUserID sets the "user_id" field.
func (u *EventUpsertBulk) SetUserID(v int) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateUserID() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateUserID()
	})
}

// SetEventHash sets the "event_hash" field.
func (u *EventUpsertBulk) SetEventHash(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetEventHash(v)
	})
}

// UpdateEventHash sets the "event_hash" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateEventHash() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateEventHash()
	})
}

// ClearEventHash clears the value of the "event_hash" field.
func (u *EventUpsertBulk) ClearEventHash() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearEventHash()
	})
}

// SetContractAddress sets the "contract_address" field.
func (u *EventUpsertBulk) SetContractAddress(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetContractAddress(v)
	})
}

// UpdateContractAddress sets the "contract_address" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateContractAddress() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateContractAddress()
	})
}

// ClearContractAddress clears the value of the "contract_address" field.
func (u *EventUpsertBulk) ClearContractAddress() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearContractAddress()
	})
}

// SetTransactionHash sets the "transaction_hash" field.
func (u *EventUpsertBulk) SetTransactionHash(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetTransactionHash(v)
	})
}

// UpdateTransactionHash sets the "transaction_hash" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateTransactionHash() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateTransactionHash()
	})
}

// ClearTransactionHash clears the value of the "transaction_hash" field.
func (u *EventUpsertBulk) ClearTransactionHash() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearTransactionHash()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *EventUpsertBulk) SetBlockNumber(v string) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateBlockNumber() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateBlockNumber()
	})
}

// ClearBlockNumber clears the value of the "block_number" field.
func (u *EventUpsertBulk) ClearBlockNumber() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.ClearBlockNumber()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *EventUpsertBulk) SetCreatedAt(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateCreatedAt() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetModifiedAt sets the "modified_at" field.
func (u *EventUpsertBulk) SetModifiedAt(v time.Time) *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.SetModifiedAt(v)
	})
}

// UpdateModifiedAt sets the "modified_at" field to the value that was provided on create.
func (u *EventUpsertBulk) UpdateModifiedAt() *EventUpsertBulk {
	return u.Update(func(s *EventUpsert) {
		s.UpdateModifiedAt()
	})
}

// Exec executes the query.
func (u *EventUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the EventCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for EventCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *EventUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
