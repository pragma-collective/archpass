// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// AttendeesColumns holds the columns for the "attendees" table.
	AttendeesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "token_id", Type: field.TypeInt},
		{Name: "transaction_hash", Type: field.TypeString},
		{Name: "block_number", Type: field.TypeInt64},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "event_id", Type: field.TypeInt},
		{Name: "ticket_id", Type: field.TypeInt, Unique: true},
		{Name: "user_id", Type: field.TypeInt},
	}
	// AttendeesTable holds the schema information for the "attendees" table.
	AttendeesTable = &schema.Table{
		Name:       "attendees",
		Columns:    AttendeesColumns,
		PrimaryKey: []*schema.Column{AttendeesColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "attendees_events_attendees",
				Columns:    []*schema.Column{AttendeesColumns[5]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "attendees_tickets_attendees",
				Columns:    []*schema.Column{AttendeesColumns[6]},
				RefColumns: []*schema.Column{TicketsColumns[0]},
				OnDelete:   schema.NoAction,
			},
			{
				Symbol:     "attendees_users_attendee_tickets",
				Columns:    []*schema.Column{AttendeesColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "attendee_token_id_ticket_id_user_id",
				Unique:  true,
				Columns: []*schema.Column{AttendeesColumns[1], AttendeesColumns[6], AttendeesColumns[7]},
			},
		},
	}
	// EventsColumns holds the columns for the "events" table.
	EventsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "description", Type: field.TypeString, Nullable: true},
		{Name: "event_slug", Type: field.TypeString, Unique: true},
		{Name: "start_date", Type: field.TypeTime, Nullable: true},
		{Name: "end_date", Type: field.TypeTime, Nullable: true},
		{Name: "date", Type: field.TypeString, Nullable: true},
		{Name: "location", Type: field.TypeString, Size: 2147483647},
		{Name: "image_url", Type: field.TypeString},
		{Name: "event_hash", Type: field.TypeString, Nullable: true},
		{Name: "contract_address", Type: field.TypeString, Nullable: true},
		{Name: "transaction_hash", Type: field.TypeString, Nullable: true},
		{Name: "block_number", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "modified_at", Type: field.TypeTime},
		{Name: "user_id", Type: field.TypeInt},
	}
	// EventsTable holds the schema information for the "events" table.
	EventsTable = &schema.Table{
		Name:       "events",
		Columns:    EventsColumns,
		PrimaryKey: []*schema.Column{EventsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "events_users_events",
				Columns:    []*schema.Column{EventsColumns[15]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TicketsColumns holds the columns for the "tickets" table.
	TicketsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "description", Type: field.TypeString},
		{Name: "ticket_slug", Type: field.TypeString, Unique: true},
		{Name: "mint_price", Type: field.TypeString},
		{Name: "quantity", Type: field.TypeInt},
		{Name: "ticket_hash", Type: field.TypeString, Nullable: true},
		{Name: "image_url", Type: field.TypeString, Nullable: true},
		{Name: "contract_address", Type: field.TypeString, Nullable: true},
		{Name: "transaction_hash", Type: field.TypeString, Nullable: true},
		{Name: "block_number", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "event_id", Type: field.TypeInt},
	}
	// TicketsTable holds the schema information for the "tickets" table.
	TicketsTable = &schema.Table{
		Name:       "tickets",
		Columns:    TicketsColumns,
		PrimaryKey: []*schema.Column{TicketsColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "tickets_events_tickets",
				Columns:    []*schema.Column{TicketsColumns[13]},
				RefColumns: []*schema.Column{EventsColumns[0]},
				OnDelete:   schema.NoAction,
			},
		},
	}
	// TransactionsColumns holds the columns for the "transactions" table.
	TransactionsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "event_type", Type: field.TypeString},
		{Name: "wallet_address", Type: field.TypeString},
		{Name: "transaction_hash", Type: field.TypeString},
		{Name: "block_number", Type: field.TypeInt64},
	}
	// TransactionsTable holds the schema information for the "transactions" table.
	TransactionsTable = &schema.Table{
		Name:       "transactions",
		Columns:    TransactionsColumns,
		PrimaryKey: []*schema.Column{TransactionsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "transaction_event_type_wallet_address_transaction_hash",
				Unique:  true,
				Columns: []*schema.Column{TransactionsColumns[1], TransactionsColumns[2], TransactionsColumns[3]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "wallet_address", Type: field.TypeString, Unique: true},
		{Name: "bio", Type: field.TypeString},
		{Name: "display_name", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		AttendeesTable,
		EventsTable,
		TicketsTable,
		TransactionsTable,
		UsersTable,
	}
)

func init() {
	AttendeesTable.ForeignKeys[0].RefTable = EventsTable
	AttendeesTable.ForeignKeys[1].RefTable = TicketsTable
	AttendeesTable.ForeignKeys[2].RefTable = UsersTable
	EventsTable.ForeignKeys[0].RefTable = UsersTable
	TicketsTable.ForeignKeys[0].RefTable = EventsTable
}
