// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/garguelles/archpass/ent/attendee"
	"github.com/garguelles/archpass/ent/event"
	"github.com/garguelles/archpass/ent/predicate"
	"github.com/garguelles/archpass/ent/ticket"
)

// TicketUpdate is the builder for updating Ticket entities.
type TicketUpdate struct {
	config
	hooks    []Hook
	mutation *TicketMutation
}

// Where appends a list predicates to the TicketUpdate builder.
func (tu *TicketUpdate) Where(ps ...predicate.Ticket) *TicketUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TicketUpdate) SetName(s string) *TicketUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableName(s *string) *TicketUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TicketUpdate) SetDescription(s string) *TicketUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableDescription(s *string) *TicketUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetTicketSlug sets the "ticket_slug" field.
func (tu *TicketUpdate) SetTicketSlug(s string) *TicketUpdate {
	tu.mutation.SetTicketSlug(s)
	return tu
}

// SetNillableTicketSlug sets the "ticket_slug" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableTicketSlug(s *string) *TicketUpdate {
	if s != nil {
		tu.SetTicketSlug(*s)
	}
	return tu
}

// SetMintPrice sets the "mint_price" field.
func (tu *TicketUpdate) SetMintPrice(s string) *TicketUpdate {
	tu.mutation.SetMintPrice(s)
	return tu
}

// SetNillableMintPrice sets the "mint_price" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableMintPrice(s *string) *TicketUpdate {
	if s != nil {
		tu.SetMintPrice(*s)
	}
	return tu
}

// SetQuantity sets the "quantity" field.
func (tu *TicketUpdate) SetQuantity(i int) *TicketUpdate {
	tu.mutation.ResetQuantity()
	tu.mutation.SetQuantity(i)
	return tu
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableQuantity(i *int) *TicketUpdate {
	if i != nil {
		tu.SetQuantity(*i)
	}
	return tu
}

// AddQuantity adds i to the "quantity" field.
func (tu *TicketUpdate) AddQuantity(i int) *TicketUpdate {
	tu.mutation.AddQuantity(i)
	return tu
}

// SetEventID sets the "event_id" field.
func (tu *TicketUpdate) SetEventID(i int) *TicketUpdate {
	tu.mutation.SetEventID(i)
	return tu
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableEventID(i *int) *TicketUpdate {
	if i != nil {
		tu.SetEventID(*i)
	}
	return tu
}

// SetTicketHash sets the "ticket_hash" field.
func (tu *TicketUpdate) SetTicketHash(s string) *TicketUpdate {
	tu.mutation.SetTicketHash(s)
	return tu
}

// SetNillableTicketHash sets the "ticket_hash" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableTicketHash(s *string) *TicketUpdate {
	if s != nil {
		tu.SetTicketHash(*s)
	}
	return tu
}

// ClearTicketHash clears the value of the "ticket_hash" field.
func (tu *TicketUpdate) ClearTicketHash() *TicketUpdate {
	tu.mutation.ClearTicketHash()
	return tu
}

// SetImageURL sets the "image_url" field.
func (tu *TicketUpdate) SetImageURL(s string) *TicketUpdate {
	tu.mutation.SetImageURL(s)
	return tu
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableImageURL(s *string) *TicketUpdate {
	if s != nil {
		tu.SetImageURL(*s)
	}
	return tu
}

// ClearImageURL clears the value of the "image_url" field.
func (tu *TicketUpdate) ClearImageURL() *TicketUpdate {
	tu.mutation.ClearImageURL()
	return tu
}

// SetContractAddress sets the "contract_address" field.
func (tu *TicketUpdate) SetContractAddress(s string) *TicketUpdate {
	tu.mutation.SetContractAddress(s)
	return tu
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableContractAddress(s *string) *TicketUpdate {
	if s != nil {
		tu.SetContractAddress(*s)
	}
	return tu
}

// ClearContractAddress clears the value of the "contract_address" field.
func (tu *TicketUpdate) ClearContractAddress() *TicketUpdate {
	tu.mutation.ClearContractAddress()
	return tu
}

// SetTransactionHash sets the "transaction_hash" field.
func (tu *TicketUpdate) SetTransactionHash(s string) *TicketUpdate {
	tu.mutation.SetTransactionHash(s)
	return tu
}

// SetNillableTransactionHash sets the "transaction_hash" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableTransactionHash(s *string) *TicketUpdate {
	if s != nil {
		tu.SetTransactionHash(*s)
	}
	return tu
}

// ClearTransactionHash clears the value of the "transaction_hash" field.
func (tu *TicketUpdate) ClearTransactionHash() *TicketUpdate {
	tu.mutation.ClearTransactionHash()
	return tu
}

// SetBlockNumber sets the "block_number" field.
func (tu *TicketUpdate) SetBlockNumber(s string) *TicketUpdate {
	tu.mutation.SetBlockNumber(s)
	return tu
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableBlockNumber(s *string) *TicketUpdate {
	if s != nil {
		tu.SetBlockNumber(*s)
	}
	return tu
}

// ClearBlockNumber clears the value of the "block_number" field.
func (tu *TicketUpdate) ClearBlockNumber() *TicketUpdate {
	tu.mutation.ClearBlockNumber()
	return tu
}

// SetCreatedAt sets the "created_at" field.
func (tu *TicketUpdate) SetCreatedAt(t time.Time) *TicketUpdate {
	tu.mutation.SetCreatedAt(t)
	return tu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tu *TicketUpdate) SetNillableCreatedAt(t *time.Time) *TicketUpdate {
	if t != nil {
		tu.SetCreatedAt(*t)
	}
	return tu
}

// SetUpdatedAt sets the "updated_at" field.
func (tu *TicketUpdate) SetUpdatedAt(t time.Time) *TicketUpdate {
	tu.mutation.SetUpdatedAt(t)
	return tu
}

// SetEvent sets the "event" edge to the Event entity.
func (tu *TicketUpdate) SetEvent(e *Event) *TicketUpdate {
	return tu.SetEventID(e.ID)
}

// SetAttendeesID sets the "attendees" edge to the Attendee entity by ID.
func (tu *TicketUpdate) SetAttendeesID(id int) *TicketUpdate {
	tu.mutation.SetAttendeesID(id)
	return tu
}

// SetNillableAttendeesID sets the "attendees" edge to the Attendee entity by ID if the given value is not nil.
func (tu *TicketUpdate) SetNillableAttendeesID(id *int) *TicketUpdate {
	if id != nil {
		tu = tu.SetAttendeesID(*id)
	}
	return tu
}

// SetAttendees sets the "attendees" edge to the Attendee entity.
func (tu *TicketUpdate) SetAttendees(a *Attendee) *TicketUpdate {
	return tu.SetAttendeesID(a.ID)
}

// Mutation returns the TicketMutation object of the builder.
func (tu *TicketUpdate) Mutation() *TicketMutation {
	return tu.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (tu *TicketUpdate) ClearEvent() *TicketUpdate {
	tu.mutation.ClearEvent()
	return tu
}

// ClearAttendees clears the "attendees" edge to the Attendee entity.
func (tu *TicketUpdate) ClearAttendees() *TicketUpdate {
	tu.mutation.ClearAttendees()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TicketUpdate) Save(ctx context.Context) (int, error) {
	tu.defaults()
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TicketUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TicketUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TicketUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tu *TicketUpdate) defaults() {
	if _, ok := tu.mutation.UpdatedAt(); !ok {
		v := ticket.UpdateDefaultUpdatedAt()
		tu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TicketUpdate) check() error {
	if v, ok := tu.mutation.TicketSlug(); ok {
		if err := ticket.TicketSlugValidator(v); err != nil {
			return &ValidationError{Name: "ticket_slug", err: fmt.Errorf(`ent: validator failed for field "Ticket.ticket_slug": %w`, err)}
		}
	}
	if tu.mutation.EventCleared() && len(tu.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ticket.event"`)
	}
	return nil
}

func (tu *TicketUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(ticket.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(ticket.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.TicketSlug(); ok {
		_spec.SetField(ticket.FieldTicketSlug, field.TypeString, value)
	}
	if value, ok := tu.mutation.MintPrice(); ok {
		_spec.SetField(ticket.FieldMintPrice, field.TypeString, value)
	}
	if value, ok := tu.mutation.Quantity(); ok {
		_spec.SetField(ticket.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedQuantity(); ok {
		_spec.AddField(ticket.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := tu.mutation.TicketHash(); ok {
		_spec.SetField(ticket.FieldTicketHash, field.TypeString, value)
	}
	if tu.mutation.TicketHashCleared() {
		_spec.ClearField(ticket.FieldTicketHash, field.TypeString)
	}
	if value, ok := tu.mutation.ImageURL(); ok {
		_spec.SetField(ticket.FieldImageURL, field.TypeString, value)
	}
	if tu.mutation.ImageURLCleared() {
		_spec.ClearField(ticket.FieldImageURL, field.TypeString)
	}
	if value, ok := tu.mutation.ContractAddress(); ok {
		_spec.SetField(ticket.FieldContractAddress, field.TypeString, value)
	}
	if tu.mutation.ContractAddressCleared() {
		_spec.ClearField(ticket.FieldContractAddress, field.TypeString)
	}
	if value, ok := tu.mutation.TransactionHash(); ok {
		_spec.SetField(ticket.FieldTransactionHash, field.TypeString, value)
	}
	if tu.mutation.TransactionHashCleared() {
		_spec.ClearField(ticket.FieldTransactionHash, field.TypeString)
	}
	if value, ok := tu.mutation.BlockNumber(); ok {
		_spec.SetField(ticket.FieldBlockNumber, field.TypeString, value)
	}
	if tu.mutation.BlockNumberCleared() {
		_spec.ClearField(ticket.FieldBlockNumber, field.TypeString)
	}
	if value, ok := tu.mutation.CreatedAt(); ok {
		_spec.SetField(ticket.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tu.mutation.UpdatedAt(); ok {
		_spec.SetField(ticket.FieldUpdatedAt, field.TypeTime, value)
	}
	if tu.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.EventTable,
			Columns: []string{ticket.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.EventTable,
			Columns: []string{ticket.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AttendeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ticket.AttendeesTable,
			Columns: []string{ticket.AttendeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AttendeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ticket.AttendeesTable,
			Columns: []string{ticket.AttendeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TicketUpdateOne is the builder for updating a single Ticket entity.
type TicketUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TicketMutation
}

// SetName sets the "name" field.
func (tuo *TicketUpdateOne) SetName(s string) *TicketUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableName(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TicketUpdateOne) SetDescription(s string) *TicketUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableDescription(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetTicketSlug sets the "ticket_slug" field.
func (tuo *TicketUpdateOne) SetTicketSlug(s string) *TicketUpdateOne {
	tuo.mutation.SetTicketSlug(s)
	return tuo
}

// SetNillableTicketSlug sets the "ticket_slug" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableTicketSlug(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetTicketSlug(*s)
	}
	return tuo
}

// SetMintPrice sets the "mint_price" field.
func (tuo *TicketUpdateOne) SetMintPrice(s string) *TicketUpdateOne {
	tuo.mutation.SetMintPrice(s)
	return tuo
}

// SetNillableMintPrice sets the "mint_price" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableMintPrice(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetMintPrice(*s)
	}
	return tuo
}

// SetQuantity sets the "quantity" field.
func (tuo *TicketUpdateOne) SetQuantity(i int) *TicketUpdateOne {
	tuo.mutation.ResetQuantity()
	tuo.mutation.SetQuantity(i)
	return tuo
}

// SetNillableQuantity sets the "quantity" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableQuantity(i *int) *TicketUpdateOne {
	if i != nil {
		tuo.SetQuantity(*i)
	}
	return tuo
}

// AddQuantity adds i to the "quantity" field.
func (tuo *TicketUpdateOne) AddQuantity(i int) *TicketUpdateOne {
	tuo.mutation.AddQuantity(i)
	return tuo
}

// SetEventID sets the "event_id" field.
func (tuo *TicketUpdateOne) SetEventID(i int) *TicketUpdateOne {
	tuo.mutation.SetEventID(i)
	return tuo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableEventID(i *int) *TicketUpdateOne {
	if i != nil {
		tuo.SetEventID(*i)
	}
	return tuo
}

// SetTicketHash sets the "ticket_hash" field.
func (tuo *TicketUpdateOne) SetTicketHash(s string) *TicketUpdateOne {
	tuo.mutation.SetTicketHash(s)
	return tuo
}

// SetNillableTicketHash sets the "ticket_hash" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableTicketHash(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetTicketHash(*s)
	}
	return tuo
}

// ClearTicketHash clears the value of the "ticket_hash" field.
func (tuo *TicketUpdateOne) ClearTicketHash() *TicketUpdateOne {
	tuo.mutation.ClearTicketHash()
	return tuo
}

// SetImageURL sets the "image_url" field.
func (tuo *TicketUpdateOne) SetImageURL(s string) *TicketUpdateOne {
	tuo.mutation.SetImageURL(s)
	return tuo
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableImageURL(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetImageURL(*s)
	}
	return tuo
}

// ClearImageURL clears the value of the "image_url" field.
func (tuo *TicketUpdateOne) ClearImageURL() *TicketUpdateOne {
	tuo.mutation.ClearImageURL()
	return tuo
}

// SetContractAddress sets the "contract_address" field.
func (tuo *TicketUpdateOne) SetContractAddress(s string) *TicketUpdateOne {
	tuo.mutation.SetContractAddress(s)
	return tuo
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableContractAddress(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetContractAddress(*s)
	}
	return tuo
}

// ClearContractAddress clears the value of the "contract_address" field.
func (tuo *TicketUpdateOne) ClearContractAddress() *TicketUpdateOne {
	tuo.mutation.ClearContractAddress()
	return tuo
}

// SetTransactionHash sets the "transaction_hash" field.
func (tuo *TicketUpdateOne) SetTransactionHash(s string) *TicketUpdateOne {
	tuo.mutation.SetTransactionHash(s)
	return tuo
}

// SetNillableTransactionHash sets the "transaction_hash" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableTransactionHash(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetTransactionHash(*s)
	}
	return tuo
}

// ClearTransactionHash clears the value of the "transaction_hash" field.
func (tuo *TicketUpdateOne) ClearTransactionHash() *TicketUpdateOne {
	tuo.mutation.ClearTransactionHash()
	return tuo
}

// SetBlockNumber sets the "block_number" field.
func (tuo *TicketUpdateOne) SetBlockNumber(s string) *TicketUpdateOne {
	tuo.mutation.SetBlockNumber(s)
	return tuo
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableBlockNumber(s *string) *TicketUpdateOne {
	if s != nil {
		tuo.SetBlockNumber(*s)
	}
	return tuo
}

// ClearBlockNumber clears the value of the "block_number" field.
func (tuo *TicketUpdateOne) ClearBlockNumber() *TicketUpdateOne {
	tuo.mutation.ClearBlockNumber()
	return tuo
}

// SetCreatedAt sets the "created_at" field.
func (tuo *TicketUpdateOne) SetCreatedAt(t time.Time) *TicketUpdateOne {
	tuo.mutation.SetCreatedAt(t)
	return tuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableCreatedAt(t *time.Time) *TicketUpdateOne {
	if t != nil {
		tuo.SetCreatedAt(*t)
	}
	return tuo
}

// SetUpdatedAt sets the "updated_at" field.
func (tuo *TicketUpdateOne) SetUpdatedAt(t time.Time) *TicketUpdateOne {
	tuo.mutation.SetUpdatedAt(t)
	return tuo
}

// SetEvent sets the "event" edge to the Event entity.
func (tuo *TicketUpdateOne) SetEvent(e *Event) *TicketUpdateOne {
	return tuo.SetEventID(e.ID)
}

// SetAttendeesID sets the "attendees" edge to the Attendee entity by ID.
func (tuo *TicketUpdateOne) SetAttendeesID(id int) *TicketUpdateOne {
	tuo.mutation.SetAttendeesID(id)
	return tuo
}

// SetNillableAttendeesID sets the "attendees" edge to the Attendee entity by ID if the given value is not nil.
func (tuo *TicketUpdateOne) SetNillableAttendeesID(id *int) *TicketUpdateOne {
	if id != nil {
		tuo = tuo.SetAttendeesID(*id)
	}
	return tuo
}

// SetAttendees sets the "attendees" edge to the Attendee entity.
func (tuo *TicketUpdateOne) SetAttendees(a *Attendee) *TicketUpdateOne {
	return tuo.SetAttendeesID(a.ID)
}

// Mutation returns the TicketMutation object of the builder.
func (tuo *TicketUpdateOne) Mutation() *TicketMutation {
	return tuo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (tuo *TicketUpdateOne) ClearEvent() *TicketUpdateOne {
	tuo.mutation.ClearEvent()
	return tuo
}

// ClearAttendees clears the "attendees" edge to the Attendee entity.
func (tuo *TicketUpdateOne) ClearAttendees() *TicketUpdateOne {
	tuo.mutation.ClearAttendees()
	return tuo
}

// Where appends a list predicates to the TicketUpdate builder.
func (tuo *TicketUpdateOne) Where(ps ...predicate.Ticket) *TicketUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TicketUpdateOne) Select(field string, fields ...string) *TicketUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Ticket entity.
func (tuo *TicketUpdateOne) Save(ctx context.Context) (*Ticket, error) {
	tuo.defaults()
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TicketUpdateOne) SaveX(ctx context.Context) *Ticket {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TicketUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TicketUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tuo *TicketUpdateOne) defaults() {
	if _, ok := tuo.mutation.UpdatedAt(); !ok {
		v := ticket.UpdateDefaultUpdatedAt()
		tuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TicketUpdateOne) check() error {
	if v, ok := tuo.mutation.TicketSlug(); ok {
		if err := ticket.TicketSlugValidator(v); err != nil {
			return &ValidationError{Name: "ticket_slug", err: fmt.Errorf(`ent: validator failed for field "Ticket.ticket_slug": %w`, err)}
		}
	}
	if tuo.mutation.EventCleared() && len(tuo.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Ticket.event"`)
	}
	return nil
}

func (tuo *TicketUpdateOne) sqlSave(ctx context.Context) (_node *Ticket, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ticket.Table, ticket.Columns, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Ticket.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ticket.FieldID)
		for _, f := range fields {
			if !ticket.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != ticket.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(ticket.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(ticket.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.TicketSlug(); ok {
		_spec.SetField(ticket.FieldTicketSlug, field.TypeString, value)
	}
	if value, ok := tuo.mutation.MintPrice(); ok {
		_spec.SetField(ticket.FieldMintPrice, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Quantity(); ok {
		_spec.SetField(ticket.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedQuantity(); ok {
		_spec.AddField(ticket.FieldQuantity, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.TicketHash(); ok {
		_spec.SetField(ticket.FieldTicketHash, field.TypeString, value)
	}
	if tuo.mutation.TicketHashCleared() {
		_spec.ClearField(ticket.FieldTicketHash, field.TypeString)
	}
	if value, ok := tuo.mutation.ImageURL(); ok {
		_spec.SetField(ticket.FieldImageURL, field.TypeString, value)
	}
	if tuo.mutation.ImageURLCleared() {
		_spec.ClearField(ticket.FieldImageURL, field.TypeString)
	}
	if value, ok := tuo.mutation.ContractAddress(); ok {
		_spec.SetField(ticket.FieldContractAddress, field.TypeString, value)
	}
	if tuo.mutation.ContractAddressCleared() {
		_spec.ClearField(ticket.FieldContractAddress, field.TypeString)
	}
	if value, ok := tuo.mutation.TransactionHash(); ok {
		_spec.SetField(ticket.FieldTransactionHash, field.TypeString, value)
	}
	if tuo.mutation.TransactionHashCleared() {
		_spec.ClearField(ticket.FieldTransactionHash, field.TypeString)
	}
	if value, ok := tuo.mutation.BlockNumber(); ok {
		_spec.SetField(ticket.FieldBlockNumber, field.TypeString, value)
	}
	if tuo.mutation.BlockNumberCleared() {
		_spec.ClearField(ticket.FieldBlockNumber, field.TypeString)
	}
	if value, ok := tuo.mutation.CreatedAt(); ok {
		_spec.SetField(ticket.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.UpdatedAt(); ok {
		_spec.SetField(ticket.FieldUpdatedAt, field.TypeTime, value)
	}
	if tuo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.EventTable,
			Columns: []string{ticket.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.EventTable,
			Columns: []string{ticket.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AttendeesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ticket.AttendeesTable,
			Columns: []string{ticket.AttendeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendee.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AttendeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ticket.AttendeesTable,
			Columns: []string{ticket.AttendeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Ticket{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ticket.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
