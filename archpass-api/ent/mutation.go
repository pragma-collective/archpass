// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/garguelles/archpass/ent/attendee"
	"github.com/garguelles/archpass/ent/event"
	"github.com/garguelles/archpass/ent/predicate"
	"github.com/garguelles/archpass/ent/ticket"
	"github.com/garguelles/archpass/ent/transaction"
	"github.com/garguelles/archpass/ent/user"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAttendee    = "Attendee"
	TypeEvent       = "Event"
	TypeTicket      = "Ticket"
	TypeTransaction = "Transaction"
	TypeUser        = "User"
)

// AttendeeMutation represents an operation that mutates the Attendee nodes in the graph.
type AttendeeMutation struct {
	config
	op               Op
	typ              string
	id               *int
	token_id         *int
	addtoken_id      *int
	transaction_hash *string
	block_number     *int64
	addblock_number  *int64
	created_at       *time.Time
	clearedFields    map[string]struct{}
	event            *int
	clearedevent     bool
	user             *int
	cleareduser      bool
	ticket           *int
	clearedticket    bool
	done             bool
	oldValue         func(context.Context) (*Attendee, error)
	predicates       []predicate.Attendee
}

var _ ent.Mutation = (*AttendeeMutation)(nil)

// attendeeOption allows management of the mutation configuration using functional options.
type attendeeOption func(*AttendeeMutation)

// newAttendeeMutation creates new mutation for the Attendee entity.
func newAttendeeMutation(c config, op Op, opts ...attendeeOption) *AttendeeMutation {
	m := &AttendeeMutation{
		config:        c,
		op:            op,
		typ:           TypeAttendee,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAttendeeID sets the ID field of the mutation.
func withAttendeeID(id int) attendeeOption {
	return func(m *AttendeeMutation) {
		var (
			err   error
			once  sync.Once
			value *Attendee
		)
		m.oldValue = func(ctx context.Context) (*Attendee, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Attendee.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAttendee sets the old Attendee of the mutation.
func withAttendee(node *Attendee) attendeeOption {
	return func(m *AttendeeMutation) {
		m.oldValue = func(context.Context) (*Attendee, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AttendeeMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AttendeeMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AttendeeMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AttendeeMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Attendee.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUserID sets the "user_id" field.
func (m *AttendeeMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AttendeeMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Attendee entity.
// If the Attendee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendeeMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AttendeeMutation) ResetUserID() {
	m.user = nil
}

// SetEventID sets the "event_id" field.
func (m *AttendeeMutation) SetEventID(i int) {
	m.event = &i
}

// EventID returns the value of the "event_id" field in the mutation.
func (m *AttendeeMutation) EventID() (r int, exists bool) {
	v := m.event
	if v == nil {
		return
	}
	return *v, true
}

// OldEventID returns the old "event_id" field's value of the Attendee entity.
// If the Attendee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendeeMutation) OldEventID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventID: %w", err)
	}
	return oldValue.EventID, nil
}

// ResetEventID resets all changes to the "event_id" field.
func (m *AttendeeMutation) ResetEventID() {
	m.event = nil
}

// SetTicketID sets the "ticket_id" field.
func (m *AttendeeMutation) SetTicketID(i int) {
	m.ticket = &i
}

// TicketID returns the value of the "ticket_id" field in the mutation.
func (m *AttendeeMutation) TicketID() (r int, exists bool) {
	v := m.ticket
	if v == nil {
		return
	}
	return *v, true
}

// OldTicketID returns the old "ticket_id" field's value of the Attendee entity.
// If the Attendee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendeeMutation) OldTicketID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTicketID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTicketID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTicketID: %w", err)
	}
	return oldValue.TicketID, nil
}

// ResetTicketID resets all changes to the "ticket_id" field.
func (m *AttendeeMutation) ResetTicketID() {
	m.ticket = nil
}

// SetTokenID sets the "token_id" field.
func (m *AttendeeMutation) SetTokenID(i int) {
	m.token_id = &i
	m.addtoken_id = nil
}

// TokenID returns the value of the "token_id" field in the mutation.
func (m *AttendeeMutation) TokenID() (r int, exists bool) {
	v := m.token_id
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenID returns the old "token_id" field's value of the Attendee entity.
// If the Attendee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendeeMutation) OldTokenID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenID: %w", err)
	}
	return oldValue.TokenID, nil
}

// AddTokenID adds i to the "token_id" field.
func (m *AttendeeMutation) AddTokenID(i int) {
	if m.addtoken_id != nil {
		*m.addtoken_id += i
	} else {
		m.addtoken_id = &i
	}
}

// AddedTokenID returns the value that was added to the "token_id" field in this mutation.
func (m *AttendeeMutation) AddedTokenID() (r int, exists bool) {
	v := m.addtoken_id
	if v == nil {
		return
	}
	return *v, true
}

// ResetTokenID resets all changes to the "token_id" field.
func (m *AttendeeMutation) ResetTokenID() {
	m.token_id = nil
	m.addtoken_id = nil
}

// SetTransactionHash sets the "transaction_hash" field.
func (m *AttendeeMutation) SetTransactionHash(s string) {
	m.transaction_hash = &s
}

// TransactionHash returns the value of the "transaction_hash" field in the mutation.
func (m *AttendeeMutation) TransactionHash() (r string, exists bool) {
	v := m.transaction_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionHash returns the old "transaction_hash" field's value of the Attendee entity.
// If the Attendee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendeeMutation) OldTransactionHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionHash: %w", err)
	}
	return oldValue.TransactionHash, nil
}

// ResetTransactionHash resets all changes to the "transaction_hash" field.
func (m *AttendeeMutation) ResetTransactionHash() {
	m.transaction_hash = nil
}

// SetBlockNumber sets the "block_number" field.
func (m *AttendeeMutation) SetBlockNumber(i int64) {
	m.block_number = &i
	m.addblock_number = nil
}

// BlockNumber returns the value of the "block_number" field in the mutation.
func (m *AttendeeMutation) BlockNumber() (r int64, exists bool) {
	v := m.block_number
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockNumber returns the old "block_number" field's value of the Attendee entity.
// If the Attendee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendeeMutation) OldBlockNumber(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlockNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlockNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockNumber: %w", err)
	}
	return oldValue.BlockNumber, nil
}

// AddBlockNumber adds i to the "block_number" field.
func (m *AttendeeMutation) AddBlockNumber(i int64) {
	if m.addblock_number != nil {
		*m.addblock_number += i
	} else {
		m.addblock_number = &i
	}
}

// AddedBlockNumber returns the value that was added to the "block_number" field in this mutation.
func (m *AttendeeMutation) AddedBlockNumber() (r int64, exists bool) {
	v := m.addblock_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetBlockNumber resets all changes to the "block_number" field.
func (m *AttendeeMutation) ResetBlockNumber() {
	m.block_number = nil
	m.addblock_number = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *AttendeeMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AttendeeMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Attendee entity.
// If the Attendee object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AttendeeMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AttendeeMutation) ResetCreatedAt() {
	m.created_at = nil
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *AttendeeMutation) ClearEvent() {
	m.clearedevent = true
	m.clearedFields[attendee.FieldEventID] = struct{}{}
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *AttendeeMutation) EventCleared() bool {
	return m.clearedevent
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *AttendeeMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *AttendeeMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *AttendeeMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[attendee.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *AttendeeMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *AttendeeMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *AttendeeMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (m *AttendeeMutation) ClearTicket() {
	m.clearedticket = true
	m.clearedFields[attendee.FieldTicketID] = struct{}{}
}

// TicketCleared reports if the "ticket" edge to the Ticket entity was cleared.
func (m *AttendeeMutation) TicketCleared() bool {
	return m.clearedticket
}

// TicketIDs returns the "ticket" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// TicketID instead. It exists only for internal usage by the builders.
func (m *AttendeeMutation) TicketIDs() (ids []int) {
	if id := m.ticket; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetTicket resets all changes to the "ticket" edge.
func (m *AttendeeMutation) ResetTicket() {
	m.ticket = nil
	m.clearedticket = false
}

// Where appends a list predicates to the AttendeeMutation builder.
func (m *AttendeeMutation) Where(ps ...predicate.Attendee) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the AttendeeMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *AttendeeMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Attendee, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *AttendeeMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *AttendeeMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Attendee).
func (m *AttendeeMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AttendeeMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.user != nil {
		fields = append(fields, attendee.FieldUserID)
	}
	if m.event != nil {
		fields = append(fields, attendee.FieldEventID)
	}
	if m.ticket != nil {
		fields = append(fields, attendee.FieldTicketID)
	}
	if m.token_id != nil {
		fields = append(fields, attendee.FieldTokenID)
	}
	if m.transaction_hash != nil {
		fields = append(fields, attendee.FieldTransactionHash)
	}
	if m.block_number != nil {
		fields = append(fields, attendee.FieldBlockNumber)
	}
	if m.created_at != nil {
		fields = append(fields, attendee.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AttendeeMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case attendee.FieldUserID:
		return m.UserID()
	case attendee.FieldEventID:
		return m.EventID()
	case attendee.FieldTicketID:
		return m.TicketID()
	case attendee.FieldTokenID:
		return m.TokenID()
	case attendee.FieldTransactionHash:
		return m.TransactionHash()
	case attendee.FieldBlockNumber:
		return m.BlockNumber()
	case attendee.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AttendeeMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case attendee.FieldUserID:
		return m.OldUserID(ctx)
	case attendee.FieldEventID:
		return m.OldEventID(ctx)
	case attendee.FieldTicketID:
		return m.OldTicketID(ctx)
	case attendee.FieldTokenID:
		return m.OldTokenID(ctx)
	case attendee.FieldTransactionHash:
		return m.OldTransactionHash(ctx)
	case attendee.FieldBlockNumber:
		return m.OldBlockNumber(ctx)
	case attendee.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Attendee field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttendeeMutation) SetField(name string, value ent.Value) error {
	switch name {
	case attendee.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case attendee.FieldEventID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventID(v)
		return nil
	case attendee.FieldTicketID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTicketID(v)
		return nil
	case attendee.FieldTokenID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenID(v)
		return nil
	case attendee.FieldTransactionHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionHash(v)
		return nil
	case attendee.FieldBlockNumber:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockNumber(v)
		return nil
	case attendee.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Attendee field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AttendeeMutation) AddedFields() []string {
	var fields []string
	if m.addtoken_id != nil {
		fields = append(fields, attendee.FieldTokenID)
	}
	if m.addblock_number != nil {
		fields = append(fields, attendee.FieldBlockNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AttendeeMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case attendee.FieldTokenID:
		return m.AddedTokenID()
	case attendee.FieldBlockNumber:
		return m.AddedBlockNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AttendeeMutation) AddField(name string, value ent.Value) error {
	switch name {
	case attendee.FieldTokenID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTokenID(v)
		return nil
	case attendee.FieldBlockNumber:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBlockNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Attendee numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AttendeeMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AttendeeMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AttendeeMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Attendee nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AttendeeMutation) ResetField(name string) error {
	switch name {
	case attendee.FieldUserID:
		m.ResetUserID()
		return nil
	case attendee.FieldEventID:
		m.ResetEventID()
		return nil
	case attendee.FieldTicketID:
		m.ResetTicketID()
		return nil
	case attendee.FieldTokenID:
		m.ResetTokenID()
		return nil
	case attendee.FieldTransactionHash:
		m.ResetTransactionHash()
		return nil
	case attendee.FieldBlockNumber:
		m.ResetBlockNumber()
		return nil
	case attendee.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Attendee field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AttendeeMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.event != nil {
		edges = append(edges, attendee.EdgeEvent)
	}
	if m.user != nil {
		edges = append(edges, attendee.EdgeUser)
	}
	if m.ticket != nil {
		edges = append(edges, attendee.EdgeTicket)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AttendeeMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case attendee.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	case attendee.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case attendee.EdgeTicket:
		if id := m.ticket; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AttendeeMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AttendeeMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AttendeeMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedevent {
		edges = append(edges, attendee.EdgeEvent)
	}
	if m.cleareduser {
		edges = append(edges, attendee.EdgeUser)
	}
	if m.clearedticket {
		edges = append(edges, attendee.EdgeTicket)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AttendeeMutation) EdgeCleared(name string) bool {
	switch name {
	case attendee.EdgeEvent:
		return m.clearedevent
	case attendee.EdgeUser:
		return m.cleareduser
	case attendee.EdgeTicket:
		return m.clearedticket
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AttendeeMutation) ClearEdge(name string) error {
	switch name {
	case attendee.EdgeEvent:
		m.ClearEvent()
		return nil
	case attendee.EdgeUser:
		m.ClearUser()
		return nil
	case attendee.EdgeTicket:
		m.ClearTicket()
		return nil
	}
	return fmt.Errorf("unknown Attendee unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AttendeeMutation) ResetEdge(name string) error {
	switch name {
	case attendee.EdgeEvent:
		m.ResetEvent()
		return nil
	case attendee.EdgeUser:
		m.ResetUser()
		return nil
	case attendee.EdgeTicket:
		m.ResetTicket()
		return nil
	}
	return fmt.Errorf("unknown Attendee edge %s", name)
}

// EventMutation represents an operation that mutates the Event nodes in the graph.
type EventMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	description      *string
	event_slug       *string
	start_date       *time.Time
	end_date         *time.Time
	date             *string
	location         *string
	image_url        *string
	event_hash       *string
	contract_address *string
	transaction_hash *string
	block_number     *string
	created_at       *time.Time
	modified_at      *time.Time
	clearedFields    map[string]struct{}
	user             *int
	cleareduser      bool
	tickets          map[int]struct{}
	removedtickets   map[int]struct{}
	clearedtickets   bool
	attendees        map[int]struct{}
	removedattendees map[int]struct{}
	clearedattendees bool
	done             bool
	oldValue         func(context.Context) (*Event, error)
	predicates       []predicate.Event
}

var _ ent.Mutation = (*EventMutation)(nil)

// eventOption allows management of the mutation configuration using functional options.
type eventOption func(*EventMutation)

// newEventMutation creates new mutation for the Event entity.
func newEventMutation(c config, op Op, opts ...eventOption) *EventMutation {
	m := &EventMutation{
		config:        c,
		op:            op,
		typ:           TypeEvent,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEventID sets the ID field of the mutation.
func withEventID(id int) eventOption {
	return func(m *EventMutation) {
		var (
			err   error
			once  sync.Once
			value *Event
		)
		m.oldValue = func(ctx context.Context) (*Event, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Event.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEvent sets the old Event of the mutation.
func withEvent(node *Event) eventOption {
	return func(m *EventMutation) {
		m.oldValue = func(context.Context) (*Event, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EventMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EventMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EventMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EventMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Event.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *EventMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *EventMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *EventMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *EventMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *EventMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *EventMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[event.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *EventMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[event.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *EventMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, event.FieldDescription)
}

// SetEventSlug sets the "event_slug" field.
func (m *EventMutation) SetEventSlug(s string) {
	m.event_slug = &s
}

// EventSlug returns the value of the "event_slug" field in the mutation.
func (m *EventMutation) EventSlug() (r string, exists bool) {
	v := m.event_slug
	if v == nil {
		return
	}
	return *v, true
}

// OldEventSlug returns the old "event_slug" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldEventSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventSlug: %w", err)
	}
	return oldValue.EventSlug, nil
}

// ResetEventSlug resets all changes to the "event_slug" field.
func (m *EventMutation) ResetEventSlug() {
	m.event_slug = nil
}

// SetStartDate sets the "start_date" field.
func (m *EventMutation) SetStartDate(t time.Time) {
	m.start_date = &t
}

// StartDate returns the value of the "start_date" field in the mutation.
func (m *EventMutation) StartDate() (r time.Time, exists bool) {
	v := m.start_date
	if v == nil {
		return
	}
	return *v, true
}

// OldStartDate returns the old "start_date" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldStartDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartDate: %w", err)
	}
	return oldValue.StartDate, nil
}

// ClearStartDate clears the value of the "start_date" field.
func (m *EventMutation) ClearStartDate() {
	m.start_date = nil
	m.clearedFields[event.FieldStartDate] = struct{}{}
}

// StartDateCleared returns if the "start_date" field was cleared in this mutation.
func (m *EventMutation) StartDateCleared() bool {
	_, ok := m.clearedFields[event.FieldStartDate]
	return ok
}

// ResetStartDate resets all changes to the "start_date" field.
func (m *EventMutation) ResetStartDate() {
	m.start_date = nil
	delete(m.clearedFields, event.FieldStartDate)
}

// SetEndDate sets the "end_date" field.
func (m *EventMutation) SetEndDate(t time.Time) {
	m.end_date = &t
}

// EndDate returns the value of the "end_date" field in the mutation.
func (m *EventMutation) EndDate() (r time.Time, exists bool) {
	v := m.end_date
	if v == nil {
		return
	}
	return *v, true
}

// OldEndDate returns the old "end_date" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldEndDate(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndDate: %w", err)
	}
	return oldValue.EndDate, nil
}

// ClearEndDate clears the value of the "end_date" field.
func (m *EventMutation) ClearEndDate() {
	m.end_date = nil
	m.clearedFields[event.FieldEndDate] = struct{}{}
}

// EndDateCleared returns if the "end_date" field was cleared in this mutation.
func (m *EventMutation) EndDateCleared() bool {
	_, ok := m.clearedFields[event.FieldEndDate]
	return ok
}

// ResetEndDate resets all changes to the "end_date" field.
func (m *EventMutation) ResetEndDate() {
	m.end_date = nil
	delete(m.clearedFields, event.FieldEndDate)
}

// SetDate sets the "date" field.
func (m *EventMutation) SetDate(s string) {
	m.date = &s
}

// Date returns the value of the "date" field in the mutation.
func (m *EventMutation) Date() (r string, exists bool) {
	v := m.date
	if v == nil {
		return
	}
	return *v, true
}

// OldDate returns the old "date" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldDate(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDate is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDate requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDate: %w", err)
	}
	return oldValue.Date, nil
}

// ClearDate clears the value of the "date" field.
func (m *EventMutation) ClearDate() {
	m.date = nil
	m.clearedFields[event.FieldDate] = struct{}{}
}

// DateCleared returns if the "date" field was cleared in this mutation.
func (m *EventMutation) DateCleared() bool {
	_, ok := m.clearedFields[event.FieldDate]
	return ok
}

// ResetDate resets all changes to the "date" field.
func (m *EventMutation) ResetDate() {
	m.date = nil
	delete(m.clearedFields, event.FieldDate)
}

// SetLocation sets the "location" field.
func (m *EventMutation) SetLocation(s string) {
	m.location = &s
}

// Location returns the value of the "location" field in the mutation.
func (m *EventMutation) Location() (r string, exists bool) {
	v := m.location
	if v == nil {
		return
	}
	return *v, true
}

// OldLocation returns the old "location" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldLocation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocation: %w", err)
	}
	return oldValue.Location, nil
}

// ResetLocation resets all changes to the "location" field.
func (m *EventMutation) ResetLocation() {
	m.location = nil
}

// SetImageURL sets the "image_url" field.
func (m *EventMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *EventMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *EventMutation) ResetImageURL() {
	m.image_url = nil
}

// SetUserID sets the "user_id" field.
func (m *EventMutation) SetUserID(i int) {
	m.user = &i
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *EventMutation) UserID() (r int, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldUserID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *EventMutation) ResetUserID() {
	m.user = nil
}

// SetEventHash sets the "event_hash" field.
func (m *EventMutation) SetEventHash(s string) {
	m.event_hash = &s
}

// EventHash returns the value of the "event_hash" field in the mutation.
func (m *EventMutation) EventHash() (r string, exists bool) {
	v := m.event_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldEventHash returns the old "event_hash" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldEventHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventHash: %w", err)
	}
	return oldValue.EventHash, nil
}

// ClearEventHash clears the value of the "event_hash" field.
func (m *EventMutation) ClearEventHash() {
	m.event_hash = nil
	m.clearedFields[event.FieldEventHash] = struct{}{}
}

// EventHashCleared returns if the "event_hash" field was cleared in this mutation.
func (m *EventMutation) EventHashCleared() bool {
	_, ok := m.clearedFields[event.FieldEventHash]
	return ok
}

// ResetEventHash resets all changes to the "event_hash" field.
func (m *EventMutation) ResetEventHash() {
	m.event_hash = nil
	delete(m.clearedFields, event.FieldEventHash)
}

// SetContractAddress sets the "contract_address" field.
func (m *EventMutation) SetContractAddress(s string) {
	m.contract_address = &s
}

// ContractAddress returns the value of the "contract_address" field in the mutation.
func (m *EventMutation) ContractAddress() (r string, exists bool) {
	v := m.contract_address
	if v == nil {
		return
	}
	return *v, true
}

// OldContractAddress returns the old "contract_address" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldContractAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContractAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContractAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContractAddress: %w", err)
	}
	return oldValue.ContractAddress, nil
}

// ClearContractAddress clears the value of the "contract_address" field.
func (m *EventMutation) ClearContractAddress() {
	m.contract_address = nil
	m.clearedFields[event.FieldContractAddress] = struct{}{}
}

// ContractAddressCleared returns if the "contract_address" field was cleared in this mutation.
func (m *EventMutation) ContractAddressCleared() bool {
	_, ok := m.clearedFields[event.FieldContractAddress]
	return ok
}

// ResetContractAddress resets all changes to the "contract_address" field.
func (m *EventMutation) ResetContractAddress() {
	m.contract_address = nil
	delete(m.clearedFields, event.FieldContractAddress)
}

// SetTransactionHash sets the "transaction_hash" field.
func (m *EventMutation) SetTransactionHash(s string) {
	m.transaction_hash = &s
}

// TransactionHash returns the value of the "transaction_hash" field in the mutation.
func (m *EventMutation) TransactionHash() (r string, exists bool) {
	v := m.transaction_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionHash returns the old "transaction_hash" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldTransactionHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionHash: %w", err)
	}
	return oldValue.TransactionHash, nil
}

// ClearTransactionHash clears the value of the "transaction_hash" field.
func (m *EventMutation) ClearTransactionHash() {
	m.transaction_hash = nil
	m.clearedFields[event.FieldTransactionHash] = struct{}{}
}

// TransactionHashCleared returns if the "transaction_hash" field was cleared in this mutation.
func (m *EventMutation) TransactionHashCleared() bool {
	_, ok := m.clearedFields[event.FieldTransactionHash]
	return ok
}

// ResetTransactionHash resets all changes to the "transaction_hash" field.
func (m *EventMutation) ResetTransactionHash() {
	m.transaction_hash = nil
	delete(m.clearedFields, event.FieldTransactionHash)
}

// SetBlockNumber sets the "block_number" field.
func (m *EventMutation) SetBlockNumber(s string) {
	m.block_number = &s
}

// BlockNumber returns the value of the "block_number" field in the mutation.
func (m *EventMutation) BlockNumber() (r string, exists bool) {
	v := m.block_number
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockNumber returns the old "block_number" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldBlockNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlockNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlockNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockNumber: %w", err)
	}
	return oldValue.BlockNumber, nil
}

// ClearBlockNumber clears the value of the "block_number" field.
func (m *EventMutation) ClearBlockNumber() {
	m.block_number = nil
	m.clearedFields[event.FieldBlockNumber] = struct{}{}
}

// BlockNumberCleared returns if the "block_number" field was cleared in this mutation.
func (m *EventMutation) BlockNumberCleared() bool {
	_, ok := m.clearedFields[event.FieldBlockNumber]
	return ok
}

// ResetBlockNumber resets all changes to the "block_number" field.
func (m *EventMutation) ResetBlockNumber() {
	m.block_number = nil
	delete(m.clearedFields, event.FieldBlockNumber)
}

// SetCreatedAt sets the "created_at" field.
func (m *EventMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EventMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EventMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetModifiedAt sets the "modified_at" field.
func (m *EventMutation) SetModifiedAt(t time.Time) {
	m.modified_at = &t
}

// ModifiedAt returns the value of the "modified_at" field in the mutation.
func (m *EventMutation) ModifiedAt() (r time.Time, exists bool) {
	v := m.modified_at
	if v == nil {
		return
	}
	return *v, true
}

// OldModifiedAt returns the old "modified_at" field's value of the Event entity.
// If the Event object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EventMutation) OldModifiedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldModifiedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldModifiedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldModifiedAt: %w", err)
	}
	return oldValue.ModifiedAt, nil
}

// ResetModifiedAt resets all changes to the "modified_at" field.
func (m *EventMutation) ResetModifiedAt() {
	m.modified_at = nil
}

// ClearUser clears the "user" edge to the User entity.
func (m *EventMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[event.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *EventMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *EventMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *EventMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// AddTicketIDs adds the "tickets" edge to the Ticket entity by ids.
func (m *EventMutation) AddTicketIDs(ids ...int) {
	if m.tickets == nil {
		m.tickets = make(map[int]struct{})
	}
	for i := range ids {
		m.tickets[ids[i]] = struct{}{}
	}
}

// ClearTickets clears the "tickets" edge to the Ticket entity.
func (m *EventMutation) ClearTickets() {
	m.clearedtickets = true
}

// TicketsCleared reports if the "tickets" edge to the Ticket entity was cleared.
func (m *EventMutation) TicketsCleared() bool {
	return m.clearedtickets
}

// RemoveTicketIDs removes the "tickets" edge to the Ticket entity by IDs.
func (m *EventMutation) RemoveTicketIDs(ids ...int) {
	if m.removedtickets == nil {
		m.removedtickets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.tickets, ids[i])
		m.removedtickets[ids[i]] = struct{}{}
	}
}

// RemovedTickets returns the removed IDs of the "tickets" edge to the Ticket entity.
func (m *EventMutation) RemovedTicketsIDs() (ids []int) {
	for id := range m.removedtickets {
		ids = append(ids, id)
	}
	return
}

// TicketsIDs returns the "tickets" edge IDs in the mutation.
func (m *EventMutation) TicketsIDs() (ids []int) {
	for id := range m.tickets {
		ids = append(ids, id)
	}
	return
}

// ResetTickets resets all changes to the "tickets" edge.
func (m *EventMutation) ResetTickets() {
	m.tickets = nil
	m.clearedtickets = false
	m.removedtickets = nil
}

// AddAttendeeIDs adds the "attendees" edge to the Attendee entity by ids.
func (m *EventMutation) AddAttendeeIDs(ids ...int) {
	if m.attendees == nil {
		m.attendees = make(map[int]struct{})
	}
	for i := range ids {
		m.attendees[ids[i]] = struct{}{}
	}
}

// ClearAttendees clears the "attendees" edge to the Attendee entity.
func (m *EventMutation) ClearAttendees() {
	m.clearedattendees = true
}

// AttendeesCleared reports if the "attendees" edge to the Attendee entity was cleared.
func (m *EventMutation) AttendeesCleared() bool {
	return m.clearedattendees
}

// RemoveAttendeeIDs removes the "attendees" edge to the Attendee entity by IDs.
func (m *EventMutation) RemoveAttendeeIDs(ids ...int) {
	if m.removedattendees == nil {
		m.removedattendees = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attendees, ids[i])
		m.removedattendees[ids[i]] = struct{}{}
	}
}

// RemovedAttendees returns the removed IDs of the "attendees" edge to the Attendee entity.
func (m *EventMutation) RemovedAttendeesIDs() (ids []int) {
	for id := range m.removedattendees {
		ids = append(ids, id)
	}
	return
}

// AttendeesIDs returns the "attendees" edge IDs in the mutation.
func (m *EventMutation) AttendeesIDs() (ids []int) {
	for id := range m.attendees {
		ids = append(ids, id)
	}
	return
}

// ResetAttendees resets all changes to the "attendees" edge.
func (m *EventMutation) ResetAttendees() {
	m.attendees = nil
	m.clearedattendees = false
	m.removedattendees = nil
}

// Where appends a list predicates to the EventMutation builder.
func (m *EventMutation) Where(ps ...predicate.Event) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EventMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EventMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Event, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EventMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EventMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Event).
func (m *EventMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EventMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.name != nil {
		fields = append(fields, event.FieldName)
	}
	if m.description != nil {
		fields = append(fields, event.FieldDescription)
	}
	if m.event_slug != nil {
		fields = append(fields, event.FieldEventSlug)
	}
	if m.start_date != nil {
		fields = append(fields, event.FieldStartDate)
	}
	if m.end_date != nil {
		fields = append(fields, event.FieldEndDate)
	}
	if m.date != nil {
		fields = append(fields, event.FieldDate)
	}
	if m.location != nil {
		fields = append(fields, event.FieldLocation)
	}
	if m.image_url != nil {
		fields = append(fields, event.FieldImageURL)
	}
	if m.user != nil {
		fields = append(fields, event.FieldUserID)
	}
	if m.event_hash != nil {
		fields = append(fields, event.FieldEventHash)
	}
	if m.contract_address != nil {
		fields = append(fields, event.FieldContractAddress)
	}
	if m.transaction_hash != nil {
		fields = append(fields, event.FieldTransactionHash)
	}
	if m.block_number != nil {
		fields = append(fields, event.FieldBlockNumber)
	}
	if m.created_at != nil {
		fields = append(fields, event.FieldCreatedAt)
	}
	if m.modified_at != nil {
		fields = append(fields, event.FieldModifiedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EventMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case event.FieldName:
		return m.Name()
	case event.FieldDescription:
		return m.Description()
	case event.FieldEventSlug:
		return m.EventSlug()
	case event.FieldStartDate:
		return m.StartDate()
	case event.FieldEndDate:
		return m.EndDate()
	case event.FieldDate:
		return m.Date()
	case event.FieldLocation:
		return m.Location()
	case event.FieldImageURL:
		return m.ImageURL()
	case event.FieldUserID:
		return m.UserID()
	case event.FieldEventHash:
		return m.EventHash()
	case event.FieldContractAddress:
		return m.ContractAddress()
	case event.FieldTransactionHash:
		return m.TransactionHash()
	case event.FieldBlockNumber:
		return m.BlockNumber()
	case event.FieldCreatedAt:
		return m.CreatedAt()
	case event.FieldModifiedAt:
		return m.ModifiedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EventMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case event.FieldName:
		return m.OldName(ctx)
	case event.FieldDescription:
		return m.OldDescription(ctx)
	case event.FieldEventSlug:
		return m.OldEventSlug(ctx)
	case event.FieldStartDate:
		return m.OldStartDate(ctx)
	case event.FieldEndDate:
		return m.OldEndDate(ctx)
	case event.FieldDate:
		return m.OldDate(ctx)
	case event.FieldLocation:
		return m.OldLocation(ctx)
	case event.FieldImageURL:
		return m.OldImageURL(ctx)
	case event.FieldUserID:
		return m.OldUserID(ctx)
	case event.FieldEventHash:
		return m.OldEventHash(ctx)
	case event.FieldContractAddress:
		return m.OldContractAddress(ctx)
	case event.FieldTransactionHash:
		return m.OldTransactionHash(ctx)
	case event.FieldBlockNumber:
		return m.OldBlockNumber(ctx)
	case event.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case event.FieldModifiedAt:
		return m.OldModifiedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Event field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) SetField(name string, value ent.Value) error {
	switch name {
	case event.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case event.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case event.FieldEventSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventSlug(v)
		return nil
	case event.FieldStartDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartDate(v)
		return nil
	case event.FieldEndDate:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndDate(v)
		return nil
	case event.FieldDate:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDate(v)
		return nil
	case event.FieldLocation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocation(v)
		return nil
	case event.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case event.FieldUserID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case event.FieldEventHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventHash(v)
		return nil
	case event.FieldContractAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContractAddress(v)
		return nil
	case event.FieldTransactionHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionHash(v)
		return nil
	case event.FieldBlockNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockNumber(v)
		return nil
	case event.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case event.FieldModifiedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetModifiedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EventMutation) AddedFields() []string {
	var fields []string
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EventMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EventMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Event numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EventMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(event.FieldDescription) {
		fields = append(fields, event.FieldDescription)
	}
	if m.FieldCleared(event.FieldStartDate) {
		fields = append(fields, event.FieldStartDate)
	}
	if m.FieldCleared(event.FieldEndDate) {
		fields = append(fields, event.FieldEndDate)
	}
	if m.FieldCleared(event.FieldDate) {
		fields = append(fields, event.FieldDate)
	}
	if m.FieldCleared(event.FieldEventHash) {
		fields = append(fields, event.FieldEventHash)
	}
	if m.FieldCleared(event.FieldContractAddress) {
		fields = append(fields, event.FieldContractAddress)
	}
	if m.FieldCleared(event.FieldTransactionHash) {
		fields = append(fields, event.FieldTransactionHash)
	}
	if m.FieldCleared(event.FieldBlockNumber) {
		fields = append(fields, event.FieldBlockNumber)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EventMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EventMutation) ClearField(name string) error {
	switch name {
	case event.FieldDescription:
		m.ClearDescription()
		return nil
	case event.FieldStartDate:
		m.ClearStartDate()
		return nil
	case event.FieldEndDate:
		m.ClearEndDate()
		return nil
	case event.FieldDate:
		m.ClearDate()
		return nil
	case event.FieldEventHash:
		m.ClearEventHash()
		return nil
	case event.FieldContractAddress:
		m.ClearContractAddress()
		return nil
	case event.FieldTransactionHash:
		m.ClearTransactionHash()
		return nil
	case event.FieldBlockNumber:
		m.ClearBlockNumber()
		return nil
	}
	return fmt.Errorf("unknown Event nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EventMutation) ResetField(name string) error {
	switch name {
	case event.FieldName:
		m.ResetName()
		return nil
	case event.FieldDescription:
		m.ResetDescription()
		return nil
	case event.FieldEventSlug:
		m.ResetEventSlug()
		return nil
	case event.FieldStartDate:
		m.ResetStartDate()
		return nil
	case event.FieldEndDate:
		m.ResetEndDate()
		return nil
	case event.FieldDate:
		m.ResetDate()
		return nil
	case event.FieldLocation:
		m.ResetLocation()
		return nil
	case event.FieldImageURL:
		m.ResetImageURL()
		return nil
	case event.FieldUserID:
		m.ResetUserID()
		return nil
	case event.FieldEventHash:
		m.ResetEventHash()
		return nil
	case event.FieldContractAddress:
		m.ResetContractAddress()
		return nil
	case event.FieldTransactionHash:
		m.ResetTransactionHash()
		return nil
	case event.FieldBlockNumber:
		m.ResetBlockNumber()
		return nil
	case event.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case event.FieldModifiedAt:
		m.ResetModifiedAt()
		return nil
	}
	return fmt.Errorf("unknown Event field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EventMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.user != nil {
		edges = append(edges, event.EdgeUser)
	}
	if m.tickets != nil {
		edges = append(edges, event.EdgeTickets)
	}
	if m.attendees != nil {
		edges = append(edges, event.EdgeAttendees)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EventMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case event.EdgeTickets:
		ids := make([]ent.Value, 0, len(m.tickets))
		for id := range m.tickets {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeAttendees:
		ids := make([]ent.Value, 0, len(m.attendees))
		for id := range m.attendees {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EventMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedtickets != nil {
		edges = append(edges, event.EdgeTickets)
	}
	if m.removedattendees != nil {
		edges = append(edges, event.EdgeAttendees)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EventMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case event.EdgeTickets:
		ids := make([]ent.Value, 0, len(m.removedtickets))
		for id := range m.removedtickets {
			ids = append(ids, id)
		}
		return ids
	case event.EdgeAttendees:
		ids := make([]ent.Value, 0, len(m.removedattendees))
		for id := range m.removedattendees {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EventMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.cleareduser {
		edges = append(edges, event.EdgeUser)
	}
	if m.clearedtickets {
		edges = append(edges, event.EdgeTickets)
	}
	if m.clearedattendees {
		edges = append(edges, event.EdgeAttendees)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EventMutation) EdgeCleared(name string) bool {
	switch name {
	case event.EdgeUser:
		return m.cleareduser
	case event.EdgeTickets:
		return m.clearedtickets
	case event.EdgeAttendees:
		return m.clearedattendees
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EventMutation) ClearEdge(name string) error {
	switch name {
	case event.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown Event unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EventMutation) ResetEdge(name string) error {
	switch name {
	case event.EdgeUser:
		m.ResetUser()
		return nil
	case event.EdgeTickets:
		m.ResetTickets()
		return nil
	case event.EdgeAttendees:
		m.ResetAttendees()
		return nil
	}
	return fmt.Errorf("unknown Event edge %s", name)
}

// TicketMutation represents an operation that mutates the Ticket nodes in the graph.
type TicketMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	description      *string
	ticket_slug      *string
	mint_price       *string
	quantity         *int
	addquantity      *int
	ticket_hash      *string
	image_url        *string
	contract_address *string
	transaction_hash *string
	block_number     *string
	created_at       *time.Time
	updated_at       *time.Time
	clearedFields    map[string]struct{}
	event            *int
	clearedevent     bool
	attendees        *int
	clearedattendees bool
	done             bool
	oldValue         func(context.Context) (*Ticket, error)
	predicates       []predicate.Ticket
}

var _ ent.Mutation = (*TicketMutation)(nil)

// ticketOption allows management of the mutation configuration using functional options.
type ticketOption func(*TicketMutation)

// newTicketMutation creates new mutation for the Ticket entity.
func newTicketMutation(c config, op Op, opts ...ticketOption) *TicketMutation {
	m := &TicketMutation{
		config:        c,
		op:            op,
		typ:           TypeTicket,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTicketID sets the ID field of the mutation.
func withTicketID(id int) ticketOption {
	return func(m *TicketMutation) {
		var (
			err   error
			once  sync.Once
			value *Ticket
		)
		m.oldValue = func(ctx context.Context) (*Ticket, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Ticket.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTicket sets the old Ticket of the mutation.
func withTicket(node *Ticket) ticketOption {
	return func(m *TicketMutation) {
		m.oldValue = func(context.Context) (*Ticket, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TicketMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TicketMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TicketMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TicketMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Ticket.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TicketMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TicketMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TicketMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *TicketMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *TicketMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *TicketMutation) ResetDescription() {
	m.description = nil
}

// SetTicketSlug sets the "ticket_slug" field.
func (m *TicketMutation) SetTicketSlug(s string) {
	m.ticket_slug = &s
}

// TicketSlug returns the value of the "ticket_slug" field in the mutation.
func (m *TicketMutation) TicketSlug() (r string, exists bool) {
	v := m.ticket_slug
	if v == nil {
		return
	}
	return *v, true
}

// OldTicketSlug returns the old "ticket_slug" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldTicketSlug(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTicketSlug is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTicketSlug requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTicketSlug: %w", err)
	}
	return oldValue.TicketSlug, nil
}

// ResetTicketSlug resets all changes to the "ticket_slug" field.
func (m *TicketMutation) ResetTicketSlug() {
	m.ticket_slug = nil
}

// SetMintPrice sets the "mint_price" field.
func (m *TicketMutation) SetMintPrice(s string) {
	m.mint_price = &s
}

// MintPrice returns the value of the "mint_price" field in the mutation.
func (m *TicketMutation) MintPrice() (r string, exists bool) {
	v := m.mint_price
	if v == nil {
		return
	}
	return *v, true
}

// OldMintPrice returns the old "mint_price" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldMintPrice(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMintPrice is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMintPrice requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMintPrice: %w", err)
	}
	return oldValue.MintPrice, nil
}

// ResetMintPrice resets all changes to the "mint_price" field.
func (m *TicketMutation) ResetMintPrice() {
	m.mint_price = nil
}

// SetQuantity sets the "quantity" field.
func (m *TicketMutation) SetQuantity(i int) {
	m.quantity = &i
	m.addquantity = nil
}

// Quantity returns the value of the "quantity" field in the mutation.
func (m *TicketMutation) Quantity() (r int, exists bool) {
	v := m.quantity
	if v == nil {
		return
	}
	return *v, true
}

// OldQuantity returns the old "quantity" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldQuantity(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldQuantity is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldQuantity requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldQuantity: %w", err)
	}
	return oldValue.Quantity, nil
}

// AddQuantity adds i to the "quantity" field.
func (m *TicketMutation) AddQuantity(i int) {
	if m.addquantity != nil {
		*m.addquantity += i
	} else {
		m.addquantity = &i
	}
}

// AddedQuantity returns the value that was added to the "quantity" field in this mutation.
func (m *TicketMutation) AddedQuantity() (r int, exists bool) {
	v := m.addquantity
	if v == nil {
		return
	}
	return *v, true
}

// ResetQuantity resets all changes to the "quantity" field.
func (m *TicketMutation) ResetQuantity() {
	m.quantity = nil
	m.addquantity = nil
}

// SetEventID sets the "event_id" field.
func (m *TicketMutation) SetEventID(i int) {
	m.event = &i
}

// EventID returns the value of the "event_id" field in the mutation.
func (m *TicketMutation) EventID() (r int, exists bool) {
	v := m.event
	if v == nil {
		return
	}
	return *v, true
}

// OldEventID returns the old "event_id" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldEventID(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventID: %w", err)
	}
	return oldValue.EventID, nil
}

// ResetEventID resets all changes to the "event_id" field.
func (m *TicketMutation) ResetEventID() {
	m.event = nil
}

// SetTicketHash sets the "ticket_hash" field.
func (m *TicketMutation) SetTicketHash(s string) {
	m.ticket_hash = &s
}

// TicketHash returns the value of the "ticket_hash" field in the mutation.
func (m *TicketMutation) TicketHash() (r string, exists bool) {
	v := m.ticket_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTicketHash returns the old "ticket_hash" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldTicketHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTicketHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTicketHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTicketHash: %w", err)
	}
	return oldValue.TicketHash, nil
}

// ClearTicketHash clears the value of the "ticket_hash" field.
func (m *TicketMutation) ClearTicketHash() {
	m.ticket_hash = nil
	m.clearedFields[ticket.FieldTicketHash] = struct{}{}
}

// TicketHashCleared returns if the "ticket_hash" field was cleared in this mutation.
func (m *TicketMutation) TicketHashCleared() bool {
	_, ok := m.clearedFields[ticket.FieldTicketHash]
	return ok
}

// ResetTicketHash resets all changes to the "ticket_hash" field.
func (m *TicketMutation) ResetTicketHash() {
	m.ticket_hash = nil
	delete(m.clearedFields, ticket.FieldTicketHash)
}

// SetImageURL sets the "image_url" field.
func (m *TicketMutation) SetImageURL(s string) {
	m.image_url = &s
}

// ImageURL returns the value of the "image_url" field in the mutation.
func (m *TicketMutation) ImageURL() (r string, exists bool) {
	v := m.image_url
	if v == nil {
		return
	}
	return *v, true
}

// OldImageURL returns the old "image_url" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldImageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImageURL: %w", err)
	}
	return oldValue.ImageURL, nil
}

// ClearImageURL clears the value of the "image_url" field.
func (m *TicketMutation) ClearImageURL() {
	m.image_url = nil
	m.clearedFields[ticket.FieldImageURL] = struct{}{}
}

// ImageURLCleared returns if the "image_url" field was cleared in this mutation.
func (m *TicketMutation) ImageURLCleared() bool {
	_, ok := m.clearedFields[ticket.FieldImageURL]
	return ok
}

// ResetImageURL resets all changes to the "image_url" field.
func (m *TicketMutation) ResetImageURL() {
	m.image_url = nil
	delete(m.clearedFields, ticket.FieldImageURL)
}

// SetContractAddress sets the "contract_address" field.
func (m *TicketMutation) SetContractAddress(s string) {
	m.contract_address = &s
}

// ContractAddress returns the value of the "contract_address" field in the mutation.
func (m *TicketMutation) ContractAddress() (r string, exists bool) {
	v := m.contract_address
	if v == nil {
		return
	}
	return *v, true
}

// OldContractAddress returns the old "contract_address" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldContractAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldContractAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldContractAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldContractAddress: %w", err)
	}
	return oldValue.ContractAddress, nil
}

// ClearContractAddress clears the value of the "contract_address" field.
func (m *TicketMutation) ClearContractAddress() {
	m.contract_address = nil
	m.clearedFields[ticket.FieldContractAddress] = struct{}{}
}

// ContractAddressCleared returns if the "contract_address" field was cleared in this mutation.
func (m *TicketMutation) ContractAddressCleared() bool {
	_, ok := m.clearedFields[ticket.FieldContractAddress]
	return ok
}

// ResetContractAddress resets all changes to the "contract_address" field.
func (m *TicketMutation) ResetContractAddress() {
	m.contract_address = nil
	delete(m.clearedFields, ticket.FieldContractAddress)
}

// SetTransactionHash sets the "transaction_hash" field.
func (m *TicketMutation) SetTransactionHash(s string) {
	m.transaction_hash = &s
}

// TransactionHash returns the value of the "transaction_hash" field in the mutation.
func (m *TicketMutation) TransactionHash() (r string, exists bool) {
	v := m.transaction_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionHash returns the old "transaction_hash" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldTransactionHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionHash: %w", err)
	}
	return oldValue.TransactionHash, nil
}

// ClearTransactionHash clears the value of the "transaction_hash" field.
func (m *TicketMutation) ClearTransactionHash() {
	m.transaction_hash = nil
	m.clearedFields[ticket.FieldTransactionHash] = struct{}{}
}

// TransactionHashCleared returns if the "transaction_hash" field was cleared in this mutation.
func (m *TicketMutation) TransactionHashCleared() bool {
	_, ok := m.clearedFields[ticket.FieldTransactionHash]
	return ok
}

// ResetTransactionHash resets all changes to the "transaction_hash" field.
func (m *TicketMutation) ResetTransactionHash() {
	m.transaction_hash = nil
	delete(m.clearedFields, ticket.FieldTransactionHash)
}

// SetBlockNumber sets the "block_number" field.
func (m *TicketMutation) SetBlockNumber(s string) {
	m.block_number = &s
}

// BlockNumber returns the value of the "block_number" field in the mutation.
func (m *TicketMutation) BlockNumber() (r string, exists bool) {
	v := m.block_number
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockNumber returns the old "block_number" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldBlockNumber(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlockNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlockNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockNumber: %w", err)
	}
	return oldValue.BlockNumber, nil
}

// ClearBlockNumber clears the value of the "block_number" field.
func (m *TicketMutation) ClearBlockNumber() {
	m.block_number = nil
	m.clearedFields[ticket.FieldBlockNumber] = struct{}{}
}

// BlockNumberCleared returns if the "block_number" field was cleared in this mutation.
func (m *TicketMutation) BlockNumberCleared() bool {
	_, ok := m.clearedFields[ticket.FieldBlockNumber]
	return ok
}

// ResetBlockNumber resets all changes to the "block_number" field.
func (m *TicketMutation) ResetBlockNumber() {
	m.block_number = nil
	delete(m.clearedFields, ticket.FieldBlockNumber)
}

// SetCreatedAt sets the "created_at" field.
func (m *TicketMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *TicketMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *TicketMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *TicketMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *TicketMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Ticket entity.
// If the Ticket object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TicketMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *TicketMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// ClearEvent clears the "event" edge to the Event entity.
func (m *TicketMutation) ClearEvent() {
	m.clearedevent = true
	m.clearedFields[ticket.FieldEventID] = struct{}{}
}

// EventCleared reports if the "event" edge to the Event entity was cleared.
func (m *TicketMutation) EventCleared() bool {
	return m.clearedevent
}

// EventIDs returns the "event" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// EventID instead. It exists only for internal usage by the builders.
func (m *TicketMutation) EventIDs() (ids []int) {
	if id := m.event; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetEvent resets all changes to the "event" edge.
func (m *TicketMutation) ResetEvent() {
	m.event = nil
	m.clearedevent = false
}

// SetAttendeesID sets the "attendees" edge to the Attendee entity by id.
func (m *TicketMutation) SetAttendeesID(id int) {
	m.attendees = &id
}

// ClearAttendees clears the "attendees" edge to the Attendee entity.
func (m *TicketMutation) ClearAttendees() {
	m.clearedattendees = true
}

// AttendeesCleared reports if the "attendees" edge to the Attendee entity was cleared.
func (m *TicketMutation) AttendeesCleared() bool {
	return m.clearedattendees
}

// AttendeesID returns the "attendees" edge ID in the mutation.
func (m *TicketMutation) AttendeesID() (id int, exists bool) {
	if m.attendees != nil {
		return *m.attendees, true
	}
	return
}

// AttendeesIDs returns the "attendees" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AttendeesID instead. It exists only for internal usage by the builders.
func (m *TicketMutation) AttendeesIDs() (ids []int) {
	if id := m.attendees; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAttendees resets all changes to the "attendees" edge.
func (m *TicketMutation) ResetAttendees() {
	m.attendees = nil
	m.clearedattendees = false
}

// Where appends a list predicates to the TicketMutation builder.
func (m *TicketMutation) Where(ps ...predicate.Ticket) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TicketMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TicketMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Ticket, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TicketMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TicketMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Ticket).
func (m *TicketMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TicketMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.name != nil {
		fields = append(fields, ticket.FieldName)
	}
	if m.description != nil {
		fields = append(fields, ticket.FieldDescription)
	}
	if m.ticket_slug != nil {
		fields = append(fields, ticket.FieldTicketSlug)
	}
	if m.mint_price != nil {
		fields = append(fields, ticket.FieldMintPrice)
	}
	if m.quantity != nil {
		fields = append(fields, ticket.FieldQuantity)
	}
	if m.event != nil {
		fields = append(fields, ticket.FieldEventID)
	}
	if m.ticket_hash != nil {
		fields = append(fields, ticket.FieldTicketHash)
	}
	if m.image_url != nil {
		fields = append(fields, ticket.FieldImageURL)
	}
	if m.contract_address != nil {
		fields = append(fields, ticket.FieldContractAddress)
	}
	if m.transaction_hash != nil {
		fields = append(fields, ticket.FieldTransactionHash)
	}
	if m.block_number != nil {
		fields = append(fields, ticket.FieldBlockNumber)
	}
	if m.created_at != nil {
		fields = append(fields, ticket.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, ticket.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TicketMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ticket.FieldName:
		return m.Name()
	case ticket.FieldDescription:
		return m.Description()
	case ticket.FieldTicketSlug:
		return m.TicketSlug()
	case ticket.FieldMintPrice:
		return m.MintPrice()
	case ticket.FieldQuantity:
		return m.Quantity()
	case ticket.FieldEventID:
		return m.EventID()
	case ticket.FieldTicketHash:
		return m.TicketHash()
	case ticket.FieldImageURL:
		return m.ImageURL()
	case ticket.FieldContractAddress:
		return m.ContractAddress()
	case ticket.FieldTransactionHash:
		return m.TransactionHash()
	case ticket.FieldBlockNumber:
		return m.BlockNumber()
	case ticket.FieldCreatedAt:
		return m.CreatedAt()
	case ticket.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TicketMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ticket.FieldName:
		return m.OldName(ctx)
	case ticket.FieldDescription:
		return m.OldDescription(ctx)
	case ticket.FieldTicketSlug:
		return m.OldTicketSlug(ctx)
	case ticket.FieldMintPrice:
		return m.OldMintPrice(ctx)
	case ticket.FieldQuantity:
		return m.OldQuantity(ctx)
	case ticket.FieldEventID:
		return m.OldEventID(ctx)
	case ticket.FieldTicketHash:
		return m.OldTicketHash(ctx)
	case ticket.FieldImageURL:
		return m.OldImageURL(ctx)
	case ticket.FieldContractAddress:
		return m.OldContractAddress(ctx)
	case ticket.FieldTransactionHash:
		return m.OldTransactionHash(ctx)
	case ticket.FieldBlockNumber:
		return m.OldBlockNumber(ctx)
	case ticket.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case ticket.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Ticket field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ticket.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case ticket.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case ticket.FieldTicketSlug:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTicketSlug(v)
		return nil
	case ticket.FieldMintPrice:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMintPrice(v)
		return nil
	case ticket.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetQuantity(v)
		return nil
	case ticket.FieldEventID:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventID(v)
		return nil
	case ticket.FieldTicketHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTicketHash(v)
		return nil
	case ticket.FieldImageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImageURL(v)
		return nil
	case ticket.FieldContractAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetContractAddress(v)
		return nil
	case ticket.FieldTransactionHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionHash(v)
		return nil
	case ticket.FieldBlockNumber:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockNumber(v)
		return nil
	case ticket.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case ticket.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Ticket field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TicketMutation) AddedFields() []string {
	var fields []string
	if m.addquantity != nil {
		fields = append(fields, ticket.FieldQuantity)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TicketMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case ticket.FieldQuantity:
		return m.AddedQuantity()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TicketMutation) AddField(name string, value ent.Value) error {
	switch name {
	case ticket.FieldQuantity:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddQuantity(v)
		return nil
	}
	return fmt.Errorf("unknown Ticket numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TicketMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ticket.FieldTicketHash) {
		fields = append(fields, ticket.FieldTicketHash)
	}
	if m.FieldCleared(ticket.FieldImageURL) {
		fields = append(fields, ticket.FieldImageURL)
	}
	if m.FieldCleared(ticket.FieldContractAddress) {
		fields = append(fields, ticket.FieldContractAddress)
	}
	if m.FieldCleared(ticket.FieldTransactionHash) {
		fields = append(fields, ticket.FieldTransactionHash)
	}
	if m.FieldCleared(ticket.FieldBlockNumber) {
		fields = append(fields, ticket.FieldBlockNumber)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TicketMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TicketMutation) ClearField(name string) error {
	switch name {
	case ticket.FieldTicketHash:
		m.ClearTicketHash()
		return nil
	case ticket.FieldImageURL:
		m.ClearImageURL()
		return nil
	case ticket.FieldContractAddress:
		m.ClearContractAddress()
		return nil
	case ticket.FieldTransactionHash:
		m.ClearTransactionHash()
		return nil
	case ticket.FieldBlockNumber:
		m.ClearBlockNumber()
		return nil
	}
	return fmt.Errorf("unknown Ticket nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TicketMutation) ResetField(name string) error {
	switch name {
	case ticket.FieldName:
		m.ResetName()
		return nil
	case ticket.FieldDescription:
		m.ResetDescription()
		return nil
	case ticket.FieldTicketSlug:
		m.ResetTicketSlug()
		return nil
	case ticket.FieldMintPrice:
		m.ResetMintPrice()
		return nil
	case ticket.FieldQuantity:
		m.ResetQuantity()
		return nil
	case ticket.FieldEventID:
		m.ResetEventID()
		return nil
	case ticket.FieldTicketHash:
		m.ResetTicketHash()
		return nil
	case ticket.FieldImageURL:
		m.ResetImageURL()
		return nil
	case ticket.FieldContractAddress:
		m.ResetContractAddress()
		return nil
	case ticket.FieldTransactionHash:
		m.ResetTransactionHash()
		return nil
	case ticket.FieldBlockNumber:
		m.ResetBlockNumber()
		return nil
	case ticket.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case ticket.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Ticket field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TicketMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.event != nil {
		edges = append(edges, ticket.EdgeEvent)
	}
	if m.attendees != nil {
		edges = append(edges, ticket.EdgeAttendees)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TicketMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case ticket.EdgeEvent:
		if id := m.event; id != nil {
			return []ent.Value{*id}
		}
	case ticket.EdgeAttendees:
		if id := m.attendees; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TicketMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TicketMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TicketMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedevent {
		edges = append(edges, ticket.EdgeEvent)
	}
	if m.clearedattendees {
		edges = append(edges, ticket.EdgeAttendees)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TicketMutation) EdgeCleared(name string) bool {
	switch name {
	case ticket.EdgeEvent:
		return m.clearedevent
	case ticket.EdgeAttendees:
		return m.clearedattendees
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TicketMutation) ClearEdge(name string) error {
	switch name {
	case ticket.EdgeEvent:
		m.ClearEvent()
		return nil
	case ticket.EdgeAttendees:
		m.ClearAttendees()
		return nil
	}
	return fmt.Errorf("unknown Ticket unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TicketMutation) ResetEdge(name string) error {
	switch name {
	case ticket.EdgeEvent:
		m.ResetEvent()
		return nil
	case ticket.EdgeAttendees:
		m.ResetAttendees()
		return nil
	}
	return fmt.Errorf("unknown Ticket edge %s", name)
}

// TransactionMutation represents an operation that mutates the Transaction nodes in the graph.
type TransactionMutation struct {
	config
	op               Op
	typ              string
	id               *int
	event_type       *string
	wallet_address   *string
	transaction_hash *string
	block_number     *int64
	addblock_number  *int64
	clearedFields    map[string]struct{}
	done             bool
	oldValue         func(context.Context) (*Transaction, error)
	predicates       []predicate.Transaction
}

var _ ent.Mutation = (*TransactionMutation)(nil)

// transactionOption allows management of the mutation configuration using functional options.
type transactionOption func(*TransactionMutation)

// newTransactionMutation creates new mutation for the Transaction entity.
func newTransactionMutation(c config, op Op, opts ...transactionOption) *TransactionMutation {
	m := &TransactionMutation{
		config:        c,
		op:            op,
		typ:           TypeTransaction,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTransactionID sets the ID field of the mutation.
func withTransactionID(id int) transactionOption {
	return func(m *TransactionMutation) {
		var (
			err   error
			once  sync.Once
			value *Transaction
		)
		m.oldValue = func(ctx context.Context) (*Transaction, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Transaction.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTransaction sets the old Transaction of the mutation.
func withTransaction(node *Transaction) transactionOption {
	return func(m *TransactionMutation) {
		m.oldValue = func(context.Context) (*Transaction, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TransactionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TransactionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TransactionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TransactionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Transaction.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetEventType sets the "event_type" field.
func (m *TransactionMutation) SetEventType(s string) {
	m.event_type = &s
}

// EventType returns the value of the "event_type" field in the mutation.
func (m *TransactionMutation) EventType() (r string, exists bool) {
	v := m.event_type
	if v == nil {
		return
	}
	return *v, true
}

// OldEventType returns the old "event_type" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldEventType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventType: %w", err)
	}
	return oldValue.EventType, nil
}

// ResetEventType resets all changes to the "event_type" field.
func (m *TransactionMutation) ResetEventType() {
	m.event_type = nil
}

// SetWalletAddress sets the "wallet_address" field.
func (m *TransactionMutation) SetWalletAddress(s string) {
	m.wallet_address = &s
}

// WalletAddress returns the value of the "wallet_address" field in the mutation.
func (m *TransactionMutation) WalletAddress() (r string, exists bool) {
	v := m.wallet_address
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletAddress returns the old "wallet_address" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldWalletAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletAddress: %w", err)
	}
	return oldValue.WalletAddress, nil
}

// ResetWalletAddress resets all changes to the "wallet_address" field.
func (m *TransactionMutation) ResetWalletAddress() {
	m.wallet_address = nil
}

// SetTransactionHash sets the "transaction_hash" field.
func (m *TransactionMutation) SetTransactionHash(s string) {
	m.transaction_hash = &s
}

// TransactionHash returns the value of the "transaction_hash" field in the mutation.
func (m *TransactionMutation) TransactionHash() (r string, exists bool) {
	v := m.transaction_hash
	if v == nil {
		return
	}
	return *v, true
}

// OldTransactionHash returns the old "transaction_hash" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldTransactionHash(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransactionHash is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransactionHash requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransactionHash: %w", err)
	}
	return oldValue.TransactionHash, nil
}

// ResetTransactionHash resets all changes to the "transaction_hash" field.
func (m *TransactionMutation) ResetTransactionHash() {
	m.transaction_hash = nil
}

// SetBlockNumber sets the "block_number" field.
func (m *TransactionMutation) SetBlockNumber(i int64) {
	m.block_number = &i
	m.addblock_number = nil
}

// BlockNumber returns the value of the "block_number" field in the mutation.
func (m *TransactionMutation) BlockNumber() (r int64, exists bool) {
	v := m.block_number
	if v == nil {
		return
	}
	return *v, true
}

// OldBlockNumber returns the old "block_number" field's value of the Transaction entity.
// If the Transaction object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TransactionMutation) OldBlockNumber(ctx context.Context) (v int64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBlockNumber is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBlockNumber requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBlockNumber: %w", err)
	}
	return oldValue.BlockNumber, nil
}

// AddBlockNumber adds i to the "block_number" field.
func (m *TransactionMutation) AddBlockNumber(i int64) {
	if m.addblock_number != nil {
		*m.addblock_number += i
	} else {
		m.addblock_number = &i
	}
}

// AddedBlockNumber returns the value that was added to the "block_number" field in this mutation.
func (m *TransactionMutation) AddedBlockNumber() (r int64, exists bool) {
	v := m.addblock_number
	if v == nil {
		return
	}
	return *v, true
}

// ResetBlockNumber resets all changes to the "block_number" field.
func (m *TransactionMutation) ResetBlockNumber() {
	m.block_number = nil
	m.addblock_number = nil
}

// Where appends a list predicates to the TransactionMutation builder.
func (m *TransactionMutation) Where(ps ...predicate.Transaction) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the TransactionMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *TransactionMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Transaction, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *TransactionMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *TransactionMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Transaction).
func (m *TransactionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TransactionMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.event_type != nil {
		fields = append(fields, transaction.FieldEventType)
	}
	if m.wallet_address != nil {
		fields = append(fields, transaction.FieldWalletAddress)
	}
	if m.transaction_hash != nil {
		fields = append(fields, transaction.FieldTransactionHash)
	}
	if m.block_number != nil {
		fields = append(fields, transaction.FieldBlockNumber)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TransactionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldEventType:
		return m.EventType()
	case transaction.FieldWalletAddress:
		return m.WalletAddress()
	case transaction.FieldTransactionHash:
		return m.TransactionHash()
	case transaction.FieldBlockNumber:
		return m.BlockNumber()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TransactionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case transaction.FieldEventType:
		return m.OldEventType(ctx)
	case transaction.FieldWalletAddress:
		return m.OldWalletAddress(ctx)
	case transaction.FieldTransactionHash:
		return m.OldTransactionHash(ctx)
	case transaction.FieldBlockNumber:
		return m.OldBlockNumber(ctx)
	}
	return nil, fmt.Errorf("unknown Transaction field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldEventType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventType(v)
		return nil
	case transaction.FieldWalletAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletAddress(v)
		return nil
	case transaction.FieldTransactionHash:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransactionHash(v)
		return nil
	case transaction.FieldBlockNumber:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBlockNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TransactionMutation) AddedFields() []string {
	var fields []string
	if m.addblock_number != nil {
		fields = append(fields, transaction.FieldBlockNumber)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TransactionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case transaction.FieldBlockNumber:
		return m.AddedBlockNumber()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TransactionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case transaction.FieldBlockNumber:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddBlockNumber(v)
		return nil
	}
	return fmt.Errorf("unknown Transaction numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TransactionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TransactionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TransactionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Transaction nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TransactionMutation) ResetField(name string) error {
	switch name {
	case transaction.FieldEventType:
		m.ResetEventType()
		return nil
	case transaction.FieldWalletAddress:
		m.ResetWalletAddress()
		return nil
	case transaction.FieldTransactionHash:
		m.ResetTransactionHash()
		return nil
	case transaction.FieldBlockNumber:
		m.ResetBlockNumber()
		return nil
	}
	return fmt.Errorf("unknown Transaction field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TransactionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TransactionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TransactionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TransactionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TransactionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TransactionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TransactionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Transaction unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TransactionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Transaction edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                      Op
	typ                     string
	id                      *int
	wallet_address          *string
	bio                     *string
	display_name            *string
	created_at              *time.Time
	updated_at              *time.Time
	clearedFields           map[string]struct{}
	events                  map[int]struct{}
	removedevents           map[int]struct{}
	clearedevents           bool
	attendee_tickets        map[int]struct{}
	removedattendee_tickets map[int]struct{}
	clearedattendee_tickets bool
	done                    bool
	oldValue                func(context.Context) (*User, error)
	predicates              []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetWalletAddress sets the "wallet_address" field.
func (m *UserMutation) SetWalletAddress(s string) {
	m.wallet_address = &s
}

// WalletAddress returns the value of the "wallet_address" field in the mutation.
func (m *UserMutation) WalletAddress() (r string, exists bool) {
	v := m.wallet_address
	if v == nil {
		return
	}
	return *v, true
}

// OldWalletAddress returns the old "wallet_address" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWalletAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWalletAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWalletAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWalletAddress: %w", err)
	}
	return oldValue.WalletAddress, nil
}

// ResetWalletAddress resets all changes to the "wallet_address" field.
func (m *UserMutation) ResetWalletAddress() {
	m.wallet_address = nil
}

// SetBio sets the "bio" field.
func (m *UserMutation) SetBio(s string) {
	m.bio = &s
}

// Bio returns the value of the "bio" field in the mutation.
func (m *UserMutation) Bio() (r string, exists bool) {
	v := m.bio
	if v == nil {
		return
	}
	return *v, true
}

// OldBio returns the old "bio" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldBio(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBio is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBio requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBio: %w", err)
	}
	return oldValue.Bio, nil
}

// ResetBio resets all changes to the "bio" field.
func (m *UserMutation) ResetBio() {
	m.bio = nil
}

// SetDisplayName sets the "display_name" field.
func (m *UserMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *UserMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ClearDisplayName clears the value of the "display_name" field.
func (m *UserMutation) ClearDisplayName() {
	m.display_name = nil
	m.clearedFields[user.FieldDisplayName] = struct{}{}
}

// DisplayNameCleared returns if the "display_name" field was cleared in this mutation.
func (m *UserMutation) DisplayNameCleared() bool {
	_, ok := m.clearedFields[user.FieldDisplayName]
	return ok
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *UserMutation) ResetDisplayName() {
	m.display_name = nil
	delete(m.clearedFields, user.FieldDisplayName)
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// AddEventIDs adds the "events" edge to the Event entity by ids.
func (m *UserMutation) AddEventIDs(ids ...int) {
	if m.events == nil {
		m.events = make(map[int]struct{})
	}
	for i := range ids {
		m.events[ids[i]] = struct{}{}
	}
}

// ClearEvents clears the "events" edge to the Event entity.
func (m *UserMutation) ClearEvents() {
	m.clearedevents = true
}

// EventsCleared reports if the "events" edge to the Event entity was cleared.
func (m *UserMutation) EventsCleared() bool {
	return m.clearedevents
}

// RemoveEventIDs removes the "events" edge to the Event entity by IDs.
func (m *UserMutation) RemoveEventIDs(ids ...int) {
	if m.removedevents == nil {
		m.removedevents = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.events, ids[i])
		m.removedevents[ids[i]] = struct{}{}
	}
}

// RemovedEvents returns the removed IDs of the "events" edge to the Event entity.
func (m *UserMutation) RemovedEventsIDs() (ids []int) {
	for id := range m.removedevents {
		ids = append(ids, id)
	}
	return
}

// EventsIDs returns the "events" edge IDs in the mutation.
func (m *UserMutation) EventsIDs() (ids []int) {
	for id := range m.events {
		ids = append(ids, id)
	}
	return
}

// ResetEvents resets all changes to the "events" edge.
func (m *UserMutation) ResetEvents() {
	m.events = nil
	m.clearedevents = false
	m.removedevents = nil
}

// AddAttendeeTicketIDs adds the "attendee_tickets" edge to the Attendee entity by ids.
func (m *UserMutation) AddAttendeeTicketIDs(ids ...int) {
	if m.attendee_tickets == nil {
		m.attendee_tickets = make(map[int]struct{})
	}
	for i := range ids {
		m.attendee_tickets[ids[i]] = struct{}{}
	}
}

// ClearAttendeeTickets clears the "attendee_tickets" edge to the Attendee entity.
func (m *UserMutation) ClearAttendeeTickets() {
	m.clearedattendee_tickets = true
}

// AttendeeTicketsCleared reports if the "attendee_tickets" edge to the Attendee entity was cleared.
func (m *UserMutation) AttendeeTicketsCleared() bool {
	return m.clearedattendee_tickets
}

// RemoveAttendeeTicketIDs removes the "attendee_tickets" edge to the Attendee entity by IDs.
func (m *UserMutation) RemoveAttendeeTicketIDs(ids ...int) {
	if m.removedattendee_tickets == nil {
		m.removedattendee_tickets = make(map[int]struct{})
	}
	for i := range ids {
		delete(m.attendee_tickets, ids[i])
		m.removedattendee_tickets[ids[i]] = struct{}{}
	}
}

// RemovedAttendeeTickets returns the removed IDs of the "attendee_tickets" edge to the Attendee entity.
func (m *UserMutation) RemovedAttendeeTicketsIDs() (ids []int) {
	for id := range m.removedattendee_tickets {
		ids = append(ids, id)
	}
	return
}

// AttendeeTicketsIDs returns the "attendee_tickets" edge IDs in the mutation.
func (m *UserMutation) AttendeeTicketsIDs() (ids []int) {
	for id := range m.attendee_tickets {
		ids = append(ids, id)
	}
	return
}

// ResetAttendeeTickets resets all changes to the "attendee_tickets" edge.
func (m *UserMutation) ResetAttendeeTickets() {
	m.attendee_tickets = nil
	m.clearedattendee_tickets = false
	m.removedattendee_tickets = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.wallet_address != nil {
		fields = append(fields, user.FieldWalletAddress)
	}
	if m.bio != nil {
		fields = append(fields, user.FieldBio)
	}
	if m.display_name != nil {
		fields = append(fields, user.FieldDisplayName)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldWalletAddress:
		return m.WalletAddress()
	case user.FieldBio:
		return m.Bio()
	case user.FieldDisplayName:
		return m.DisplayName()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldWalletAddress:
		return m.OldWalletAddress(ctx)
	case user.FieldBio:
		return m.OldBio(ctx)
	case user.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldWalletAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWalletAddress(v)
		return nil
	case user.FieldBio:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBio(v)
		return nil
	case user.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldDisplayName) {
		fields = append(fields, user.FieldDisplayName)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldDisplayName:
		m.ClearDisplayName()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldWalletAddress:
		m.ResetWalletAddress()
		return nil
	case user.FieldBio:
		m.ResetBio()
		return nil
	case user.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.events != nil {
		edges = append(edges, user.EdgeEvents)
	}
	if m.attendee_tickets != nil {
		edges = append(edges, user.EdgeAttendeeTickets)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeEvents:
		ids := make([]ent.Value, 0, len(m.events))
		for id := range m.events {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAttendeeTickets:
		ids := make([]ent.Value, 0, len(m.attendee_tickets))
		for id := range m.attendee_tickets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedevents != nil {
		edges = append(edges, user.EdgeEvents)
	}
	if m.removedattendee_tickets != nil {
		edges = append(edges, user.EdgeAttendeeTickets)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeEvents:
		ids := make([]ent.Value, 0, len(m.removedevents))
		for id := range m.removedevents {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeAttendeeTickets:
		ids := make([]ent.Value, 0, len(m.removedattendee_tickets))
		for id := range m.removedattendee_tickets {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedevents {
		edges = append(edges, user.EdgeEvents)
	}
	if m.clearedattendee_tickets {
		edges = append(edges, user.EdgeAttendeeTickets)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeEvents:
		return m.clearedevents
	case user.EdgeAttendeeTickets:
		return m.clearedattendee_tickets
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeEvents:
		m.ResetEvents()
		return nil
	case user.EdgeAttendeeTickets:
		m.ResetAttendeeTickets()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
