// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/pragma-collective/archpass/ent/event"
	"github.com/pragma-collective/archpass/ent/order"
	"github.com/pragma-collective/archpass/ent/predicate"
	"github.com/pragma-collective/archpass/ent/ticket"
)

// OrderUpdate is the builder for updating Order entities.
type OrderUpdate struct {
	config
	hooks    []Hook
	mutation *OrderMutation
}

// Where appends a list predicates to the OrderUpdate builder.
func (ou *OrderUpdate) Where(ps ...predicate.Order) *OrderUpdate {
	ou.mutation.Where(ps...)
	return ou
}

// SetTicketID sets the "ticket_id" field.
func (ou *OrderUpdate) SetTicketID(i int) *OrderUpdate {
	ou.mutation.SetTicketID(i)
	return ou
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTicketID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetTicketID(*i)
	}
	return ou
}

// SetEventID sets the "event_id" field.
func (ou *OrderUpdate) SetEventID(i int) *OrderUpdate {
	ou.mutation.SetEventID(i)
	return ou
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableEventID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetEventID(*i)
	}
	return ou
}

// SetWalletAddress sets the "wallet_address" field.
func (ou *OrderUpdate) SetWalletAddress(s string) *OrderUpdate {
	ou.mutation.SetWalletAddress(s)
	return ou
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableWalletAddress(s *string) *OrderUpdate {
	if s != nil {
		ou.SetWalletAddress(*s)
	}
	return ou
}

// SetPriceInCents sets the "price_in_cents" field.
func (ou *OrderUpdate) SetPriceInCents(i int64) *OrderUpdate {
	ou.mutation.ResetPriceInCents()
	ou.mutation.SetPriceInCents(i)
	return ou
}

// SetNillablePriceInCents sets the "price_in_cents" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePriceInCents(i *int64) *OrderUpdate {
	if i != nil {
		ou.SetPriceInCents(*i)
	}
	return ou
}

// AddPriceInCents adds i to the "price_in_cents" field.
func (ou *OrderUpdate) AddPriceInCents(i int64) *OrderUpdate {
	ou.mutation.AddPriceInCents(i)
	return ou
}

// SetCcCheckoutID sets the "cc_checkout_id" field.
func (ou *OrderUpdate) SetCcCheckoutID(u uuid.UUID) *OrderUpdate {
	ou.mutation.SetCcCheckoutID(u)
	return ou
}

// SetNillableCcCheckoutID sets the "cc_checkout_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCcCheckoutID(u *uuid.UUID) *OrderUpdate {
	if u != nil {
		ou.SetCcCheckoutID(*u)
	}
	return ou
}

// SetCreatedAt sets the "created_at" field.
func (ou *OrderUpdate) SetCreatedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetCreatedAt(t)
	return ou
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableCreatedAt(t *time.Time) *OrderUpdate {
	if t != nil {
		ou.SetCreatedAt(*t)
	}
	return ou
}

// SetModifiedAt sets the "modified_at" field.
func (ou *OrderUpdate) SetModifiedAt(t time.Time) *OrderUpdate {
	ou.mutation.SetModifiedAt(t)
	return ou
}

// SetPaymentReference sets the "payment_reference" field.
func (ou *OrderUpdate) SetPaymentReference(s string) *OrderUpdate {
	ou.mutation.SetPaymentReference(s)
	return ou
}

// SetNillablePaymentReference sets the "payment_reference" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentReference(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPaymentReference(*s)
	}
	return ou
}

// ClearPaymentReference clears the value of the "payment_reference" field.
func (ou *OrderUpdate) ClearPaymentReference() *OrderUpdate {
	ou.mutation.ClearPaymentReference()
	return ou
}

// SetPaymentWalletAddress sets the "payment_wallet_address" field.
func (ou *OrderUpdate) SetPaymentWalletAddress(s string) *OrderUpdate {
	ou.mutation.SetPaymentWalletAddress(s)
	return ou
}

// SetNillablePaymentWalletAddress sets the "payment_wallet_address" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentWalletAddress(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPaymentWalletAddress(*s)
	}
	return ou
}

// ClearPaymentWalletAddress clears the value of the "payment_wallet_address" field.
func (ou *OrderUpdate) ClearPaymentWalletAddress() *OrderUpdate {
	ou.mutation.ClearPaymentWalletAddress()
	return ou
}

// SetPaymentTransactionHash sets the "payment_transaction_hash" field.
func (ou *OrderUpdate) SetPaymentTransactionHash(s string) *OrderUpdate {
	ou.mutation.SetPaymentTransactionHash(s)
	return ou
}

// SetNillablePaymentTransactionHash sets the "payment_transaction_hash" field if the given value is not nil.
func (ou *OrderUpdate) SetNillablePaymentTransactionHash(s *string) *OrderUpdate {
	if s != nil {
		ou.SetPaymentTransactionHash(*s)
	}
	return ou
}

// ClearPaymentTransactionHash clears the value of the "payment_transaction_hash" field.
func (ou *OrderUpdate) ClearPaymentTransactionHash() *OrderUpdate {
	ou.mutation.ClearPaymentTransactionHash()
	return ou
}

// SetTokenID sets the "token_id" field.
func (ou *OrderUpdate) SetTokenID(i int) *OrderUpdate {
	ou.mutation.ResetTokenID()
	ou.mutation.SetTokenID(i)
	return ou
}

// SetNillableTokenID sets the "token_id" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTokenID(i *int) *OrderUpdate {
	if i != nil {
		ou.SetTokenID(*i)
	}
	return ou
}

// AddTokenID adds i to the "token_id" field.
func (ou *OrderUpdate) AddTokenID(i int) *OrderUpdate {
	ou.mutation.AddTokenID(i)
	return ou
}

// ClearTokenID clears the value of the "token_id" field.
func (ou *OrderUpdate) ClearTokenID() *OrderUpdate {
	ou.mutation.ClearTokenID()
	return ou
}

// SetMintTransactionHash sets the "mint_transaction_hash" field.
func (ou *OrderUpdate) SetMintTransactionHash(s string) *OrderUpdate {
	ou.mutation.SetMintTransactionHash(s)
	return ou
}

// SetNillableMintTransactionHash sets the "mint_transaction_hash" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableMintTransactionHash(s *string) *OrderUpdate {
	if s != nil {
		ou.SetMintTransactionHash(*s)
	}
	return ou
}

// ClearMintTransactionHash clears the value of the "mint_transaction_hash" field.
func (ou *OrderUpdate) ClearMintTransactionHash() *OrderUpdate {
	ou.mutation.ClearMintTransactionHash()
	return ou
}

// SetTransferTransactionHash sets the "transfer_transaction_hash" field.
func (ou *OrderUpdate) SetTransferTransactionHash(s string) *OrderUpdate {
	ou.mutation.SetTransferTransactionHash(s)
	return ou
}

// SetNillableTransferTransactionHash sets the "transfer_transaction_hash" field if the given value is not nil.
func (ou *OrderUpdate) SetNillableTransferTransactionHash(s *string) *OrderUpdate {
	if s != nil {
		ou.SetTransferTransactionHash(*s)
	}
	return ou
}

// ClearTransferTransactionHash clears the value of the "transfer_transaction_hash" field.
func (ou *OrderUpdate) ClearTransferTransactionHash() *OrderUpdate {
	ou.mutation.ClearTransferTransactionHash()
	return ou
}

// SetEvent sets the "event" edge to the Event entity.
func (ou *OrderUpdate) SetEvent(e *Event) *OrderUpdate {
	return ou.SetEventID(e.ID)
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (ou *OrderUpdate) SetTicket(t *Ticket) *OrderUpdate {
	return ou.SetTicketID(t.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ou *OrderUpdate) Mutation() *OrderMutation {
	return ou.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (ou *OrderUpdate) ClearEvent() *OrderUpdate {
	ou.mutation.ClearEvent()
	return ou
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (ou *OrderUpdate) ClearTicket() *OrderUpdate {
	ou.mutation.ClearTicket()
	return ou
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ou *OrderUpdate) Save(ctx context.Context) (int, error) {
	ou.defaults()
	return withHooks(ctx, ou.sqlSave, ou.mutation, ou.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ou *OrderUpdate) SaveX(ctx context.Context) int {
	affected, err := ou.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ou *OrderUpdate) Exec(ctx context.Context) error {
	_, err := ou.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ou *OrderUpdate) ExecX(ctx context.Context) {
	if err := ou.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ou *OrderUpdate) defaults() {
	if _, ok := ou.mutation.ModifiedAt(); !ok {
		v := order.UpdateDefaultModifiedAt()
		ou.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ou *OrderUpdate) check() error {
	if ou.mutation.EventCleared() && len(ou.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.event"`)
	}
	if ou.mutation.TicketCleared() && len(ou.mutation.TicketIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.ticket"`)
	}
	return nil
}

func (ou *OrderUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ou.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	if ps := ou.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ou.mutation.WalletAddress(); ok {
		_spec.SetField(order.FieldWalletAddress, field.TypeString, value)
	}
	if value, ok := ou.mutation.PriceInCents(); ok {
		_spec.SetField(order.FieldPriceInCents, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.AddedPriceInCents(); ok {
		_spec.AddField(order.FieldPriceInCents, field.TypeInt64, value)
	}
	if value, ok := ou.mutation.CcCheckoutID(); ok {
		_spec.SetField(order.FieldCcCheckoutID, field.TypeUUID, value)
	}
	if value, ok := ou.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.ModifiedAt(); ok {
		_spec.SetField(order.FieldModifiedAt, field.TypeTime, value)
	}
	if value, ok := ou.mutation.PaymentReference(); ok {
		_spec.SetField(order.FieldPaymentReference, field.TypeString, value)
	}
	if ou.mutation.PaymentReferenceCleared() {
		_spec.ClearField(order.FieldPaymentReference, field.TypeString)
	}
	if value, ok := ou.mutation.PaymentWalletAddress(); ok {
		_spec.SetField(order.FieldPaymentWalletAddress, field.TypeString, value)
	}
	if ou.mutation.PaymentWalletAddressCleared() {
		_spec.ClearField(order.FieldPaymentWalletAddress, field.TypeString)
	}
	if value, ok := ou.mutation.PaymentTransactionHash(); ok {
		_spec.SetField(order.FieldPaymentTransactionHash, field.TypeString, value)
	}
	if ou.mutation.PaymentTransactionHashCleared() {
		_spec.ClearField(order.FieldPaymentTransactionHash, field.TypeString)
	}
	if value, ok := ou.mutation.TokenID(); ok {
		_spec.SetField(order.FieldTokenID, field.TypeInt, value)
	}
	if value, ok := ou.mutation.AddedTokenID(); ok {
		_spec.AddField(order.FieldTokenID, field.TypeInt, value)
	}
	if ou.mutation.TokenIDCleared() {
		_spec.ClearField(order.FieldTokenID, field.TypeInt)
	}
	if value, ok := ou.mutation.MintTransactionHash(); ok {
		_spec.SetField(order.FieldMintTransactionHash, field.TypeString, value)
	}
	if ou.mutation.MintTransactionHashCleared() {
		_spec.ClearField(order.FieldMintTransactionHash, field.TypeString)
	}
	if value, ok := ou.mutation.TransferTransactionHash(); ok {
		_spec.SetField(order.FieldTransferTransactionHash, field.TypeString, value)
	}
	if ou.mutation.TransferTransactionHashCleared() {
		_spec.ClearField(order.FieldTransferTransactionHash, field.TypeString)
	}
	if ou.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.EventTable,
			Columns: []string{order.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.EventTable,
			Columns: []string{order.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ou.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.TicketTable,
			Columns: []string{order.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ou.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.TicketTable,
			Columns: []string{order.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ou.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ou.mutation.done = true
	return n, nil
}

// OrderUpdateOne is the builder for updating a single Order entity.
type OrderUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrderMutation
}

// SetTicketID sets the "ticket_id" field.
func (ouo *OrderUpdateOne) SetTicketID(i int) *OrderUpdateOne {
	ouo.mutation.SetTicketID(i)
	return ouo
}

// SetNillableTicketID sets the "ticket_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTicketID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetTicketID(*i)
	}
	return ouo
}

// SetEventID sets the "event_id" field.
func (ouo *OrderUpdateOne) SetEventID(i int) *OrderUpdateOne {
	ouo.mutation.SetEventID(i)
	return ouo
}

// SetNillableEventID sets the "event_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableEventID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetEventID(*i)
	}
	return ouo
}

// SetWalletAddress sets the "wallet_address" field.
func (ouo *OrderUpdateOne) SetWalletAddress(s string) *OrderUpdateOne {
	ouo.mutation.SetWalletAddress(s)
	return ouo
}

// SetNillableWalletAddress sets the "wallet_address" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableWalletAddress(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetWalletAddress(*s)
	}
	return ouo
}

// SetPriceInCents sets the "price_in_cents" field.
func (ouo *OrderUpdateOne) SetPriceInCents(i int64) *OrderUpdateOne {
	ouo.mutation.ResetPriceInCents()
	ouo.mutation.SetPriceInCents(i)
	return ouo
}

// SetNillablePriceInCents sets the "price_in_cents" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePriceInCents(i *int64) *OrderUpdateOne {
	if i != nil {
		ouo.SetPriceInCents(*i)
	}
	return ouo
}

// AddPriceInCents adds i to the "price_in_cents" field.
func (ouo *OrderUpdateOne) AddPriceInCents(i int64) *OrderUpdateOne {
	ouo.mutation.AddPriceInCents(i)
	return ouo
}

// SetCcCheckoutID sets the "cc_checkout_id" field.
func (ouo *OrderUpdateOne) SetCcCheckoutID(u uuid.UUID) *OrderUpdateOne {
	ouo.mutation.SetCcCheckoutID(u)
	return ouo
}

// SetNillableCcCheckoutID sets the "cc_checkout_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCcCheckoutID(u *uuid.UUID) *OrderUpdateOne {
	if u != nil {
		ouo.SetCcCheckoutID(*u)
	}
	return ouo
}

// SetCreatedAt sets the "created_at" field.
func (ouo *OrderUpdateOne) SetCreatedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetCreatedAt(t)
	return ouo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableCreatedAt(t *time.Time) *OrderUpdateOne {
	if t != nil {
		ouo.SetCreatedAt(*t)
	}
	return ouo
}

// SetModifiedAt sets the "modified_at" field.
func (ouo *OrderUpdateOne) SetModifiedAt(t time.Time) *OrderUpdateOne {
	ouo.mutation.SetModifiedAt(t)
	return ouo
}

// SetPaymentReference sets the "payment_reference" field.
func (ouo *OrderUpdateOne) SetPaymentReference(s string) *OrderUpdateOne {
	ouo.mutation.SetPaymentReference(s)
	return ouo
}

// SetNillablePaymentReference sets the "payment_reference" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentReference(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPaymentReference(*s)
	}
	return ouo
}

// ClearPaymentReference clears the value of the "payment_reference" field.
func (ouo *OrderUpdateOne) ClearPaymentReference() *OrderUpdateOne {
	ouo.mutation.ClearPaymentReference()
	return ouo
}

// SetPaymentWalletAddress sets the "payment_wallet_address" field.
func (ouo *OrderUpdateOne) SetPaymentWalletAddress(s string) *OrderUpdateOne {
	ouo.mutation.SetPaymentWalletAddress(s)
	return ouo
}

// SetNillablePaymentWalletAddress sets the "payment_wallet_address" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentWalletAddress(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPaymentWalletAddress(*s)
	}
	return ouo
}

// ClearPaymentWalletAddress clears the value of the "payment_wallet_address" field.
func (ouo *OrderUpdateOne) ClearPaymentWalletAddress() *OrderUpdateOne {
	ouo.mutation.ClearPaymentWalletAddress()
	return ouo
}

// SetPaymentTransactionHash sets the "payment_transaction_hash" field.
func (ouo *OrderUpdateOne) SetPaymentTransactionHash(s string) *OrderUpdateOne {
	ouo.mutation.SetPaymentTransactionHash(s)
	return ouo
}

// SetNillablePaymentTransactionHash sets the "payment_transaction_hash" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillablePaymentTransactionHash(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetPaymentTransactionHash(*s)
	}
	return ouo
}

// ClearPaymentTransactionHash clears the value of the "payment_transaction_hash" field.
func (ouo *OrderUpdateOne) ClearPaymentTransactionHash() *OrderUpdateOne {
	ouo.mutation.ClearPaymentTransactionHash()
	return ouo
}

// SetTokenID sets the "token_id" field.
func (ouo *OrderUpdateOne) SetTokenID(i int) *OrderUpdateOne {
	ouo.mutation.ResetTokenID()
	ouo.mutation.SetTokenID(i)
	return ouo
}

// SetNillableTokenID sets the "token_id" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTokenID(i *int) *OrderUpdateOne {
	if i != nil {
		ouo.SetTokenID(*i)
	}
	return ouo
}

// AddTokenID adds i to the "token_id" field.
func (ouo *OrderUpdateOne) AddTokenID(i int) *OrderUpdateOne {
	ouo.mutation.AddTokenID(i)
	return ouo
}

// ClearTokenID clears the value of the "token_id" field.
func (ouo *OrderUpdateOne) ClearTokenID() *OrderUpdateOne {
	ouo.mutation.ClearTokenID()
	return ouo
}

// SetMintTransactionHash sets the "mint_transaction_hash" field.
func (ouo *OrderUpdateOne) SetMintTransactionHash(s string) *OrderUpdateOne {
	ouo.mutation.SetMintTransactionHash(s)
	return ouo
}

// SetNillableMintTransactionHash sets the "mint_transaction_hash" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableMintTransactionHash(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetMintTransactionHash(*s)
	}
	return ouo
}

// ClearMintTransactionHash clears the value of the "mint_transaction_hash" field.
func (ouo *OrderUpdateOne) ClearMintTransactionHash() *OrderUpdateOne {
	ouo.mutation.ClearMintTransactionHash()
	return ouo
}

// SetTransferTransactionHash sets the "transfer_transaction_hash" field.
func (ouo *OrderUpdateOne) SetTransferTransactionHash(s string) *OrderUpdateOne {
	ouo.mutation.SetTransferTransactionHash(s)
	return ouo
}

// SetNillableTransferTransactionHash sets the "transfer_transaction_hash" field if the given value is not nil.
func (ouo *OrderUpdateOne) SetNillableTransferTransactionHash(s *string) *OrderUpdateOne {
	if s != nil {
		ouo.SetTransferTransactionHash(*s)
	}
	return ouo
}

// ClearTransferTransactionHash clears the value of the "transfer_transaction_hash" field.
func (ouo *OrderUpdateOne) ClearTransferTransactionHash() *OrderUpdateOne {
	ouo.mutation.ClearTransferTransactionHash()
	return ouo
}

// SetEvent sets the "event" edge to the Event entity.
func (ouo *OrderUpdateOne) SetEvent(e *Event) *OrderUpdateOne {
	return ouo.SetEventID(e.ID)
}

// SetTicket sets the "ticket" edge to the Ticket entity.
func (ouo *OrderUpdateOne) SetTicket(t *Ticket) *OrderUpdateOne {
	return ouo.SetTicketID(t.ID)
}

// Mutation returns the OrderMutation object of the builder.
func (ouo *OrderUpdateOne) Mutation() *OrderMutation {
	return ouo.mutation
}

// ClearEvent clears the "event" edge to the Event entity.
func (ouo *OrderUpdateOne) ClearEvent() *OrderUpdateOne {
	ouo.mutation.ClearEvent()
	return ouo
}

// ClearTicket clears the "ticket" edge to the Ticket entity.
func (ouo *OrderUpdateOne) ClearTicket() *OrderUpdateOne {
	ouo.mutation.ClearTicket()
	return ouo
}

// Where appends a list predicates to the OrderUpdate builder.
func (ouo *OrderUpdateOne) Where(ps ...predicate.Order) *OrderUpdateOne {
	ouo.mutation.Where(ps...)
	return ouo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ouo *OrderUpdateOne) Select(field string, fields ...string) *OrderUpdateOne {
	ouo.fields = append([]string{field}, fields...)
	return ouo
}

// Save executes the query and returns the updated Order entity.
func (ouo *OrderUpdateOne) Save(ctx context.Context) (*Order, error) {
	ouo.defaults()
	return withHooks(ctx, ouo.sqlSave, ouo.mutation, ouo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ouo *OrderUpdateOne) SaveX(ctx context.Context) *Order {
	node, err := ouo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ouo *OrderUpdateOne) Exec(ctx context.Context) error {
	_, err := ouo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ouo *OrderUpdateOne) ExecX(ctx context.Context) {
	if err := ouo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ouo *OrderUpdateOne) defaults() {
	if _, ok := ouo.mutation.ModifiedAt(); !ok {
		v := order.UpdateDefaultModifiedAt()
		ouo.mutation.SetModifiedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ouo *OrderUpdateOne) check() error {
	if ouo.mutation.EventCleared() && len(ouo.mutation.EventIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.event"`)
	}
	if ouo.mutation.TicketCleared() && len(ouo.mutation.TicketIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Order.ticket"`)
	}
	return nil
}

func (ouo *OrderUpdateOne) sqlSave(ctx context.Context) (_node *Order, err error) {
	if err := ouo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(order.Table, order.Columns, sqlgraph.NewFieldSpec(order.FieldID, field.TypeInt))
	id, ok := ouo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Order.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ouo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, order.FieldID)
		for _, f := range fields {
			if !order.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != order.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ouo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ouo.mutation.WalletAddress(); ok {
		_spec.SetField(order.FieldWalletAddress, field.TypeString, value)
	}
	if value, ok := ouo.mutation.PriceInCents(); ok {
		_spec.SetField(order.FieldPriceInCents, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.AddedPriceInCents(); ok {
		_spec.AddField(order.FieldPriceInCents, field.TypeInt64, value)
	}
	if value, ok := ouo.mutation.CcCheckoutID(); ok {
		_spec.SetField(order.FieldCcCheckoutID, field.TypeUUID, value)
	}
	if value, ok := ouo.mutation.CreatedAt(); ok {
		_spec.SetField(order.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.ModifiedAt(); ok {
		_spec.SetField(order.FieldModifiedAt, field.TypeTime, value)
	}
	if value, ok := ouo.mutation.PaymentReference(); ok {
		_spec.SetField(order.FieldPaymentReference, field.TypeString, value)
	}
	if ouo.mutation.PaymentReferenceCleared() {
		_spec.ClearField(order.FieldPaymentReference, field.TypeString)
	}
	if value, ok := ouo.mutation.PaymentWalletAddress(); ok {
		_spec.SetField(order.FieldPaymentWalletAddress, field.TypeString, value)
	}
	if ouo.mutation.PaymentWalletAddressCleared() {
		_spec.ClearField(order.FieldPaymentWalletAddress, field.TypeString)
	}
	if value, ok := ouo.mutation.PaymentTransactionHash(); ok {
		_spec.SetField(order.FieldPaymentTransactionHash, field.TypeString, value)
	}
	if ouo.mutation.PaymentTransactionHashCleared() {
		_spec.ClearField(order.FieldPaymentTransactionHash, field.TypeString)
	}
	if value, ok := ouo.mutation.TokenID(); ok {
		_spec.SetField(order.FieldTokenID, field.TypeInt, value)
	}
	if value, ok := ouo.mutation.AddedTokenID(); ok {
		_spec.AddField(order.FieldTokenID, field.TypeInt, value)
	}
	if ouo.mutation.TokenIDCleared() {
		_spec.ClearField(order.FieldTokenID, field.TypeInt)
	}
	if value, ok := ouo.mutation.MintTransactionHash(); ok {
		_spec.SetField(order.FieldMintTransactionHash, field.TypeString, value)
	}
	if ouo.mutation.MintTransactionHashCleared() {
		_spec.ClearField(order.FieldMintTransactionHash, field.TypeString)
	}
	if value, ok := ouo.mutation.TransferTransactionHash(); ok {
		_spec.SetField(order.FieldTransferTransactionHash, field.TypeString, value)
	}
	if ouo.mutation.TransferTransactionHashCleared() {
		_spec.ClearField(order.FieldTransferTransactionHash, field.TypeString)
	}
	if ouo.mutation.EventCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.EventTable,
			Columns: []string{order.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.EventTable,
			Columns: []string{order.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ouo.mutation.TicketCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.TicketTable,
			Columns: []string{order.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ouo.mutation.TicketIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   order.TicketTable,
			Columns: []string{order.TicketColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Order{config: ouo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ouo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{order.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ouo.mutation.done = true
	return _node, nil
}
