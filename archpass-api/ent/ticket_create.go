// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/garguelles/archpass/ent/attendee"
	"github.com/garguelles/archpass/ent/event"
	"github.com/garguelles/archpass/ent/ticket"
)

// TicketCreate is the builder for creating a Ticket entity.
type TicketCreate struct {
	config
	mutation *TicketMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (tc *TicketCreate) SetName(s string) *TicketCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TicketCreate) SetDescription(s string) *TicketCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetTicketSlug sets the "ticket_slug" field.
func (tc *TicketCreate) SetTicketSlug(s string) *TicketCreate {
	tc.mutation.SetTicketSlug(s)
	return tc
}

// SetMintPrice sets the "mint_price" field.
func (tc *TicketCreate) SetMintPrice(s string) *TicketCreate {
	tc.mutation.SetMintPrice(s)
	return tc
}

// SetQuantity sets the "quantity" field.
func (tc *TicketCreate) SetQuantity(i int) *TicketCreate {
	tc.mutation.SetQuantity(i)
	return tc
}

// SetEventID sets the "event_id" field.
func (tc *TicketCreate) SetEventID(i int) *TicketCreate {
	tc.mutation.SetEventID(i)
	return tc
}

// SetTicketHash sets the "ticket_hash" field.
func (tc *TicketCreate) SetTicketHash(s string) *TicketCreate {
	tc.mutation.SetTicketHash(s)
	return tc
}

// SetNillableTicketHash sets the "ticket_hash" field if the given value is not nil.
func (tc *TicketCreate) SetNillableTicketHash(s *string) *TicketCreate {
	if s != nil {
		tc.SetTicketHash(*s)
	}
	return tc
}

// SetImageURL sets the "image_url" field.
func (tc *TicketCreate) SetImageURL(s string) *TicketCreate {
	tc.mutation.SetImageURL(s)
	return tc
}

// SetNillableImageURL sets the "image_url" field if the given value is not nil.
func (tc *TicketCreate) SetNillableImageURL(s *string) *TicketCreate {
	if s != nil {
		tc.SetImageURL(*s)
	}
	return tc
}

// SetContractAddress sets the "contract_address" field.
func (tc *TicketCreate) SetContractAddress(s string) *TicketCreate {
	tc.mutation.SetContractAddress(s)
	return tc
}

// SetNillableContractAddress sets the "contract_address" field if the given value is not nil.
func (tc *TicketCreate) SetNillableContractAddress(s *string) *TicketCreate {
	if s != nil {
		tc.SetContractAddress(*s)
	}
	return tc
}

// SetTransactionHash sets the "transaction_hash" field.
func (tc *TicketCreate) SetTransactionHash(s string) *TicketCreate {
	tc.mutation.SetTransactionHash(s)
	return tc
}

// SetNillableTransactionHash sets the "transaction_hash" field if the given value is not nil.
func (tc *TicketCreate) SetNillableTransactionHash(s *string) *TicketCreate {
	if s != nil {
		tc.SetTransactionHash(*s)
	}
	return tc
}

// SetBlockNumber sets the "block_number" field.
func (tc *TicketCreate) SetBlockNumber(s string) *TicketCreate {
	tc.mutation.SetBlockNumber(s)
	return tc
}

// SetNillableBlockNumber sets the "block_number" field if the given value is not nil.
func (tc *TicketCreate) SetNillableBlockNumber(s *string) *TicketCreate {
	if s != nil {
		tc.SetBlockNumber(*s)
	}
	return tc
}

// SetCreatedAt sets the "created_at" field.
func (tc *TicketCreate) SetCreatedAt(t time.Time) *TicketCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TicketCreate) SetNillableCreatedAt(t *time.Time) *TicketCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TicketCreate) SetUpdatedAt(t time.Time) *TicketCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TicketCreate) SetNillableUpdatedAt(t *time.Time) *TicketCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetEvent sets the "event" edge to the Event entity.
func (tc *TicketCreate) SetEvent(e *Event) *TicketCreate {
	return tc.SetEventID(e.ID)
}

// SetAttendeesID sets the "attendees" edge to the Attendee entity by ID.
func (tc *TicketCreate) SetAttendeesID(id int) *TicketCreate {
	tc.mutation.SetAttendeesID(id)
	return tc
}

// SetNillableAttendeesID sets the "attendees" edge to the Attendee entity by ID if the given value is not nil.
func (tc *TicketCreate) SetNillableAttendeesID(id *int) *TicketCreate {
	if id != nil {
		tc = tc.SetAttendeesID(*id)
	}
	return tc
}

// SetAttendees sets the "attendees" edge to the Attendee entity.
func (tc *TicketCreate) SetAttendees(a *Attendee) *TicketCreate {
	return tc.SetAttendeesID(a.ID)
}

// Mutation returns the TicketMutation object of the builder.
func (tc *TicketCreate) Mutation() *TicketMutation {
	return tc.mutation
}

// Save creates the Ticket in the database.
func (tc *TicketCreate) Save(ctx context.Context) (*Ticket, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TicketCreate) SaveX(ctx context.Context) *Ticket {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TicketCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TicketCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TicketCreate) defaults() {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		v := ticket.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		v := ticket.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TicketCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Ticket.name"`)}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Ticket.description"`)}
	}
	if _, ok := tc.mutation.TicketSlug(); !ok {
		return &ValidationError{Name: "ticket_slug", err: errors.New(`ent: missing required field "Ticket.ticket_slug"`)}
	}
	if v, ok := tc.mutation.TicketSlug(); ok {
		if err := ticket.TicketSlugValidator(v); err != nil {
			return &ValidationError{Name: "ticket_slug", err: fmt.Errorf(`ent: validator failed for field "Ticket.ticket_slug": %w`, err)}
		}
	}
	if _, ok := tc.mutation.MintPrice(); !ok {
		return &ValidationError{Name: "mint_price", err: errors.New(`ent: missing required field "Ticket.mint_price"`)}
	}
	if _, ok := tc.mutation.Quantity(); !ok {
		return &ValidationError{Name: "quantity", err: errors.New(`ent: missing required field "Ticket.quantity"`)}
	}
	if _, ok := tc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`ent: missing required field "Ticket.event_id"`)}
	}
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Ticket.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Ticket.updated_at"`)}
	}
	if len(tc.mutation.EventIDs()) == 0 {
		return &ValidationError{Name: "event", err: errors.New(`ent: missing required edge "Ticket.event"`)}
	}
	return nil
}

func (tc *TicketCreate) sqlSave(ctx context.Context) (*Ticket, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TicketCreate) createSpec() (*Ticket, *sqlgraph.CreateSpec) {
	var (
		_node = &Ticket{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(ticket.Table, sqlgraph.NewFieldSpec(ticket.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(ticket.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(ticket.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.TicketSlug(); ok {
		_spec.SetField(ticket.FieldTicketSlug, field.TypeString, value)
		_node.TicketSlug = value
	}
	if value, ok := tc.mutation.MintPrice(); ok {
		_spec.SetField(ticket.FieldMintPrice, field.TypeString, value)
		_node.MintPrice = value
	}
	if value, ok := tc.mutation.Quantity(); ok {
		_spec.SetField(ticket.FieldQuantity, field.TypeInt, value)
		_node.Quantity = value
	}
	if value, ok := tc.mutation.TicketHash(); ok {
		_spec.SetField(ticket.FieldTicketHash, field.TypeString, value)
		_node.TicketHash = value
	}
	if value, ok := tc.mutation.ImageURL(); ok {
		_spec.SetField(ticket.FieldImageURL, field.TypeString, value)
		_node.ImageURL = value
	}
	if value, ok := tc.mutation.ContractAddress(); ok {
		_spec.SetField(ticket.FieldContractAddress, field.TypeString, value)
		_node.ContractAddress = value
	}
	if value, ok := tc.mutation.TransactionHash(); ok {
		_spec.SetField(ticket.FieldTransactionHash, field.TypeString, value)
		_node.TransactionHash = value
	}
	if value, ok := tc.mutation.BlockNumber(); ok {
		_spec.SetField(ticket.FieldBlockNumber, field.TypeString, value)
		_node.BlockNumber = value
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(ticket.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(ticket.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := tc.mutation.EventIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   ticket.EventTable,
			Columns: []string{ticket.EventColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.EventID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.AttendeesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   ticket.AttendeesTable,
			Columns: []string{ticket.AttendeesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attendee.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ticket.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TicketUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tc *TicketCreate) OnConflict(opts ...sql.ConflictOption) *TicketUpsertOne {
	tc.conflict = opts
	return &TicketUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ticket.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TicketCreate) OnConflictColumns(columns ...string) *TicketUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TicketUpsertOne{
		create: tc,
	}
}

type (
	// TicketUpsertOne is the builder for "upsert"-ing
	//  one Ticket node.
	TicketUpsertOne struct {
		create *TicketCreate
	}

	// TicketUpsert is the "OnConflict" setter.
	TicketUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TicketUpsert) SetName(v string) *TicketUpsert {
	u.Set(ticket.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TicketUpsert) UpdateName() *TicketUpsert {
	u.SetExcluded(ticket.FieldName)
	return u
}

// SetDescription sets the "description" field.
func (u *TicketUpsert) SetDescription(v string) *TicketUpsert {
	u.Set(ticket.FieldDescription, v)
	return u
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TicketUpsert) UpdateDescription() *TicketUpsert {
	u.SetExcluded(ticket.FieldDescription)
	return u
}

// SetTicketSlug sets the "ticket_slug" field.
func (u *TicketUpsert) SetTicketSlug(v string) *TicketUpsert {
	u.Set(ticket.FieldTicketSlug, v)
	return u
}

// UpdateTicketSlug sets the "ticket_slug" field to the value that was provided on create.
func (u *TicketUpsert) UpdateTicketSlug() *TicketUpsert {
	u.SetExcluded(ticket.FieldTicketSlug)
	return u
}

// SetMintPrice sets the "mint_price" field.
func (u *TicketUpsert) SetMintPrice(v string) *TicketUpsert {
	u.Set(ticket.FieldMintPrice, v)
	return u
}

// UpdateMintPrice sets the "mint_price" field to the value that was provided on create.
func (u *TicketUpsert) UpdateMintPrice() *TicketUpsert {
	u.SetExcluded(ticket.FieldMintPrice)
	return u
}

// SetQuantity sets the "quantity" field.
func (u *TicketUpsert) SetQuantity(v int) *TicketUpsert {
	u.Set(ticket.FieldQuantity, v)
	return u
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *TicketUpsert) UpdateQuantity() *TicketUpsert {
	u.SetExcluded(ticket.FieldQuantity)
	return u
}

// AddQuantity adds v to the "quantity" field.
func (u *TicketUpsert) AddQuantity(v int) *TicketUpsert {
	u.Add(ticket.FieldQuantity, v)
	return u
}

// SetEventID sets the "event_id" field.
func (u *TicketUpsert) SetEventID(v int) *TicketUpsert {
	u.Set(ticket.FieldEventID, v)
	return u
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TicketUpsert) UpdateEventID() *TicketUpsert {
	u.SetExcluded(ticket.FieldEventID)
	return u
}

// SetTicketHash sets the "ticket_hash" field.
func (u *TicketUpsert) SetTicketHash(v string) *TicketUpsert {
	u.Set(ticket.FieldTicketHash, v)
	return u
}

// UpdateTicketHash sets the "ticket_hash" field to the value that was provided on create.
func (u *TicketUpsert) UpdateTicketHash() *TicketUpsert {
	u.SetExcluded(ticket.FieldTicketHash)
	return u
}

// ClearTicketHash clears the value of the "ticket_hash" field.
func (u *TicketUpsert) ClearTicketHash() *TicketUpsert {
	u.SetNull(ticket.FieldTicketHash)
	return u
}

// SetImageURL sets the "image_url" field.
func (u *TicketUpsert) SetImageURL(v string) *TicketUpsert {
	u.Set(ticket.FieldImageURL, v)
	return u
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TicketUpsert) UpdateImageURL() *TicketUpsert {
	u.SetExcluded(ticket.FieldImageURL)
	return u
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TicketUpsert) ClearImageURL() *TicketUpsert {
	u.SetNull(ticket.FieldImageURL)
	return u
}

// SetContractAddress sets the "contract_address" field.
func (u *TicketUpsert) SetContractAddress(v string) *TicketUpsert {
	u.Set(ticket.FieldContractAddress, v)
	return u
}

// UpdateContractAddress sets the "contract_address" field to the value that was provided on create.
func (u *TicketUpsert) UpdateContractAddress() *TicketUpsert {
	u.SetExcluded(ticket.FieldContractAddress)
	return u
}

// ClearContractAddress clears the value of the "contract_address" field.
func (u *TicketUpsert) ClearContractAddress() *TicketUpsert {
	u.SetNull(ticket.FieldContractAddress)
	return u
}

// SetTransactionHash sets the "transaction_hash" field.
func (u *TicketUpsert) SetTransactionHash(v string) *TicketUpsert {
	u.Set(ticket.FieldTransactionHash, v)
	return u
}

// UpdateTransactionHash sets the "transaction_hash" field to the value that was provided on create.
func (u *TicketUpsert) UpdateTransactionHash() *TicketUpsert {
	u.SetExcluded(ticket.FieldTransactionHash)
	return u
}

// ClearTransactionHash clears the value of the "transaction_hash" field.
func (u *TicketUpsert) ClearTransactionHash() *TicketUpsert {
	u.SetNull(ticket.FieldTransactionHash)
	return u
}

// SetBlockNumber sets the "block_number" field.
func (u *TicketUpsert) SetBlockNumber(v string) *TicketUpsert {
	u.Set(ticket.FieldBlockNumber, v)
	return u
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *TicketUpsert) UpdateBlockNumber() *TicketUpsert {
	u.SetExcluded(ticket.FieldBlockNumber)
	return u
}

// ClearBlockNumber clears the value of the "block_number" field.
func (u *TicketUpsert) ClearBlockNumber() *TicketUpsert {
	u.SetNull(ticket.FieldBlockNumber)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *TicketUpsert) SetCreatedAt(v time.Time) *TicketUpsert {
	u.Set(ticket.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TicketUpsert) UpdateCreatedAt() *TicketUpsert {
	u.SetExcluded(ticket.FieldCreatedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TicketUpsert) SetUpdatedAt(v time.Time) *TicketUpsert {
	u.Set(ticket.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TicketUpsert) UpdateUpdatedAt() *TicketUpsert {
	u.SetExcluded(ticket.FieldUpdatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Ticket.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TicketUpsertOne) UpdateNewValues() *TicketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ticket.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TicketUpsertOne) Ignore() *TicketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TicketUpsertOne) DoNothing() *TicketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TicketCreate.OnConflict
// documentation for more info.
func (u *TicketUpsertOne) Update(set func(*TicketUpsert)) *TicketUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TicketUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TicketUpsertOne) SetName(v string) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateName() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *TicketUpsertOne) SetDescription(v string) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateDescription() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateDescription()
	})
}

// SetTicketSlug sets the "ticket_slug" field.
func (u *TicketUpsertOne) SetTicketSlug(v string) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetTicketSlug(v)
	})
}

// UpdateTicketSlug sets the "ticket_slug" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateTicketSlug() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateTicketSlug()
	})
}

// SetMintPrice sets the "mint_price" field.
func (u *TicketUpsertOne) SetMintPrice(v string) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetMintPrice(v)
	})
}

// UpdateMintPrice sets the "mint_price" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateMintPrice() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateMintPrice()
	})
}

// SetQuantity sets the "quantity" field.
func (u *TicketUpsertOne) SetQuantity(v int) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetQuantity(v)
	})
}

// AddQuantity adds v to the "quantity" field.
func (u *TicketUpsertOne) AddQuantity(v int) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.AddQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateQuantity() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateQuantity()
	})
}

// SetEventID sets the "event_id" field.
func (u *TicketUpsertOne) SetEventID(v int) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateEventID() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateEventID()
	})
}

// SetTicketHash sets the "ticket_hash" field.
func (u *TicketUpsertOne) SetTicketHash(v string) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetTicketHash(v)
	})
}

// UpdateTicketHash sets the "ticket_hash" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateTicketHash() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateTicketHash()
	})
}

// ClearTicketHash clears the value of the "ticket_hash" field.
func (u *TicketUpsertOne) ClearTicketHash() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.ClearTicketHash()
	})
}

// SetImageURL sets the "image_url" field.
func (u *TicketUpsertOne) SetImageURL(v string) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateImageURL() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TicketUpsertOne) ClearImageURL() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.ClearImageURL()
	})
}

// SetContractAddress sets the "contract_address" field.
func (u *TicketUpsertOne) SetContractAddress(v string) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetContractAddress(v)
	})
}

// UpdateContractAddress sets the "contract_address" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateContractAddress() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateContractAddress()
	})
}

// ClearContractAddress clears the value of the "contract_address" field.
func (u *TicketUpsertOne) ClearContractAddress() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.ClearContractAddress()
	})
}

// SetTransactionHash sets the "transaction_hash" field.
func (u *TicketUpsertOne) SetTransactionHash(v string) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetTransactionHash(v)
	})
}

// UpdateTransactionHash sets the "transaction_hash" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateTransactionHash() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateTransactionHash()
	})
}

// ClearTransactionHash clears the value of the "transaction_hash" field.
func (u *TicketUpsertOne) ClearTransactionHash() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.ClearTransactionHash()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *TicketUpsertOne) SetBlockNumber(v string) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateBlockNumber() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateBlockNumber()
	})
}

// ClearBlockNumber clears the value of the "block_number" field.
func (u *TicketUpsertOne) ClearBlockNumber() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.ClearBlockNumber()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TicketUpsertOne) SetCreatedAt(v time.Time) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateCreatedAt() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TicketUpsertOne) SetUpdatedAt(v time.Time) *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TicketUpsertOne) UpdateUpdatedAt() *TicketUpsertOne {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TicketUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TicketCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TicketUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TicketUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TicketUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TicketCreateBulk is the builder for creating many Ticket entities in bulk.
type TicketCreateBulk struct {
	config
	err      error
	builders []*TicketCreate
	conflict []sql.ConflictOption
}

// Save creates the Ticket entities in the database.
func (tcb *TicketCreateBulk) Save(ctx context.Context) ([]*Ticket, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Ticket, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TicketMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TicketCreateBulk) SaveX(ctx context.Context) []*Ticket {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TicketCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TicketCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Ticket.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TicketUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tcb *TicketCreateBulk) OnConflict(opts ...sql.ConflictOption) *TicketUpsertBulk {
	tcb.conflict = opts
	return &TicketUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Ticket.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TicketCreateBulk) OnConflictColumns(columns ...string) *TicketUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TicketUpsertBulk{
		create: tcb,
	}
}

// TicketUpsertBulk is the builder for "upsert"-ing
// a bulk of Ticket nodes.
type TicketUpsertBulk struct {
	create *TicketCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Ticket.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TicketUpsertBulk) UpdateNewValues() *TicketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Ticket.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TicketUpsertBulk) Ignore() *TicketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TicketUpsertBulk) DoNothing() *TicketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TicketCreateBulk.OnConflict
// documentation for more info.
func (u *TicketUpsertBulk) Update(set func(*TicketUpsert)) *TicketUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TicketUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TicketUpsertBulk) SetName(v string) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateName() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateName()
	})
}

// SetDescription sets the "description" field.
func (u *TicketUpsertBulk) SetDescription(v string) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetDescription(v)
	})
}

// UpdateDescription sets the "description" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateDescription() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateDescription()
	})
}

// SetTicketSlug sets the "ticket_slug" field.
func (u *TicketUpsertBulk) SetTicketSlug(v string) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetTicketSlug(v)
	})
}

// UpdateTicketSlug sets the "ticket_slug" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateTicketSlug() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateTicketSlug()
	})
}

// SetMintPrice sets the "mint_price" field.
func (u *TicketUpsertBulk) SetMintPrice(v string) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetMintPrice(v)
	})
}

// UpdateMintPrice sets the "mint_price" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateMintPrice() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateMintPrice()
	})
}

// SetQuantity sets the "quantity" field.
func (u *TicketUpsertBulk) SetQuantity(v int) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetQuantity(v)
	})
}

// AddQuantity adds v to the "quantity" field.
func (u *TicketUpsertBulk) AddQuantity(v int) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.AddQuantity(v)
	})
}

// UpdateQuantity sets the "quantity" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateQuantity() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateQuantity()
	})
}

// SetEventID sets the "event_id" field.
func (u *TicketUpsertBulk) SetEventID(v int) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetEventID(v)
	})
}

// UpdateEventID sets the "event_id" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateEventID() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateEventID()
	})
}

// SetTicketHash sets the "ticket_hash" field.
func (u *TicketUpsertBulk) SetTicketHash(v string) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetTicketHash(v)
	})
}

// UpdateTicketHash sets the "ticket_hash" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateTicketHash() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateTicketHash()
	})
}

// ClearTicketHash clears the value of the "ticket_hash" field.
func (u *TicketUpsertBulk) ClearTicketHash() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.ClearTicketHash()
	})
}

// SetImageURL sets the "image_url" field.
func (u *TicketUpsertBulk) SetImageURL(v string) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetImageURL(v)
	})
}

// UpdateImageURL sets the "image_url" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateImageURL() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateImageURL()
	})
}

// ClearImageURL clears the value of the "image_url" field.
func (u *TicketUpsertBulk) ClearImageURL() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.ClearImageURL()
	})
}

// SetContractAddress sets the "contract_address" field.
func (u *TicketUpsertBulk) SetContractAddress(v string) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetContractAddress(v)
	})
}

// UpdateContractAddress sets the "contract_address" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateContractAddress() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateContractAddress()
	})
}

// ClearContractAddress clears the value of the "contract_address" field.
func (u *TicketUpsertBulk) ClearContractAddress() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.ClearContractAddress()
	})
}

// SetTransactionHash sets the "transaction_hash" field.
func (u *TicketUpsertBulk) SetTransactionHash(v string) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetTransactionHash(v)
	})
}

// UpdateTransactionHash sets the "transaction_hash" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateTransactionHash() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateTransactionHash()
	})
}

// ClearTransactionHash clears the value of the "transaction_hash" field.
func (u *TicketUpsertBulk) ClearTransactionHash() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.ClearTransactionHash()
	})
}

// SetBlockNumber sets the "block_number" field.
func (u *TicketUpsertBulk) SetBlockNumber(v string) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetBlockNumber(v)
	})
}

// UpdateBlockNumber sets the "block_number" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateBlockNumber() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateBlockNumber()
	})
}

// ClearBlockNumber clears the value of the "block_number" field.
func (u *TicketUpsertBulk) ClearBlockNumber() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.ClearBlockNumber()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *TicketUpsertBulk) SetCreatedAt(v time.Time) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateCreatedAt() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateCreatedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *TicketUpsertBulk) SetUpdatedAt(v time.Time) *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *TicketUpsertBulk) UpdateUpdatedAt() *TicketUpsertBulk {
	return u.Update(func(s *TicketUpsert) {
		s.UpdateUpdatedAt()
	})
}

// Exec executes the query.
func (u *TicketUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TicketCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TicketCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TicketUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
