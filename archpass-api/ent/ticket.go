// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/garguelles/archpass/ent/attendee"
	"github.com/garguelles/archpass/ent/event"
	"github.com/garguelles/archpass/ent/ticket"
)

// Ticket is the model entity for the Ticket schema.
type Ticket struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// TicketSlug holds the value of the "ticket_slug" field.
	TicketSlug string `json:"ticket_slug,omitempty"`
	// MintPrice holds the value of the "mint_price" field.
	MintPrice string `json:"mint_price,omitempty"`
	// Quantity holds the value of the "quantity" field.
	Quantity int `json:"quantity,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID int `json:"event_id,omitempty"`
	// TicketHash holds the value of the "ticket_hash" field.
	TicketHash string `json:"ticket_hash,omitempty"`
	// ImageURL holds the value of the "image_url" field.
	ImageURL string `json:"image_url,omitempty"`
	// ContractAddress holds the value of the "contract_address" field.
	ContractAddress string `json:"contract_address,omitempty"`
	// TransactionHash holds the value of the "transaction_hash" field.
	TransactionHash string `json:"transaction_hash,omitempty"`
	// BlockNumber holds the value of the "block_number" field.
	BlockNumber string `json:"block_number,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TicketQuery when eager-loading is set.
	Edges        TicketEdges `json:"edges"`
	selectValues sql.SelectValues
}

// TicketEdges holds the relations/edges for other nodes in the graph.
type TicketEdges struct {
	// Event holds the value of the event edge.
	Event *Event `json:"event,omitempty"`
	// Attendees holds the value of the attendees edge.
	Attendees *Attendee `json:"attendees,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// EventOrErr returns the Event value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) EventOrErr() (*Event, error) {
	if e.Event != nil {
		return e.Event, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: event.Label}
	}
	return nil, &NotLoadedError{edge: "event"}
}

// AttendeesOrErr returns the Attendees value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TicketEdges) AttendeesOrErr() (*Attendee, error) {
	if e.Attendees != nil {
		return e.Attendees, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: attendee.Label}
	}
	return nil, &NotLoadedError{edge: "attendees"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Ticket) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID, ticket.FieldQuantity, ticket.FieldEventID:
			values[i] = new(sql.NullInt64)
		case ticket.FieldName, ticket.FieldDescription, ticket.FieldTicketSlug, ticket.FieldMintPrice, ticket.FieldTicketHash, ticket.FieldImageURL, ticket.FieldContractAddress, ticket.FieldTransactionHash, ticket.FieldBlockNumber:
			values[i] = new(sql.NullString)
		case ticket.FieldCreatedAt, ticket.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Ticket fields.
func (t *Ticket) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ticket.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case ticket.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case ticket.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case ticket.FieldTicketSlug:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_slug", values[i])
			} else if value.Valid {
				t.TicketSlug = value.String
			}
		case ticket.FieldMintPrice:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field mint_price", values[i])
			} else if value.Valid {
				t.MintPrice = value.String
			}
		case ticket.FieldQuantity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field quantity", values[i])
			} else if value.Valid {
				t.Quantity = int(value.Int64)
			}
		case ticket.FieldEventID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				t.EventID = int(value.Int64)
			}
		case ticket.FieldTicketHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ticket_hash", values[i])
			} else if value.Valid {
				t.TicketHash = value.String
			}
		case ticket.FieldImageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image_url", values[i])
			} else if value.Valid {
				t.ImageURL = value.String
			}
		case ticket.FieldContractAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field contract_address", values[i])
			} else if value.Valid {
				t.ContractAddress = value.String
			}
		case ticket.FieldTransactionHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field transaction_hash", values[i])
			} else if value.Valid {
				t.TransactionHash = value.String
			}
		case ticket.FieldBlockNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field block_number", values[i])
			} else if value.Valid {
				t.BlockNumber = value.String
			}
		case ticket.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case ticket.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Ticket.
// This includes values selected through modifiers, order, etc.
func (t *Ticket) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryEvent queries the "event" edge of the Ticket entity.
func (t *Ticket) QueryEvent() *EventQuery {
	return NewTicketClient(t.config).QueryEvent(t)
}

// QueryAttendees queries the "attendees" edge of the Ticket entity.
func (t *Ticket) QueryAttendees() *AttendeeQuery {
	return NewTicketClient(t.config).QueryAttendees(t)
}

// Update returns a builder for updating this Ticket.
// Note that you need to call Ticket.Unwrap() before calling this method if this Ticket
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Ticket) Update() *TicketUpdateOne {
	return NewTicketClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Ticket entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Ticket) Unwrap() *Ticket {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Ticket is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Ticket) String() string {
	var builder strings.Builder
	builder.WriteString("Ticket(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("ticket_slug=")
	builder.WriteString(t.TicketSlug)
	builder.WriteString(", ")
	builder.WriteString("mint_price=")
	builder.WriteString(t.MintPrice)
	builder.WriteString(", ")
	builder.WriteString("quantity=")
	builder.WriteString(fmt.Sprintf("%v", t.Quantity))
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(fmt.Sprintf("%v", t.EventID))
	builder.WriteString(", ")
	builder.WriteString("ticket_hash=")
	builder.WriteString(t.TicketHash)
	builder.WriteString(", ")
	builder.WriteString("image_url=")
	builder.WriteString(t.ImageURL)
	builder.WriteString(", ")
	builder.WriteString("contract_address=")
	builder.WriteString(t.ContractAddress)
	builder.WriteString(", ")
	builder.WriteString("transaction_hash=")
	builder.WriteString(t.TransactionHash)
	builder.WriteString(", ")
	builder.WriteString("block_number=")
	builder.WriteString(t.BlockNumber)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tickets is a parsable slice of Ticket.
type Tickets []*Ticket
