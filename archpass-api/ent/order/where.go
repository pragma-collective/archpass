// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/pragma-collective/archpass/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldID, id))
}

// TicketID applies equality check predicate on the "ticket_id" field. It's identical to TicketIDEQ.
func TicketID(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTicketID, v))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldEventID, v))
}

// WalletAddress applies equality check predicate on the "wallet_address" field. It's identical to WalletAddressEQ.
func WalletAddress(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldWalletAddress, v))
}

// PriceInCents applies equality check predicate on the "price_in_cents" field. It's identical to PriceInCentsEQ.
func PriceInCents(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPriceInCents, v))
}

// CcCheckoutID applies equality check predicate on the "cc_checkout_id" field. It's identical to CcCheckoutIDEQ.
func CcCheckoutID(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCcCheckoutID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// ModifiedAt applies equality check predicate on the "modified_at" field. It's identical to ModifiedAtEQ.
func ModifiedAt(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldModifiedAt, v))
}

// PaymentReference applies equality check predicate on the "payment_reference" field. It's identical to PaymentReferenceEQ.
func PaymentReference(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPaymentReference, v))
}

// PaymentWalletAddress applies equality check predicate on the "payment_wallet_address" field. It's identical to PaymentWalletAddressEQ.
func PaymentWalletAddress(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPaymentWalletAddress, v))
}

// PaymentTransactionHash applies equality check predicate on the "payment_transaction_hash" field. It's identical to PaymentTransactionHashEQ.
func PaymentTransactionHash(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPaymentTransactionHash, v))
}

// TokenID applies equality check predicate on the "token_id" field. It's identical to TokenIDEQ.
func TokenID(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTokenID, v))
}

// MintTransactionHash applies equality check predicate on the "mint_transaction_hash" field. It's identical to MintTransactionHashEQ.
func MintTransactionHash(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldMintTransactionHash, v))
}

// TransferTransactionHash applies equality check predicate on the "transfer_transaction_hash" field. It's identical to TransferTransactionHashEQ.
func TransferTransactionHash(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTransferTransactionHash, v))
}

// TicketIDEQ applies the EQ predicate on the "ticket_id" field.
func TicketIDEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTicketID, v))
}

// TicketIDNEQ applies the NEQ predicate on the "ticket_id" field.
func TicketIDNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTicketID, v))
}

// TicketIDIn applies the In predicate on the "ticket_id" field.
func TicketIDIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTicketID, vs...))
}

// TicketIDNotIn applies the NotIn predicate on the "ticket_id" field.
func TicketIDNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTicketID, vs...))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldEventID, vs...))
}

// WalletAddressEQ applies the EQ predicate on the "wallet_address" field.
func WalletAddressEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldWalletAddress, v))
}

// WalletAddressNEQ applies the NEQ predicate on the "wallet_address" field.
func WalletAddressNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldWalletAddress, v))
}

// WalletAddressIn applies the In predicate on the "wallet_address" field.
func WalletAddressIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldWalletAddress, vs...))
}

// WalletAddressNotIn applies the NotIn predicate on the "wallet_address" field.
func WalletAddressNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldWalletAddress, vs...))
}

// WalletAddressGT applies the GT predicate on the "wallet_address" field.
func WalletAddressGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldWalletAddress, v))
}

// WalletAddressGTE applies the GTE predicate on the "wallet_address" field.
func WalletAddressGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldWalletAddress, v))
}

// WalletAddressLT applies the LT predicate on the "wallet_address" field.
func WalletAddressLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldWalletAddress, v))
}

// WalletAddressLTE applies the LTE predicate on the "wallet_address" field.
func WalletAddressLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldWalletAddress, v))
}

// WalletAddressContains applies the Contains predicate on the "wallet_address" field.
func WalletAddressContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldWalletAddress, v))
}

// WalletAddressHasPrefix applies the HasPrefix predicate on the "wallet_address" field.
func WalletAddressHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldWalletAddress, v))
}

// WalletAddressHasSuffix applies the HasSuffix predicate on the "wallet_address" field.
func WalletAddressHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldWalletAddress, v))
}

// WalletAddressEqualFold applies the EqualFold predicate on the "wallet_address" field.
func WalletAddressEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldWalletAddress, v))
}

// WalletAddressContainsFold applies the ContainsFold predicate on the "wallet_address" field.
func WalletAddressContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldWalletAddress, v))
}

// PriceInCentsEQ applies the EQ predicate on the "price_in_cents" field.
func PriceInCentsEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPriceInCents, v))
}

// PriceInCentsNEQ applies the NEQ predicate on the "price_in_cents" field.
func PriceInCentsNEQ(v int64) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPriceInCents, v))
}

// PriceInCentsIn applies the In predicate on the "price_in_cents" field.
func PriceInCentsIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPriceInCents, vs...))
}

// PriceInCentsNotIn applies the NotIn predicate on the "price_in_cents" field.
func PriceInCentsNotIn(vs ...int64) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPriceInCents, vs...))
}

// PriceInCentsGT applies the GT predicate on the "price_in_cents" field.
func PriceInCentsGT(v int64) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldPriceInCents, v))
}

// PriceInCentsGTE applies the GTE predicate on the "price_in_cents" field.
func PriceInCentsGTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldPriceInCents, v))
}

// PriceInCentsLT applies the LT predicate on the "price_in_cents" field.
func PriceInCentsLT(v int64) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldPriceInCents, v))
}

// PriceInCentsLTE applies the LTE predicate on the "price_in_cents" field.
func PriceInCentsLTE(v int64) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldPriceInCents, v))
}

// CcCheckoutIDEQ applies the EQ predicate on the "cc_checkout_id" field.
func CcCheckoutIDEQ(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCcCheckoutID, v))
}

// CcCheckoutIDNEQ applies the NEQ predicate on the "cc_checkout_id" field.
func CcCheckoutIDNEQ(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCcCheckoutID, v))
}

// CcCheckoutIDIn applies the In predicate on the "cc_checkout_id" field.
func CcCheckoutIDIn(vs ...uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCcCheckoutID, vs...))
}

// CcCheckoutIDNotIn applies the NotIn predicate on the "cc_checkout_id" field.
func CcCheckoutIDNotIn(vs ...uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCcCheckoutID, vs...))
}

// CcCheckoutIDGT applies the GT predicate on the "cc_checkout_id" field.
func CcCheckoutIDGT(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCcCheckoutID, v))
}

// CcCheckoutIDGTE applies the GTE predicate on the "cc_checkout_id" field.
func CcCheckoutIDGTE(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCcCheckoutID, v))
}

// CcCheckoutIDLT applies the LT predicate on the "cc_checkout_id" field.
func CcCheckoutIDLT(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCcCheckoutID, v))
}

// CcCheckoutIDLTE applies the LTE predicate on the "cc_checkout_id" field.
func CcCheckoutIDLTE(v uuid.UUID) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCcCheckoutID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldCreatedAt, v))
}

// ModifiedAtEQ applies the EQ predicate on the "modified_at" field.
func ModifiedAtEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldModifiedAt, v))
}

// ModifiedAtNEQ applies the NEQ predicate on the "modified_at" field.
func ModifiedAtNEQ(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldModifiedAt, v))
}

// ModifiedAtIn applies the In predicate on the "modified_at" field.
func ModifiedAtIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldModifiedAt, vs...))
}

// ModifiedAtNotIn applies the NotIn predicate on the "modified_at" field.
func ModifiedAtNotIn(vs ...time.Time) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldModifiedAt, vs...))
}

// ModifiedAtGT applies the GT predicate on the "modified_at" field.
func ModifiedAtGT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldModifiedAt, v))
}

// ModifiedAtGTE applies the GTE predicate on the "modified_at" field.
func ModifiedAtGTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldModifiedAt, v))
}

// ModifiedAtLT applies the LT predicate on the "modified_at" field.
func ModifiedAtLT(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldModifiedAt, v))
}

// ModifiedAtLTE applies the LTE predicate on the "modified_at" field.
func ModifiedAtLTE(v time.Time) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldModifiedAt, v))
}

// PaymentReferenceEQ applies the EQ predicate on the "payment_reference" field.
func PaymentReferenceEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPaymentReference, v))
}

// PaymentReferenceNEQ applies the NEQ predicate on the "payment_reference" field.
func PaymentReferenceNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPaymentReference, v))
}

// PaymentReferenceIn applies the In predicate on the "payment_reference" field.
func PaymentReferenceIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPaymentReference, vs...))
}

// PaymentReferenceNotIn applies the NotIn predicate on the "payment_reference" field.
func PaymentReferenceNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPaymentReference, vs...))
}

// PaymentReferenceGT applies the GT predicate on the "payment_reference" field.
func PaymentReferenceGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldPaymentReference, v))
}

// PaymentReferenceGTE applies the GTE predicate on the "payment_reference" field.
func PaymentReferenceGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldPaymentReference, v))
}

// PaymentReferenceLT applies the LT predicate on the "payment_reference" field.
func PaymentReferenceLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldPaymentReference, v))
}

// PaymentReferenceLTE applies the LTE predicate on the "payment_reference" field.
func PaymentReferenceLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldPaymentReference, v))
}

// PaymentReferenceContains applies the Contains predicate on the "payment_reference" field.
func PaymentReferenceContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldPaymentReference, v))
}

// PaymentReferenceHasPrefix applies the HasPrefix predicate on the "payment_reference" field.
func PaymentReferenceHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldPaymentReference, v))
}

// PaymentReferenceHasSuffix applies the HasSuffix predicate on the "payment_reference" field.
func PaymentReferenceHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldPaymentReference, v))
}

// PaymentReferenceIsNil applies the IsNil predicate on the "payment_reference" field.
func PaymentReferenceIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldPaymentReference))
}

// PaymentReferenceNotNil applies the NotNil predicate on the "payment_reference" field.
func PaymentReferenceNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldPaymentReference))
}

// PaymentReferenceEqualFold applies the EqualFold predicate on the "payment_reference" field.
func PaymentReferenceEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldPaymentReference, v))
}

// PaymentReferenceContainsFold applies the ContainsFold predicate on the "payment_reference" field.
func PaymentReferenceContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldPaymentReference, v))
}

// PaymentWalletAddressEQ applies the EQ predicate on the "payment_wallet_address" field.
func PaymentWalletAddressEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPaymentWalletAddress, v))
}

// PaymentWalletAddressNEQ applies the NEQ predicate on the "payment_wallet_address" field.
func PaymentWalletAddressNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPaymentWalletAddress, v))
}

// PaymentWalletAddressIn applies the In predicate on the "payment_wallet_address" field.
func PaymentWalletAddressIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPaymentWalletAddress, vs...))
}

// PaymentWalletAddressNotIn applies the NotIn predicate on the "payment_wallet_address" field.
func PaymentWalletAddressNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPaymentWalletAddress, vs...))
}

// PaymentWalletAddressGT applies the GT predicate on the "payment_wallet_address" field.
func PaymentWalletAddressGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldPaymentWalletAddress, v))
}

// PaymentWalletAddressGTE applies the GTE predicate on the "payment_wallet_address" field.
func PaymentWalletAddressGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldPaymentWalletAddress, v))
}

// PaymentWalletAddressLT applies the LT predicate on the "payment_wallet_address" field.
func PaymentWalletAddressLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldPaymentWalletAddress, v))
}

// PaymentWalletAddressLTE applies the LTE predicate on the "payment_wallet_address" field.
func PaymentWalletAddressLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldPaymentWalletAddress, v))
}

// PaymentWalletAddressContains applies the Contains predicate on the "payment_wallet_address" field.
func PaymentWalletAddressContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldPaymentWalletAddress, v))
}

// PaymentWalletAddressHasPrefix applies the HasPrefix predicate on the "payment_wallet_address" field.
func PaymentWalletAddressHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldPaymentWalletAddress, v))
}

// PaymentWalletAddressHasSuffix applies the HasSuffix predicate on the "payment_wallet_address" field.
func PaymentWalletAddressHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldPaymentWalletAddress, v))
}

// PaymentWalletAddressIsNil applies the IsNil predicate on the "payment_wallet_address" field.
func PaymentWalletAddressIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldPaymentWalletAddress))
}

// PaymentWalletAddressNotNil applies the NotNil predicate on the "payment_wallet_address" field.
func PaymentWalletAddressNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldPaymentWalletAddress))
}

// PaymentWalletAddressEqualFold applies the EqualFold predicate on the "payment_wallet_address" field.
func PaymentWalletAddressEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldPaymentWalletAddress, v))
}

// PaymentWalletAddressContainsFold applies the ContainsFold predicate on the "payment_wallet_address" field.
func PaymentWalletAddressContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldPaymentWalletAddress, v))
}

// PaymentTransactionHashEQ applies the EQ predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldPaymentTransactionHash, v))
}

// PaymentTransactionHashNEQ applies the NEQ predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldPaymentTransactionHash, v))
}

// PaymentTransactionHashIn applies the In predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldPaymentTransactionHash, vs...))
}

// PaymentTransactionHashNotIn applies the NotIn predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldPaymentTransactionHash, vs...))
}

// PaymentTransactionHashGT applies the GT predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldPaymentTransactionHash, v))
}

// PaymentTransactionHashGTE applies the GTE predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldPaymentTransactionHash, v))
}

// PaymentTransactionHashLT applies the LT predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldPaymentTransactionHash, v))
}

// PaymentTransactionHashLTE applies the LTE predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldPaymentTransactionHash, v))
}

// PaymentTransactionHashContains applies the Contains predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldPaymentTransactionHash, v))
}

// PaymentTransactionHashHasPrefix applies the HasPrefix predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldPaymentTransactionHash, v))
}

// PaymentTransactionHashHasSuffix applies the HasSuffix predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldPaymentTransactionHash, v))
}

// PaymentTransactionHashIsNil applies the IsNil predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldPaymentTransactionHash))
}

// PaymentTransactionHashNotNil applies the NotNil predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldPaymentTransactionHash))
}

// PaymentTransactionHashEqualFold applies the EqualFold predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldPaymentTransactionHash, v))
}

// PaymentTransactionHashContainsFold applies the ContainsFold predicate on the "payment_transaction_hash" field.
func PaymentTransactionHashContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldPaymentTransactionHash, v))
}

// TokenIDEQ applies the EQ predicate on the "token_id" field.
func TokenIDEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTokenID, v))
}

// TokenIDNEQ applies the NEQ predicate on the "token_id" field.
func TokenIDNEQ(v int) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTokenID, v))
}

// TokenIDIn applies the In predicate on the "token_id" field.
func TokenIDIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTokenID, vs...))
}

// TokenIDNotIn applies the NotIn predicate on the "token_id" field.
func TokenIDNotIn(vs ...int) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTokenID, vs...))
}

// TokenIDGT applies the GT predicate on the "token_id" field.
func TokenIDGT(v int) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTokenID, v))
}

// TokenIDGTE applies the GTE predicate on the "token_id" field.
func TokenIDGTE(v int) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTokenID, v))
}

// TokenIDLT applies the LT predicate on the "token_id" field.
func TokenIDLT(v int) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTokenID, v))
}

// TokenIDLTE applies the LTE predicate on the "token_id" field.
func TokenIDLTE(v int) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTokenID, v))
}

// TokenIDIsNil applies the IsNil predicate on the "token_id" field.
func TokenIDIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldTokenID))
}

// TokenIDNotNil applies the NotNil predicate on the "token_id" field.
func TokenIDNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldTokenID))
}

// MintTransactionHashEQ applies the EQ predicate on the "mint_transaction_hash" field.
func MintTransactionHashEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldMintTransactionHash, v))
}

// MintTransactionHashNEQ applies the NEQ predicate on the "mint_transaction_hash" field.
func MintTransactionHashNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldMintTransactionHash, v))
}

// MintTransactionHashIn applies the In predicate on the "mint_transaction_hash" field.
func MintTransactionHashIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldMintTransactionHash, vs...))
}

// MintTransactionHashNotIn applies the NotIn predicate on the "mint_transaction_hash" field.
func MintTransactionHashNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldMintTransactionHash, vs...))
}

// MintTransactionHashGT applies the GT predicate on the "mint_transaction_hash" field.
func MintTransactionHashGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldMintTransactionHash, v))
}

// MintTransactionHashGTE applies the GTE predicate on the "mint_transaction_hash" field.
func MintTransactionHashGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldMintTransactionHash, v))
}

// MintTransactionHashLT applies the LT predicate on the "mint_transaction_hash" field.
func MintTransactionHashLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldMintTransactionHash, v))
}

// MintTransactionHashLTE applies the LTE predicate on the "mint_transaction_hash" field.
func MintTransactionHashLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldMintTransactionHash, v))
}

// MintTransactionHashContains applies the Contains predicate on the "mint_transaction_hash" field.
func MintTransactionHashContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldMintTransactionHash, v))
}

// MintTransactionHashHasPrefix applies the HasPrefix predicate on the "mint_transaction_hash" field.
func MintTransactionHashHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldMintTransactionHash, v))
}

// MintTransactionHashHasSuffix applies the HasSuffix predicate on the "mint_transaction_hash" field.
func MintTransactionHashHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldMintTransactionHash, v))
}

// MintTransactionHashIsNil applies the IsNil predicate on the "mint_transaction_hash" field.
func MintTransactionHashIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldMintTransactionHash))
}

// MintTransactionHashNotNil applies the NotNil predicate on the "mint_transaction_hash" field.
func MintTransactionHashNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldMintTransactionHash))
}

// MintTransactionHashEqualFold applies the EqualFold predicate on the "mint_transaction_hash" field.
func MintTransactionHashEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldMintTransactionHash, v))
}

// MintTransactionHashContainsFold applies the ContainsFold predicate on the "mint_transaction_hash" field.
func MintTransactionHashContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldMintTransactionHash, v))
}

// TransferTransactionHashEQ applies the EQ predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldEQ(FieldTransferTransactionHash, v))
}

// TransferTransactionHashNEQ applies the NEQ predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashNEQ(v string) predicate.Order {
	return predicate.Order(sql.FieldNEQ(FieldTransferTransactionHash, v))
}

// TransferTransactionHashIn applies the In predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldIn(FieldTransferTransactionHash, vs...))
}

// TransferTransactionHashNotIn applies the NotIn predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashNotIn(vs ...string) predicate.Order {
	return predicate.Order(sql.FieldNotIn(FieldTransferTransactionHash, vs...))
}

// TransferTransactionHashGT applies the GT predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashGT(v string) predicate.Order {
	return predicate.Order(sql.FieldGT(FieldTransferTransactionHash, v))
}

// TransferTransactionHashGTE applies the GTE predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashGTE(v string) predicate.Order {
	return predicate.Order(sql.FieldGTE(FieldTransferTransactionHash, v))
}

// TransferTransactionHashLT applies the LT predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashLT(v string) predicate.Order {
	return predicate.Order(sql.FieldLT(FieldTransferTransactionHash, v))
}

// TransferTransactionHashLTE applies the LTE predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashLTE(v string) predicate.Order {
	return predicate.Order(sql.FieldLTE(FieldTransferTransactionHash, v))
}

// TransferTransactionHashContains applies the Contains predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashContains(v string) predicate.Order {
	return predicate.Order(sql.FieldContains(FieldTransferTransactionHash, v))
}

// TransferTransactionHashHasPrefix applies the HasPrefix predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashHasPrefix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasPrefix(FieldTransferTransactionHash, v))
}

// TransferTransactionHashHasSuffix applies the HasSuffix predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashHasSuffix(v string) predicate.Order {
	return predicate.Order(sql.FieldHasSuffix(FieldTransferTransactionHash, v))
}

// TransferTransactionHashIsNil applies the IsNil predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashIsNil() predicate.Order {
	return predicate.Order(sql.FieldIsNull(FieldTransferTransactionHash))
}

// TransferTransactionHashNotNil applies the NotNil predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashNotNil() predicate.Order {
	return predicate.Order(sql.FieldNotNull(FieldTransferTransactionHash))
}

// TransferTransactionHashEqualFold applies the EqualFold predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashEqualFold(v string) predicate.Order {
	return predicate.Order(sql.FieldEqualFold(FieldTransferTransactionHash, v))
}

// TransferTransactionHashContainsFold applies the ContainsFold predicate on the "transfer_transaction_hash" field.
func TransferTransactionHashContainsFold(v string) predicate.Order {
	return predicate.Order(sql.FieldContainsFold(FieldTransferTransactionHash, v))
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasTicket applies the HasEdge predicate on the "ticket" edge.
func HasTicket() predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, TicketTable, TicketColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTicketWith applies the HasEdge predicate on the "ticket" edge with a given conditions (other predicates).
func HasTicketWith(preds ...predicate.Ticket) predicate.Order {
	return predicate.Order(func(s *sql.Selector) {
		step := newTicketStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Order) predicate.Order {
	return predicate.Order(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Order) predicate.Order {
	return predicate.Order(sql.NotPredicates(p))
}
