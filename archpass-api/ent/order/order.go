// Code generated by ent, DO NOT EDIT.

package order

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the order type in the database.
	Label = "order"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTicketID holds the string denoting the ticket_id field in the database.
	FieldTicketID = "ticket_id"
	// FieldEventID holds the string denoting the event_id field in the database.
	FieldEventID = "event_id"
	// FieldWalletAddress holds the string denoting the wallet_address field in the database.
	FieldWalletAddress = "wallet_address"
	// FieldPriceInCents holds the string denoting the price_in_cents field in the database.
	FieldPriceInCents = "price_in_cents"
	// FieldCcCheckoutID holds the string denoting the cc_checkout_id field in the database.
	FieldCcCheckoutID = "cc_checkout_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldModifiedAt holds the string denoting the modified_at field in the database.
	FieldModifiedAt = "modified_at"
	// FieldPaymentReference holds the string denoting the payment_reference field in the database.
	FieldPaymentReference = "payment_reference"
	// FieldPaymentWalletAddress holds the string denoting the payment_wallet_address field in the database.
	FieldPaymentWalletAddress = "payment_wallet_address"
	// FieldPaymentTransactionHash holds the string denoting the payment_transaction_hash field in the database.
	FieldPaymentTransactionHash = "payment_transaction_hash"
	// FieldTokenID holds the string denoting the token_id field in the database.
	FieldTokenID = "token_id"
	// FieldMintTransactionHash holds the string denoting the mint_transaction_hash field in the database.
	FieldMintTransactionHash = "mint_transaction_hash"
	// FieldTransferTransactionHash holds the string denoting the transfer_transaction_hash field in the database.
	FieldTransferTransactionHash = "transfer_transaction_hash"
	// EdgeEvent holds the string denoting the event edge name in mutations.
	EdgeEvent = "event"
	// EdgeTicket holds the string denoting the ticket edge name in mutations.
	EdgeTicket = "ticket"
	// Table holds the table name of the order in the database.
	Table = "orders"
	// EventTable is the table that holds the event relation/edge.
	EventTable = "orders"
	// EventInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventInverseTable = "events"
	// EventColumn is the table column denoting the event relation/edge.
	EventColumn = "event_id"
	// TicketTable is the table that holds the ticket relation/edge.
	TicketTable = "orders"
	// TicketInverseTable is the table name for the Ticket entity.
	// It exists in this package in order to avoid circular dependency with the "ticket" package.
	TicketInverseTable = "tickets"
	// TicketColumn is the table column denoting the ticket relation/edge.
	TicketColumn = "ticket_id"
)

// Columns holds all SQL columns for order fields.
var Columns = []string{
	FieldID,
	FieldTicketID,
	FieldEventID,
	FieldWalletAddress,
	FieldPriceInCents,
	FieldCcCheckoutID,
	FieldCreatedAt,
	FieldModifiedAt,
	FieldPaymentReference,
	FieldPaymentWalletAddress,
	FieldPaymentTransactionHash,
	FieldTokenID,
	FieldMintTransactionHash,
	FieldTransferTransactionHash,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultModifiedAt holds the default value on creation for the "modified_at" field.
	DefaultModifiedAt func() time.Time
	// UpdateDefaultModifiedAt holds the default value on update for the "modified_at" field.
	UpdateDefaultModifiedAt func() time.Time
)

// OrderOption defines the ordering options for the Order queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByTicketID orders the results by the ticket_id field.
func ByTicketID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTicketID, opts...).ToFunc()
}

// ByEventID orders the results by the event_id field.
func ByEventID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEventID, opts...).ToFunc()
}

// ByWalletAddress orders the results by the wallet_address field.
func ByWalletAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWalletAddress, opts...).ToFunc()
}

// ByPriceInCents orders the results by the price_in_cents field.
func ByPriceInCents(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPriceInCents, opts...).ToFunc()
}

// ByCcCheckoutID orders the results by the cc_checkout_id field.
func ByCcCheckoutID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCcCheckoutID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByModifiedAt orders the results by the modified_at field.
func ByModifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModifiedAt, opts...).ToFunc()
}

// ByPaymentReference orders the results by the payment_reference field.
func ByPaymentReference(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentReference, opts...).ToFunc()
}

// ByPaymentWalletAddress orders the results by the payment_wallet_address field.
func ByPaymentWalletAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentWalletAddress, opts...).ToFunc()
}

// ByPaymentTransactionHash orders the results by the payment_transaction_hash field.
func ByPaymentTransactionHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPaymentTransactionHash, opts...).ToFunc()
}

// ByTokenID orders the results by the token_id field.
func ByTokenID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTokenID, opts...).ToFunc()
}

// ByMintTransactionHash orders the results by the mint_transaction_hash field.
func ByMintTransactionHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMintTransactionHash, opts...).ToFunc()
}

// ByTransferTransactionHash orders the results by the transfer_transaction_hash field.
func ByTransferTransactionHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTransferTransactionHash, opts...).ToFunc()
}

// ByEventField orders the results by event field.
func ByEventField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventStep(), sql.OrderByField(field, opts...))
	}
}

// ByTicketField orders the results by ticket field.
func ByTicketField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTicketStep(), sql.OrderByField(field, opts...))
	}
}
func newEventStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
	)
}
func newTicketStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TicketInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, TicketTable, TicketColumn),
	)
}
