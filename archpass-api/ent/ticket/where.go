// Code generated by ent, DO NOT EDIT.

package ticket

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/garguelles/archpass/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldDescription, v))
}

// TicketSlug applies equality check predicate on the "ticket_slug" field. It's identical to TicketSlugEQ.
func TicketSlug(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldTicketSlug, v))
}

// MintPrice applies equality check predicate on the "mint_price" field. It's identical to MintPriceEQ.
func MintPrice(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldMintPrice, v))
}

// Quantity applies equality check predicate on the "quantity" field. It's identical to QuantityEQ.
func Quantity(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldQuantity, v))
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldEventID, v))
}

// TicketHash applies equality check predicate on the "ticket_hash" field. It's identical to TicketHashEQ.
func TicketHash(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldTicketHash, v))
}

// ImageURL applies equality check predicate on the "image_url" field. It's identical to ImageURLEQ.
func ImageURL(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldImageURL, v))
}

// ContractAddress applies equality check predicate on the "contract_address" field. It's identical to ContractAddressEQ.
func ContractAddress(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldContractAddress, v))
}

// TransactionHash applies equality check predicate on the "transaction_hash" field. It's identical to TransactionHashEQ.
func TransactionHash(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldTransactionHash, v))
}

// BlockNumber applies equality check predicate on the "block_number" field. It's identical to BlockNumberEQ.
func BlockNumber(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldBlockNumber, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldUpdatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldDescription, v))
}

// TicketSlugEQ applies the EQ predicate on the "ticket_slug" field.
func TicketSlugEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldTicketSlug, v))
}

// TicketSlugNEQ applies the NEQ predicate on the "ticket_slug" field.
func TicketSlugNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldTicketSlug, v))
}

// TicketSlugIn applies the In predicate on the "ticket_slug" field.
func TicketSlugIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldTicketSlug, vs...))
}

// TicketSlugNotIn applies the NotIn predicate on the "ticket_slug" field.
func TicketSlugNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldTicketSlug, vs...))
}

// TicketSlugGT applies the GT predicate on the "ticket_slug" field.
func TicketSlugGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldTicketSlug, v))
}

// TicketSlugGTE applies the GTE predicate on the "ticket_slug" field.
func TicketSlugGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldTicketSlug, v))
}

// TicketSlugLT applies the LT predicate on the "ticket_slug" field.
func TicketSlugLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldTicketSlug, v))
}

// TicketSlugLTE applies the LTE predicate on the "ticket_slug" field.
func TicketSlugLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldTicketSlug, v))
}

// TicketSlugContains applies the Contains predicate on the "ticket_slug" field.
func TicketSlugContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldTicketSlug, v))
}

// TicketSlugHasPrefix applies the HasPrefix predicate on the "ticket_slug" field.
func TicketSlugHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldTicketSlug, v))
}

// TicketSlugHasSuffix applies the HasSuffix predicate on the "ticket_slug" field.
func TicketSlugHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldTicketSlug, v))
}

// TicketSlugEqualFold applies the EqualFold predicate on the "ticket_slug" field.
func TicketSlugEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldTicketSlug, v))
}

// TicketSlugContainsFold applies the ContainsFold predicate on the "ticket_slug" field.
func TicketSlugContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldTicketSlug, v))
}

// MintPriceEQ applies the EQ predicate on the "mint_price" field.
func MintPriceEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldMintPrice, v))
}

// MintPriceNEQ applies the NEQ predicate on the "mint_price" field.
func MintPriceNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldMintPrice, v))
}

// MintPriceIn applies the In predicate on the "mint_price" field.
func MintPriceIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldMintPrice, vs...))
}

// MintPriceNotIn applies the NotIn predicate on the "mint_price" field.
func MintPriceNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldMintPrice, vs...))
}

// MintPriceGT applies the GT predicate on the "mint_price" field.
func MintPriceGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldMintPrice, v))
}

// MintPriceGTE applies the GTE predicate on the "mint_price" field.
func MintPriceGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldMintPrice, v))
}

// MintPriceLT applies the LT predicate on the "mint_price" field.
func MintPriceLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldMintPrice, v))
}

// MintPriceLTE applies the LTE predicate on the "mint_price" field.
func MintPriceLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldMintPrice, v))
}

// MintPriceContains applies the Contains predicate on the "mint_price" field.
func MintPriceContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldMintPrice, v))
}

// MintPriceHasPrefix applies the HasPrefix predicate on the "mint_price" field.
func MintPriceHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldMintPrice, v))
}

// MintPriceHasSuffix applies the HasSuffix predicate on the "mint_price" field.
func MintPriceHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldMintPrice, v))
}

// MintPriceEqualFold applies the EqualFold predicate on the "mint_price" field.
func MintPriceEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldMintPrice, v))
}

// MintPriceContainsFold applies the ContainsFold predicate on the "mint_price" field.
func MintPriceContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldMintPrice, v))
}

// QuantityEQ applies the EQ predicate on the "quantity" field.
func QuantityEQ(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldQuantity, v))
}

// QuantityNEQ applies the NEQ predicate on the "quantity" field.
func QuantityNEQ(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldQuantity, v))
}

// QuantityIn applies the In predicate on the "quantity" field.
func QuantityIn(vs ...int) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldQuantity, vs...))
}

// QuantityNotIn applies the NotIn predicate on the "quantity" field.
func QuantityNotIn(vs ...int) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldQuantity, vs...))
}

// QuantityGT applies the GT predicate on the "quantity" field.
func QuantityGT(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldQuantity, v))
}

// QuantityGTE applies the GTE predicate on the "quantity" field.
func QuantityGTE(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldQuantity, v))
}

// QuantityLT applies the LT predicate on the "quantity" field.
func QuantityLT(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldQuantity, v))
}

// QuantityLTE applies the LTE predicate on the "quantity" field.
func QuantityLTE(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldQuantity, v))
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldEventID, v))
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v int) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldEventID, v))
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...int) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldEventID, vs...))
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...int) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldEventID, vs...))
}

// TicketHashEQ applies the EQ predicate on the "ticket_hash" field.
func TicketHashEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldTicketHash, v))
}

// TicketHashNEQ applies the NEQ predicate on the "ticket_hash" field.
func TicketHashNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldTicketHash, v))
}

// TicketHashIn applies the In predicate on the "ticket_hash" field.
func TicketHashIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldTicketHash, vs...))
}

// TicketHashNotIn applies the NotIn predicate on the "ticket_hash" field.
func TicketHashNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldTicketHash, vs...))
}

// TicketHashGT applies the GT predicate on the "ticket_hash" field.
func TicketHashGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldTicketHash, v))
}

// TicketHashGTE applies the GTE predicate on the "ticket_hash" field.
func TicketHashGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldTicketHash, v))
}

// TicketHashLT applies the LT predicate on the "ticket_hash" field.
func TicketHashLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldTicketHash, v))
}

// TicketHashLTE applies the LTE predicate on the "ticket_hash" field.
func TicketHashLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldTicketHash, v))
}

// TicketHashContains applies the Contains predicate on the "ticket_hash" field.
func TicketHashContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldTicketHash, v))
}

// TicketHashHasPrefix applies the HasPrefix predicate on the "ticket_hash" field.
func TicketHashHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldTicketHash, v))
}

// TicketHashHasSuffix applies the HasSuffix predicate on the "ticket_hash" field.
func TicketHashHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldTicketHash, v))
}

// TicketHashIsNil applies the IsNil predicate on the "ticket_hash" field.
func TicketHashIsNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldIsNull(FieldTicketHash))
}

// TicketHashNotNil applies the NotNil predicate on the "ticket_hash" field.
func TicketHashNotNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldNotNull(FieldTicketHash))
}

// TicketHashEqualFold applies the EqualFold predicate on the "ticket_hash" field.
func TicketHashEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldTicketHash, v))
}

// TicketHashContainsFold applies the ContainsFold predicate on the "ticket_hash" field.
func TicketHashContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldTicketHash, v))
}

// ImageURLEQ applies the EQ predicate on the "image_url" field.
func ImageURLEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldImageURL, v))
}

// ImageURLNEQ applies the NEQ predicate on the "image_url" field.
func ImageURLNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldImageURL, v))
}

// ImageURLIn applies the In predicate on the "image_url" field.
func ImageURLIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldImageURL, vs...))
}

// ImageURLNotIn applies the NotIn predicate on the "image_url" field.
func ImageURLNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldImageURL, vs...))
}

// ImageURLGT applies the GT predicate on the "image_url" field.
func ImageURLGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldImageURL, v))
}

// ImageURLGTE applies the GTE predicate on the "image_url" field.
func ImageURLGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldImageURL, v))
}

// ImageURLLT applies the LT predicate on the "image_url" field.
func ImageURLLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldImageURL, v))
}

// ImageURLLTE applies the LTE predicate on the "image_url" field.
func ImageURLLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldImageURL, v))
}

// ImageURLContains applies the Contains predicate on the "image_url" field.
func ImageURLContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldImageURL, v))
}

// ImageURLHasPrefix applies the HasPrefix predicate on the "image_url" field.
func ImageURLHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldImageURL, v))
}

// ImageURLHasSuffix applies the HasSuffix predicate on the "image_url" field.
func ImageURLHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldImageURL, v))
}

// ImageURLIsNil applies the IsNil predicate on the "image_url" field.
func ImageURLIsNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldIsNull(FieldImageURL))
}

// ImageURLNotNil applies the NotNil predicate on the "image_url" field.
func ImageURLNotNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldNotNull(FieldImageURL))
}

// ImageURLEqualFold applies the EqualFold predicate on the "image_url" field.
func ImageURLEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldImageURL, v))
}

// ImageURLContainsFold applies the ContainsFold predicate on the "image_url" field.
func ImageURLContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldImageURL, v))
}

// ContractAddressEQ applies the EQ predicate on the "contract_address" field.
func ContractAddressEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldContractAddress, v))
}

// ContractAddressNEQ applies the NEQ predicate on the "contract_address" field.
func ContractAddressNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldContractAddress, v))
}

// ContractAddressIn applies the In predicate on the "contract_address" field.
func ContractAddressIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldContractAddress, vs...))
}

// ContractAddressNotIn applies the NotIn predicate on the "contract_address" field.
func ContractAddressNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldContractAddress, vs...))
}

// ContractAddressGT applies the GT predicate on the "contract_address" field.
func ContractAddressGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldContractAddress, v))
}

// ContractAddressGTE applies the GTE predicate on the "contract_address" field.
func ContractAddressGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldContractAddress, v))
}

// ContractAddressLT applies the LT predicate on the "contract_address" field.
func ContractAddressLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldContractAddress, v))
}

// ContractAddressLTE applies the LTE predicate on the "contract_address" field.
func ContractAddressLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldContractAddress, v))
}

// ContractAddressContains applies the Contains predicate on the "contract_address" field.
func ContractAddressContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldContractAddress, v))
}

// ContractAddressHasPrefix applies the HasPrefix predicate on the "contract_address" field.
func ContractAddressHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldContractAddress, v))
}

// ContractAddressHasSuffix applies the HasSuffix predicate on the "contract_address" field.
func ContractAddressHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldContractAddress, v))
}

// ContractAddressIsNil applies the IsNil predicate on the "contract_address" field.
func ContractAddressIsNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldIsNull(FieldContractAddress))
}

// ContractAddressNotNil applies the NotNil predicate on the "contract_address" field.
func ContractAddressNotNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldNotNull(FieldContractAddress))
}

// ContractAddressEqualFold applies the EqualFold predicate on the "contract_address" field.
func ContractAddressEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldContractAddress, v))
}

// ContractAddressContainsFold applies the ContainsFold predicate on the "contract_address" field.
func ContractAddressContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldContractAddress, v))
}

// TransactionHashEQ applies the EQ predicate on the "transaction_hash" field.
func TransactionHashEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldTransactionHash, v))
}

// TransactionHashNEQ applies the NEQ predicate on the "transaction_hash" field.
func TransactionHashNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldTransactionHash, v))
}

// TransactionHashIn applies the In predicate on the "transaction_hash" field.
func TransactionHashIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldTransactionHash, vs...))
}

// TransactionHashNotIn applies the NotIn predicate on the "transaction_hash" field.
func TransactionHashNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldTransactionHash, vs...))
}

// TransactionHashGT applies the GT predicate on the "transaction_hash" field.
func TransactionHashGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldTransactionHash, v))
}

// TransactionHashGTE applies the GTE predicate on the "transaction_hash" field.
func TransactionHashGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldTransactionHash, v))
}

// TransactionHashLT applies the LT predicate on the "transaction_hash" field.
func TransactionHashLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldTransactionHash, v))
}

// TransactionHashLTE applies the LTE predicate on the "transaction_hash" field.
func TransactionHashLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldTransactionHash, v))
}

// TransactionHashContains applies the Contains predicate on the "transaction_hash" field.
func TransactionHashContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldTransactionHash, v))
}

// TransactionHashHasPrefix applies the HasPrefix predicate on the "transaction_hash" field.
func TransactionHashHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldTransactionHash, v))
}

// TransactionHashHasSuffix applies the HasSuffix predicate on the "transaction_hash" field.
func TransactionHashHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldTransactionHash, v))
}

// TransactionHashIsNil applies the IsNil predicate on the "transaction_hash" field.
func TransactionHashIsNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldIsNull(FieldTransactionHash))
}

// TransactionHashNotNil applies the NotNil predicate on the "transaction_hash" field.
func TransactionHashNotNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldNotNull(FieldTransactionHash))
}

// TransactionHashEqualFold applies the EqualFold predicate on the "transaction_hash" field.
func TransactionHashEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldTransactionHash, v))
}

// TransactionHashContainsFold applies the ContainsFold predicate on the "transaction_hash" field.
func TransactionHashContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldTransactionHash, v))
}

// BlockNumberEQ applies the EQ predicate on the "block_number" field.
func BlockNumberEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldBlockNumber, v))
}

// BlockNumberNEQ applies the NEQ predicate on the "block_number" field.
func BlockNumberNEQ(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldBlockNumber, v))
}

// BlockNumberIn applies the In predicate on the "block_number" field.
func BlockNumberIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldBlockNumber, vs...))
}

// BlockNumberNotIn applies the NotIn predicate on the "block_number" field.
func BlockNumberNotIn(vs ...string) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldBlockNumber, vs...))
}

// BlockNumberGT applies the GT predicate on the "block_number" field.
func BlockNumberGT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldBlockNumber, v))
}

// BlockNumberGTE applies the GTE predicate on the "block_number" field.
func BlockNumberGTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldBlockNumber, v))
}

// BlockNumberLT applies the LT predicate on the "block_number" field.
func BlockNumberLT(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldBlockNumber, v))
}

// BlockNumberLTE applies the LTE predicate on the "block_number" field.
func BlockNumberLTE(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldBlockNumber, v))
}

// BlockNumberContains applies the Contains predicate on the "block_number" field.
func BlockNumberContains(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContains(FieldBlockNumber, v))
}

// BlockNumberHasPrefix applies the HasPrefix predicate on the "block_number" field.
func BlockNumberHasPrefix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasPrefix(FieldBlockNumber, v))
}

// BlockNumberHasSuffix applies the HasSuffix predicate on the "block_number" field.
func BlockNumberHasSuffix(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldHasSuffix(FieldBlockNumber, v))
}

// BlockNumberIsNil applies the IsNil predicate on the "block_number" field.
func BlockNumberIsNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldIsNull(FieldBlockNumber))
}

// BlockNumberNotNil applies the NotNil predicate on the "block_number" field.
func BlockNumberNotNil() predicate.Ticket {
	return predicate.Ticket(sql.FieldNotNull(FieldBlockNumber))
}

// BlockNumberEqualFold applies the EqualFold predicate on the "block_number" field.
func BlockNumberEqualFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldEqualFold(FieldBlockNumber, v))
}

// BlockNumberContainsFold applies the ContainsFold predicate on the "block_number" field.
func BlockNumberContainsFold(v string) predicate.Ticket {
	return predicate.Ticket(sql.FieldContainsFold(FieldBlockNumber, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Ticket {
	return predicate.Ticket(sql.FieldLTE(FieldUpdatedAt, v))
}

// HasEvent applies the HasEdge predicate on the "event" edge.
func HasEvent() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, EventTable, EventColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasEventWith applies the HasEdge predicate on the "event" edge with a given conditions (other predicates).
func HasEventWith(preds ...predicate.Event) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := newEventStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAttendees applies the HasEdge predicate on the "attendees" edge.
func HasAttendees() predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, AttendeesTable, AttendeesColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAttendeesWith applies the HasEdge predicate on the "attendees" edge with a given conditions (other predicates).
func HasAttendeesWith(preds ...predicate.Attendee) predicate.Ticket {
	return predicate.Ticket(func(s *sql.Selector) {
		step := newAttendeesStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Ticket) predicate.Ticket {
	return predicate.Ticket(sql.NotPredicates(p))
}
