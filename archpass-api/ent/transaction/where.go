// Code generated by ent, DO NOT EDIT.

package transaction

import (
	"entgo.io/ent/dialect/sql"
	"github.com/garguelles/archpass/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldID, id))
}

// EventType applies equality check predicate on the "event_type" field. It's identical to EventTypeEQ.
func EventType(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldEventType, v))
}

// WalletAddress applies equality check predicate on the "wallet_address" field. It's identical to WalletAddressEQ.
func WalletAddress(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldWalletAddress, v))
}

// TransactionHash applies equality check predicate on the "transaction_hash" field. It's identical to TransactionHashEQ.
func TransactionHash(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionHash, v))
}

// BlockNumber applies equality check predicate on the "block_number" field. It's identical to BlockNumberEQ.
func BlockNumber(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldBlockNumber, v))
}

// EventTypeEQ applies the EQ predicate on the "event_type" field.
func EventTypeEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldEventType, v))
}

// EventTypeNEQ applies the NEQ predicate on the "event_type" field.
func EventTypeNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldEventType, v))
}

// EventTypeIn applies the In predicate on the "event_type" field.
func EventTypeIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldEventType, vs...))
}

// EventTypeNotIn applies the NotIn predicate on the "event_type" field.
func EventTypeNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldEventType, vs...))
}

// EventTypeGT applies the GT predicate on the "event_type" field.
func EventTypeGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldEventType, v))
}

// EventTypeGTE applies the GTE predicate on the "event_type" field.
func EventTypeGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldEventType, v))
}

// EventTypeLT applies the LT predicate on the "event_type" field.
func EventTypeLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldEventType, v))
}

// EventTypeLTE applies the LTE predicate on the "event_type" field.
func EventTypeLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldEventType, v))
}

// EventTypeContains applies the Contains predicate on the "event_type" field.
func EventTypeContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldEventType, v))
}

// EventTypeHasPrefix applies the HasPrefix predicate on the "event_type" field.
func EventTypeHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldEventType, v))
}

// EventTypeHasSuffix applies the HasSuffix predicate on the "event_type" field.
func EventTypeHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldEventType, v))
}

// EventTypeEqualFold applies the EqualFold predicate on the "event_type" field.
func EventTypeEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldEventType, v))
}

// EventTypeContainsFold applies the ContainsFold predicate on the "event_type" field.
func EventTypeContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldEventType, v))
}

// WalletAddressEQ applies the EQ predicate on the "wallet_address" field.
func WalletAddressEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldWalletAddress, v))
}

// WalletAddressNEQ applies the NEQ predicate on the "wallet_address" field.
func WalletAddressNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldWalletAddress, v))
}

// WalletAddressIn applies the In predicate on the "wallet_address" field.
func WalletAddressIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldWalletAddress, vs...))
}

// WalletAddressNotIn applies the NotIn predicate on the "wallet_address" field.
func WalletAddressNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldWalletAddress, vs...))
}

// WalletAddressGT applies the GT predicate on the "wallet_address" field.
func WalletAddressGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldWalletAddress, v))
}

// WalletAddressGTE applies the GTE predicate on the "wallet_address" field.
func WalletAddressGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldWalletAddress, v))
}

// WalletAddressLT applies the LT predicate on the "wallet_address" field.
func WalletAddressLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldWalletAddress, v))
}

// WalletAddressLTE applies the LTE predicate on the "wallet_address" field.
func WalletAddressLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldWalletAddress, v))
}

// WalletAddressContains applies the Contains predicate on the "wallet_address" field.
func WalletAddressContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldWalletAddress, v))
}

// WalletAddressHasPrefix applies the HasPrefix predicate on the "wallet_address" field.
func WalletAddressHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldWalletAddress, v))
}

// WalletAddressHasSuffix applies the HasSuffix predicate on the "wallet_address" field.
func WalletAddressHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldWalletAddress, v))
}

// WalletAddressEqualFold applies the EqualFold predicate on the "wallet_address" field.
func WalletAddressEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldWalletAddress, v))
}

// WalletAddressContainsFold applies the ContainsFold predicate on the "wallet_address" field.
func WalletAddressContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldWalletAddress, v))
}

// TransactionHashEQ applies the EQ predicate on the "transaction_hash" field.
func TransactionHashEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldTransactionHash, v))
}

// TransactionHashNEQ applies the NEQ predicate on the "transaction_hash" field.
func TransactionHashNEQ(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldTransactionHash, v))
}

// TransactionHashIn applies the In predicate on the "transaction_hash" field.
func TransactionHashIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldTransactionHash, vs...))
}

// TransactionHashNotIn applies the NotIn predicate on the "transaction_hash" field.
func TransactionHashNotIn(vs ...string) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldTransactionHash, vs...))
}

// TransactionHashGT applies the GT predicate on the "transaction_hash" field.
func TransactionHashGT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldTransactionHash, v))
}

// TransactionHashGTE applies the GTE predicate on the "transaction_hash" field.
func TransactionHashGTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldTransactionHash, v))
}

// TransactionHashLT applies the LT predicate on the "transaction_hash" field.
func TransactionHashLT(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldTransactionHash, v))
}

// TransactionHashLTE applies the LTE predicate on the "transaction_hash" field.
func TransactionHashLTE(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldTransactionHash, v))
}

// TransactionHashContains applies the Contains predicate on the "transaction_hash" field.
func TransactionHashContains(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContains(FieldTransactionHash, v))
}

// TransactionHashHasPrefix applies the HasPrefix predicate on the "transaction_hash" field.
func TransactionHashHasPrefix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasPrefix(FieldTransactionHash, v))
}

// TransactionHashHasSuffix applies the HasSuffix predicate on the "transaction_hash" field.
func TransactionHashHasSuffix(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldHasSuffix(FieldTransactionHash, v))
}

// TransactionHashEqualFold applies the EqualFold predicate on the "transaction_hash" field.
func TransactionHashEqualFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldEqualFold(FieldTransactionHash, v))
}

// TransactionHashContainsFold applies the ContainsFold predicate on the "transaction_hash" field.
func TransactionHashContainsFold(v string) predicate.Transaction {
	return predicate.Transaction(sql.FieldContainsFold(FieldTransactionHash, v))
}

// BlockNumberEQ applies the EQ predicate on the "block_number" field.
func BlockNumberEQ(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldEQ(FieldBlockNumber, v))
}

// BlockNumberNEQ applies the NEQ predicate on the "block_number" field.
func BlockNumberNEQ(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNEQ(FieldBlockNumber, v))
}

// BlockNumberIn applies the In predicate on the "block_number" field.
func BlockNumberIn(vs ...int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldIn(FieldBlockNumber, vs...))
}

// BlockNumberNotIn applies the NotIn predicate on the "block_number" field.
func BlockNumberNotIn(vs ...int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldNotIn(FieldBlockNumber, vs...))
}

// BlockNumberGT applies the GT predicate on the "block_number" field.
func BlockNumberGT(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGT(FieldBlockNumber, v))
}

// BlockNumberGTE applies the GTE predicate on the "block_number" field.
func BlockNumberGTE(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldGTE(FieldBlockNumber, v))
}

// BlockNumberLT applies the LT predicate on the "block_number" field.
func BlockNumberLT(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLT(FieldBlockNumber, v))
}

// BlockNumberLTE applies the LTE predicate on the "block_number" field.
func BlockNumberLTE(v int64) predicate.Transaction {
	return predicate.Transaction(sql.FieldLTE(FieldBlockNumber, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Transaction) predicate.Transaction {
	return predicate.Transaction(sql.NotPredicates(p))
}
